[{"categories":["网站使用"],"content":"探索 Hugo - LoveIt 主题的全部内容和背后的核心概念.","date":"2020-03-06","objectID":"/theme-documentation-basics/","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["网站使用"],"content":"探索 Hugo - LoveIt 主题的全部内容和背后的核心概念. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:0:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["网站使用"],"content":"1 准备 由于 Hugo 提供的便利性, Hugo 本身是这个主题唯一的依赖. 直接安装满足你操作系统 (Windows, Linux, macOS) 的最新版本  Hugo (\u003e 0.62.0). 为什么不支持早期版本的 Hugo? 由于 Markdown 渲染钩子函数 在 Hugo 圣诞节版本 中被引入, 本主题只支持高于 0.62.0 的 Hugo 版本. 推荐使用 Hugo extended 版本 由于这个主题的一些特性需要将  SCSS 转换为  CSS, 推荐使用 Hugo extended 版本来获得更好的使用体验. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:1:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["网站使用"],"content":"2 安装 以下步骤可帮助你初始化新网站. 如果你根本不了解 Hugo, 我们强烈建议你按照此 快速入门文档 进一步了解它. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:2:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["网站使用"],"content":"2.1 创建你的项目 Hugo 提供了一个 new 命令来创建一个新的网站: hugo new site my_website cd my_website ","date":"2020-03-06","objectID":"/theme-documentation-basics/:2:1","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["网站使用"],"content":"2.2 安装主题 LoveIt 主题的仓库是: https://github.com/dillonzq/LoveIt. 你可以下载主题的 最新版本  .zip 文件 并且解压放到 themes 目录. 另外, 也可以直接把这个主题克隆到 themes 目录: git clone https://github.com/dillonzq/LoveIt.git themes/LoveIt 或者, 初始化你的项目目录为 git 仓库, 并且把主题仓库作为你的网站目录的子模块: git init git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt ","date":"2020-03-06","objectID":"/theme-documentation-basics/:2:2","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["网站使用"],"content":"2.3 基础配置 以下是 LoveIt 主题的基本配置: baseURL = \"http://example.org/\" # [en, zh-cn, fr, ...] 设置默认的语言 defaultContentLanguage = \"zh-cn\" # 网站语言, 仅在这里 CN 大写 languageCode = \"zh-CN\" # 是否包括中日韩文字 hasCJKLanguage = true # 网站标题 title = \"我的全新 Hugo 网站\" # 更改使用 Hugo 构建网站时使用的默认主题 theme = \"LoveIt\" [params] # LoveIt 主题版本 version = \"0.2.X\" [menu] [[menu.main]] identifier = \"posts\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" name = \"文章\" url = \"/posts/\" # 当你将鼠标悬停在此菜单链接上时, 将显示的标题 title = \"\" weight = 1 [[menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" weight = 2 [[menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" weight = 3 # Hugo 解析文档的配置 [markup] # 语法高亮设置 (https://gohugo.io/content-management/syntax-highlighting) [markup.highlight] # false 是必要的设置 (https://github.com/dillonzq/LoveIt/issues/158) noClasses = false 注意 在构建网站时, 你可以使用 --theme 选项设置主题. 但是, 我建议你修改配置文件 (config.toml) 将本主题设置为默认主题. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:2:3","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["网站使用"],"content":"2.4 创建你的第一篇文章 以下是创建第一篇文章的方法: hugo new posts/first_post.md 通过添加一些示例内容并替换文件开头的标题, 你可以随意编辑文章. 注意 默认情况下, 所有文章和页面均作为草稿创建. 如果想要渲染这些页面, 请从元数据中删除属性 draft: true, 设置属性 draft: false 或者为 hugo 命令添加 -D/--buildDrafts 参数. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:2:4","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["网站使用"],"content":"2.5 在本地启动网站 使用以下命令启动网站: hugo serve 去查看 http://localhost:1313. 基本配置下的预览基本配置下的预览 \" 基本配置下的预览 技巧 当你运行 hugo serve 时, 当文件内容更改时, 页面会随着更改自动刷新. 注意 由于本主题使用了 Hugo 中的 .Scratch 来实现一些特性, 非常建议你为 hugo server 命令添加 --disableFastRender 参数来实时预览你正在编辑的文章页面. hugo serve --disableFastRender ","date":"2020-03-06","objectID":"/theme-documentation-basics/:2:5","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["网站使用"],"content":"2.6 构建网站 当你准备好部署你的网站时, 运行以下命令: hugo 会生成一个 public 目录, 其中包含你网站的所有静态内容和资源. 现在可以将其部署在任何 Web 服务器上. 技巧 网站内容可以通过 Netlify 自动发布和托管 (了解有关通过 Netlify 进行 HUGO 自动化部署 的更多信息). 或者, 您可以使用 AWS Amplify, Github pages, Render 以及更多… ","date":"2020-03-06","objectID":"/theme-documentation-basics/:2:6","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["网站使用"],"content":"3 配置 ","date":"2020-03-06","objectID":"/theme-documentation-basics/:3:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["网站使用"],"content":"3.1 网站配置 除了 Hugo 全局配置 和 菜单配置 之外, LoveIt 主题还允许您在网站配置中定义以下参数 (这是一个示例 config.toml, 其内容为默认值). 请打开下面的代码块查看完整的示例配置 : [params] # LoveIt 主题版本 version = \"0.2.X\" # 网站描述 description = \"这是我的全新 Hugo 网站\" # 网站关键词 keywords = [\"Theme\", \"Hugo\"] # 网站默认主题样式 (\"light\", \"dark\", \"auto\") defaultTheme = \"auto\" # 公共 git 仓库路径，仅在 enableGitInfo 设为 true 时有效 gitRepo = \"\" # 哪种哈希函数用来 SRI, 为空时表示不使用 SRI # (\"sha256\", \"sha384\", \"sha512\", \"md5\") fingerprint = \"\" # 日期格式 dateFormat = \"2006-01-02\" # 网站图片, 用于 Open Graph 和 Twitter Cards images = [\"/logo.png\"] # 应用图标配置 [params.app] # 当添加到 iOS 主屏幕或者 Android 启动器时的标题, 覆盖默认标题 title = \"LoveIt\" # 是否隐藏网站图标资源链接 noFavicon = false # 更现代的 SVG 网站图标, 可替代旧的 .png 和 .ico 文件 svgFavicon = \"\" # Android 浏览器主题色 themeColor = \"#ffffff\" # Safari 图标颜色 iconColor = \"#5bbad5\" # Windows v8-10磁贴颜色 tileColor = \"#da532c\" # 搜索配置 [params.search] enable = true # 搜索引擎的类型 (\"lunr\", \"algolia\") type = \"lunr\" # 文章内容最长索引长度 contentLength = 4000 # 搜索框的占位提示语 placeholder = \"\" # 最大结果数目 maxResultLength = 10 # 结果内容片段长度 snippetLength = 50 # 搜索结果中高亮部分的 HTML 标签 highlightTag = \"em\" # 是否在搜索索引中使用基于 baseURL 的绝对路径 absoluteURL = false [params.search.algolia] index = \"\" appID = \"\" searchKey = \"\" # 页面头部导航栏配置 [params.header] # 桌面端导航栏模式 (\"fixed\", \"normal\", \"auto\") desktopMode = \"fixed\" # 移动端导航栏模式 (\"fixed\", \"normal\", \"auto\") mobileMode = \"auto\" # 页面头部导航栏标题配置 [params.header.title] # LOGO 的 URL logo = \"\" # 标题名称 name = \"\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" # 是否为标题显示打字机动画 typeit = false # 页面底部信息配置 [params.footer] enable = true # 自定义内容 (支持 HTML 格式) custom = '' # 是否显示 Hugo 和主题信息 hugo = true # 是否显示版权信息 copyright = true # 是否显示作者 author = true # 网站创立年份 since = 2019 # ICP 备案信息，仅在中国使用 (支持 HTML 格式) icp = \"\" # 许可协议信息 (支持 HTML 格式) license = '\u003ca rel=\"license external nofollow noopener noreffer\" href=\"https://creativecommons.org/licenses/by-nc/4.0/\" target=\"_blank\"\u003eCC BY-NC 4.0\u003c/a\u003e' # Section (所有文章) 页面配置 [params.section] # section 页面每页显示文章数量 paginate = 20 # 日期格式 (月和日) dateFormat = \"01-02\" # RSS 文章数目 rss = 10 # List (目录或标签) 页面配置 [params.list] # list 页面每页显示文章数量 paginate = 20 # 日期格式 (月和日) dateFormat = \"01-02\" # RSS 文章数目 rss = 10 # 主页配置 [params.home] # RSS 文章数目 rss = 10 # 主页个人信息 [params.home.profile] enable = true # Gravatar 邮箱，用于优先在主页显示的头像 gravatarEmail = \"\" # 主页显示头像的 URL avatarURL = \"/images/avatar.png\" # 主页显示的网站标题 (支持 HTML 格式) title = \"\" # 主页显示的网站副标题 subtitle = \"这是我的全新 Hugo 网站\" # 是否为副标题显示打字机动画 typeit = true # 是否显示社交账号 social = true # 免责声明 (支持 HTML 格式) disclaimer = \"\" # 主页文章列表 [params.home.posts] enable = true # 主页每页显示文章数量 paginate = 6 # 被 params.page 中的 hiddenFromHomePage 替代 # 当你没有在文章前置参数中设置 \"hiddenFromHomePage\" 时的默认行为 defaultHiddenFromHomePage = false # 作者的社交信息设置 [params.social] GitHub = \"xxxx\" Linkedin = \"\" Twitter = \"xxxx\" Instagram = \"xxxx\" Facebook = \"xxxx\" Telegram = \"xxxx\" Medium = \"\" Gitlab = \"\" Youtubelegacy = \"\" Youtubecustom = \"\" Youtubechannel = \"\" Tumblr = \"\" Quora = \"\" Keybase = \"\" Pinterest = \"\" Reddit = \"\" Codepen = \"\" FreeCodeCamp = \"\" Bitbucket = \"\" Stackoverflow = \"\" Weibo = \"\" Odnoklassniki = \"\" VK = \"\" Flickr = \"\" Xing = \"\" Snapchat = \"\" Soundcloud = \"\" Spotify = \"\" Bandcamp = \"\" Paypal = \"\" Fivehundredpx = \"\" Mix = \"\" Goodreads = \"\" Lastfm = \"\" Foursquare = \"\" Hackernews = \"\" Kickstarter = \"\" Patreon = \"\" Steam = \"\" Twitch = \"\" Strava = \"\" Skype = \"\" Whatsapp = \"\" Zhihu = \"\" Douban = \"\" Angellist = \"\" Slidershare = \"\" Jsfiddle = \"\" Deviantart = \"\" Behance = \"\" Dribbble = \"\" Wordpress = \"\" Vine = \"\" Googlescholar = \"\" Researchgate = \"\" Mastodon = \"\" Thingiverse = \"\" Devto = \"\" Gitea = \"\" XMPP = \"\" Matrix = \"\" Bilibili = \"\" Email = \"xxxx@xxxx.com\" RSS = true # # 文章页面配置 [params.page] # 是否在主页隐藏一篇文章 hiddenFromHomePage = false # 是否在搜索结果中隐藏一篇文章 hiddenFromSearch = false # 是否使用 twemoji twemoji = false # 是否使用 lightgallery lightgallery = false # 是否使用 ruby 扩展语法 ruby = true # 是否使用 fraction 扩展语法 fraction = true # 是否使用 fontawesome 扩展语法 fontawesome = true # 是否在文章页面显示原始 Markdown 文档链接 linkToMarkdown = true # 是否在 RSS 中显示全文内容 rssFullText = ","date":"2020-03-06","objectID":"/theme-documentation-basics/:3:1","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["网站使用"],"content":"3.2 网站图标, 浏览器配置, 网站清单 强烈建议你把: apple-touch-icon.png (180x180) favicon-32x32.png (32x32) favicon-16x16.png (16x16) mstile-150x150.png (150x150) android-chrome-192x192.png (192x192) android-chrome-512x512.png (512x512) 放在 /static 目录. 利用 https://realfavicongenerator.net/ 可以很容易地生成这些文件. 可以自定义 browserconfig.xml 和 site.webmanifest 文件来设置 theme-color 和 background-color. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:3:2","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["网站使用"],"content":"3.3 自定义样式 注意 Hugo extended 版本对于自定义样式是必需的. 通过定义自定义 .scss 样式文件, LoveIt 主题支持可配置的样式. 包含自定义 .scss 样式文件的目录相对于 你的项目根目录 的路径为 assets/css. 在 assets/css/_override.scss 中, 你可以覆盖 themes/LoveIt/assets/css/_variables.scss 中的变量以自定义样式. 这是一个例子: @import url('https://fonts.googleapis.com/css?family=Fira+Mono:400,700\u0026display=swap\u0026subset=latin-ext'); $code-font-family: Fira Mono, Source Code Pro, Menlo, Consolas, Monaco, monospace; 在 assets/css/_custom.scss 中, 你可以添加一些 CSS 样式代码以自定义样式. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:3:3","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["网站使用"],"content":"4 多语言和 i18n LoveIt 主题完全兼容 Hugo 的多语言模式, 并且支持在网页上切换语言. 语言切换语言切换 \" 语言切换 ","date":"2020-03-06","objectID":"/theme-documentation-basics/:4:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["网站使用"],"content":"4.1 兼容性 语言 Hugo 代码 HTML lang 属性 主题文档 Lunr.js 支持 英语 en en 简体中文 zh-cn zh-CN 法语 fr fr 波兰语 pl pl 巴西葡萄牙语 pt-br pt-BR 意大利语 it it 西班牙语 es es 德语 de de 塞尔维亚语 pl pl 俄语 ru ru 罗马尼亚语 ro ro 越南语 vi vi ","date":"2020-03-06","objectID":"/theme-documentation-basics/:4:1","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["网站使用"],"content":"4.2 基本配置 学习了 Hugo如何处理多语言网站 之后, 请在 站点配置 中定义你的网站语言. 例如, 一个支持英语, 中文和法语的网站配置: # [en, zh-cn, fr, pl, ...] 设置默认的语言 defaultContentLanguage = \"zh-cn\" [languages] [languages.en] weight = 1 title = \"My New Hugo Site\" languageCode = \"en\" languageName = \"English\" [[languages.en.menu.main]] identifier = \"posts\" pre = \"\" post = \"\" name = \"Posts\" url = \"/posts/\" title = \"\" weight = 1 [[languages.en.menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"Tags\" url = \"/tags/\" title = \"\" weight = 2 [[languages.en.menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"Categories\" url = \"/categories/\" title = \"\" weight = 3 [languages.zh-cn] weight = 2 title = \"我的全新 Hugo 网站\" # 网站语言, 仅在这里 CN 大写 languageCode = \"zh-CN\" languageName = \"简体中文\" # 是否包括中日韩文字 hasCJKLanguage = true [[languages.zh-cn.menu.main]] identifier = \"posts\" pre = \"\" post = \"\" name = \"文章\" url = \"/posts/\" title = \"\" weight = 1 [[languages.zh-cn.menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" weight = 2 [[languages.zh-cn.menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" weight = 3 [languages.fr] weight = 3 title = \"Mon nouveau site Hugo\" languageCode = \"fr\" languageName = \"Français\" [[languages.fr.menu.main]] identifier = \"posts\" pre = \"\" post = \"\" name = \"Postes\" url = \"/posts/\" title = \"\" weight = 1 [[languages.fr.menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"Balises\" url = \"/tags/\" title = \"\" weight = 2 [[languages.fr.menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"Catégories\" url = \"/categories/\" title = \"\" weight = 3 然后, 对于每个新页面, 将语言代码附加到文件名中. 单个文件 my-page.md 需要分为三个文件: 英语: my-page.en.md 中文: my-page.zh-cn.md 法语: my-page.fr.md 注意 请注意, 菜单中仅显示翻译的页面. 它不会替换为默认语言内容. 技巧 也可以使用 文章前置参数 来翻译网址. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:4:2","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["网站使用"],"content":"4.3 修改默认的翻译字符串 翻译字符串用于在主题中使用的常见默认值. 目前提供一些语言的翻译, 但你可能自定义其他语言或覆盖默认值. 要覆盖默认值, 请在你项目的 i18n 目录 i18n/\u003clanguageCode\u003e.toml 中创建一个新文件，并从 themes/LoveIt/i18n/en.toml 中获得提示. 另外, 由于你的翻译可能会帮助到其他人, 请花点时间通过  创建一个 PR 来贡献主题翻译, 谢谢! ","date":"2020-03-06","objectID":"/theme-documentation-basics/:4:3","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["网站使用"],"content":"5 搜索 基于 Lunr.js 或 algolia, LoveIt 主题支持搜索功能. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:5:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["网站使用"],"content":"5.1 输出配置 为了生成搜索功能所需要的 index.json, 请在你的 网站配置 中添加 JSON 输出文件类型到 outputs 部分的 home 字段中. [outputs] home = [\"HTML\", \"RSS\", \"JSON\"] ","date":"2020-03-06","objectID":"/theme-documentation-basics/:5:1","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["网站使用"],"content":"5.2 搜索配置 基于 Hugo 生成的 index.json 文件, 你可以激活搜索功能. 这是你的 网站配置 中的搜索部分: [params.search] enable = true # 搜索引擎的类型 (\"lunr\", \"algolia\") type = \"lunr\" # 文章内容最长索引长度 contentLength = 4000 # 搜索框的占位提示语 placeholder = \"\" # 最大结果数目 maxResultLength = 10 # 结果内容片段长度 snippetLength = 50 # 搜索结果中高亮部分的 HTML 标签 highlightTag = \"em\" # 是否在搜索索引中使用基于 baseURL 的绝对路径 absoluteURL = false [params.search.algolia] index = \"\" appID = \"\" searchKey = \"\" 怎样选择搜索引擎? 以下是两种搜索引擎的对比: lunr: 简单, 无需同步 index.json, 没有 contentLength 的限制, 但占用带宽大且性能低 (特别是中文需要一个较大的分词依赖库) algolia: 高性能并且占用带宽低, 但需要同步 index.json 且有 contentLength 的限制 文章内容被 h2 和 h3 HTML 标签切分来提高查询效果并且基本实现全文搜索. contentLength 用来限制 h2 和 h3 HTML 标签开头的内容部分的最大长度. 关于 algolia 的使用技巧 你需要上传 index.json 到 algolia 来激活搜索功能. 你可以使用浏览器来上传 index.json 文件但是一个自动化的脚本可能效果更好. Algolia Atomic 是一个不错的选择. 为了兼容 Hugo 的多语言模式, 你需要上传不同语言的 index.json 文件到对应的 algolia index, 例如 zh-cn/index.json 或 fr/index.json… ","date":"2020-03-06","objectID":"/theme-documentation-basics/:5:2","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["网站使用"],"content":"了解如何在 LoveIt 主题中快速, 直观地创建和组织内容.","date":"2020-03-05","objectID":"/theme-documentation-content/","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["网站使用"],"content":"了解如何在 LoveIt 主题中快速, 直观地创建和组织内容. ","date":"2020-03-05","objectID":"/theme-documentation-content/:0:0","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["网站使用"],"content":"1 内容组织 以下是一些方便你清晰管理和生成文章的目录结构建议: 保持博客文章存放在 content/posts 目录, 例如: content/posts/我的第一篇文章.md 保持简单的静态页面存放在 content 目录, 例如: content/about.md 本地资源组织 本地资源引用 有三种方法来引用图片和音乐等本地资源: 使用页面包中的页面资源. 你可以使用适用于 Resources.GetMatch 的值或者直接使用相对于当前页面目录的文件路径来引用页面资源. 将本地资源放在 assets 目录中, 默认路径是 /assets. 引用资源的文件路径是相对于 assets 目录的. 将本地资源放在 static 目录中, 默认路径是 /static. 引用资源的文件路径是相对于 static 目录的. 引用的优先级符合以上的顺序. 在这个主题中的很多地方可以使用上面的本地资源引用, 例如 链接, 图片, image shortcode, music shortcode 和前置参数中的部分参数. 页面资源或者 assets 目录中的图片处理会在未来的版本中得到支持. 非常酷的功能! ","date":"2020-03-05","objectID":"/theme-documentation-content/:1:0","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["网站使用"],"content":"2 前置参数 Hugo 允许你在文章内容前面添加 yaml, toml 或者 json 格式的前置参数. 注意 不是所有的以下前置参数都必须在你的每篇文章中设置. 只有在文章的参数和你的 网站设置 中的 page 部分不一致时才有必要这么做. 这是一个前置参数例子: ---title:\"我的第一篇文章\"subtitle:\"\"date:2020-03-04T15:58:26+08:00lastmod:2020-03-04T15:58:26+08:00draft:trueauthor:\"\"authorLink:\"\"description:\"\"license:\"\"images:[]tags:[]categories:[]featuredImage:\"\"featuredImagePreview:\"\"hiddenFromHomePage:falsehiddenFromSearch:falsetwemoji:falselightgallery:trueruby:truefraction:truefontawesome:truelinkToMarkdown:truerssFullText:falsetoc:enable:trueauto:truecode:copy:true# ...math:enable:true# ...mapbox:accessToken:\"\"# ...share:enable:true# ...comment:enable:true# ...library:css:# someCSS = \"some.css\"# 位于 \"assets/\"# 或者# someCSS = \"https://cdn.example.com/some.css\"js:# someJS = \"some.js\"# 位于 \"assets/\"# 或者# someJS = \"https://cdn.example.com/some.js\"seo:images:[]# ...--- title: 文章标题. subtitle: 文章副标题. date: 这篇文章创建的日期时间. 它通常是从文章的前置参数中的 date 字段获取的, 但是也可以在 网站配置 中设置. lastmod: 上次修改内容的日期时间. draft: 如果设为 true, 除非 hugo 命令使用了 --buildDrafts/-D 参数, 这篇文章不会被渲染. author: 文章作者. authorLink: 文章作者的链接. description: 文章内容的描述. license: 这篇文章特殊的许可. images: 页面图片, 用于 Open Graph 和 Twitter Cards. tags: 文章的标签. categories: 文章所属的类别. featuredImage: 文章的特色图片. featuredImagePreview: 用在主页预览的文章特色图片. hiddenFromHomePage: 如果设为 true, 这篇文章将不会显示在主页上. hiddenFromSearch: 如果设为 true, 这篇文章将不会显示在搜索结果中. twemoji: 如果设为 true, 这篇文章会使用 twemoji. lightgallery: 如果设为 true, 文章中的图片将可以按照画廊形式呈现. ruby: 如果设为 true, 这篇文章会使用 上标注释扩展语法. fraction: 如果设为 true, 这篇文章会使用 分数扩展语法. fontawesome: 如果设为 true, 这篇文章会使用 Font Awesome 扩展语法. linkToMarkdown: 如果设为 true, 内容的页脚将显示指向原始 Markdown 文件的链接. rssFullText: 如果设为 true, 在 RSS 中将会显示全文内容. toc: 和 网站配置 中的 params.page.toc 部分相同. code: 和 网站配置 中的 params.page.code 部分相同. math: 和 网站配置 中的 params.page.math 部分相同. mapbox: 和 网站配置 中的 params.page.mapbox 部分相同. share: 和 网站配置 中的 params.page.share 部分相同. comment: 和 网站配置 中的 params.page.comment 部分相同. library: 和 网站配置 中的 params.page.library 部分相同. seo: 和 网站配置 中的 params.page.seo 部分相同. 技巧 featuredImage 和 featuredImagePreview 支持本地资源引用的完整用法. 如果带有在前置参数中设置了 name: featured-image 或 name: featured-image-preview 属性的页面资源, 没有必要在设置 featuredImage 或 featuredImagePreview: resources:- name:featured-imagesrc:featured-image.jpg- name:featured-image-previewsrc:featured-image-preview.jpg ","date":"2020-03-05","objectID":"/theme-documentation-content/:2:0","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["网站使用"],"content":"3 内容摘要 LoveIt 主题使用内容摘要在主页中显示大致文章信息。Hugo 支持生成文章的摘要. 文章摘要预览文章摘要预览 \" 文章摘要预览 ","date":"2020-03-05","objectID":"/theme-documentation-content/:3:0","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["网站使用"],"content":"自动摘要拆分 默认情况下, Hugo 自动将内容的前 70 个单词作为摘要. 你可以通过在 网站配置 中设置 summaryLength 来自定义摘要长度. 如果您要使用 CJK中文/日语/韩语 语言创建内容, 并且想使用 Hugo 的自动摘要拆分功能，请在 网站配置 中将 hasCJKLanguage 设置为 true. ","date":"2020-03-05","objectID":"/theme-documentation-content/:3:1","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["网站使用"],"content":"手动摘要拆分 另外, 你也可以添加 \u003c!--more--\u003e 摘要分割符来拆分文章生成摘要. 摘要分隔符之前的内容将用作该文章的摘要. 注意 请小心输入\u003c!--more--\u003e ; 即全部为小写且没有空格. ","date":"2020-03-05","objectID":"/theme-documentation-content/:3:2","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["网站使用"],"content":"前置参数摘要 你可能希望摘要不是文章开头的文字. 在这种情况下, 你可以在文章前置参数的 summary 变量中设置单独的摘要. ","date":"2020-03-05","objectID":"/theme-documentation-content/:3:3","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["网站使用"],"content":"使用文章描述作为摘要 你可能希望将文章前置参数中的 description 变量的内容作为摘要. 你仍然需要在文章开头添加 \u003c!--more--\u003e 摘要分割符. 将摘要分隔符之前的内容保留为空. 然后 LoveIt 主题会将你的文章描述作为摘要. ","date":"2020-03-05","objectID":"/theme-documentation-content/:3:4","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["网站使用"],"content":"摘要选择的优先级顺序 由于可以通过多种方式指定摘要, 因此了解顺序很有用. 如下: 如果文章中有 \u003c!--more--\u003e 摘要分隔符, 但分隔符之前没有内容, 则使用描述作为摘要. 如果文章中有 \u003c!--more--\u003e 摘要分隔符, 则将按照手动摘要拆分的方法获得摘要. 如果文章前置参数中有摘要变量, 那么将以该值作为摘要. 按照自动摘要拆分方法. 注意 不建议在摘要内容中包含富文本块元素, 这会导致渲染错误. 例如代码块, 图片, 表格等. ","date":"2020-03-05","objectID":"/theme-documentation-content/:3:5","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["网站使用"],"content":"4 Markdown 基本语法 这部分内容在 Markdown 基本语法页面 中介绍. ","date":"2020-03-05","objectID":"/theme-documentation-content/:4:0","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["网站使用"],"content":"5 Markdown 扩展语法 LoveIt 主题提供了一些扩展的语法便于你撰写文章. ","date":"2020-03-05","objectID":"/theme-documentation-content/:5:0","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["网站使用"],"content":"Emoji 支持 这部分内容在 Emoji 支持页面 中介绍. ","date":"2020-03-05","objectID":"/theme-documentation-content/:5:1","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["网站使用"],"content":"数学公式 LoveIt 基于 $ \\KaTeX $ 提供数学公式的支持. 在你的 网站配置 中的 [params.math] 下面设置属性 enable = true, 并在文章的前置参数中设置属性 math: true来启用数学公式的自动渲染. 技巧 有一份 $ \\KaTeX $ 中支持的 $ \\TeX $ 函数 清单. 公式块 默认的公式块分割符是 $$/$$ 和 \\\\[/\\\\]: $$ c = \\pm\\sqrt{a^2 + b^2} $$ \\\\[ f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\\\] 呈现的输出效果如下: $$ c = \\pm\\sqrt{a^2 + b^2} $$ \\[ f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\] 行内公式 默认的行内公式分割符是 $/$ 和 \\\\(/\\\\): $ c = \\pm\\sqrt{a^2 + b^2} $ 和 \\\\( f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\\\) 呈现的输出效果如下: $ c = \\pm\\sqrt{a^2 + b^2} $ 和 \\( f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\) 技巧 你可以在 网站配置 中自定义公式块和行内公式的分割符. Copy-tex Copy-tex 是一个 $ \\KaTeX $ 的插件. 通过这个扩展, 在选择并复制 $ \\KaTeX $ 渲染的公式时, 会将其 $ \\LaTeX $ 源代码复制到剪贴板. 在你的 网站配置 中的 [params.math] 下面设置属性 copyTex = true 来启用 Copy-tex. 选择并复制上一节中渲染的公式, 可以发现复制的内容为 LaTeX 源代码. mhchem mhchem 是一个 $ \\KaTeX $ 的插件. 通过这个扩展, 你可以在文章中轻松编写漂亮的化学方程式. 在你的 网站配置 中的 [params.math] 下面设置属性 mhchem = true 来启用 mhchem. $$ \\ce{CO2 + C -\u003e 2 CO} $$ $$ \\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-} $$ 呈现的输出效果如下: $$ \\ce{CO2 + C -\u003e 2 CO} $$ $$ \\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-} $$ ","date":"2020-03-05","objectID":"/theme-documentation-content/:5:2","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["网站使用"],"content":"字符注音或者注释 LoveIt 主题支持一种 字符注音或者注释 Markdown 扩展语法: [Hugo]^(一个开源的静态网站生成工具) 呈现的输出效果如下: Hugo一个开源的静态网站生成工具 ","date":"2020-03-05","objectID":"/theme-documentation-content/:5:3","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["网站使用"],"content":"分数 LoveIt 主题支持一种 分数 Markdown 扩展语法: [浅色]/[深色] [99]/[100] 呈现的输出效果如下: 浅色/深色 90/100 ","date":"2020-03-05","objectID":"/theme-documentation-content/:5:4","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["网站使用"],"content":"Font Awesome LoveIt 主题使用 Font Awesome 作为图标库. 你同样可以在文章中轻松使用这些图标. 从 Font Awesome 网站 上获取所需的图标 class. 去露营啦! :(fas fa-campground fa-fw): 很快就回来. 真开心! :(far fa-grin-tears): 呈现的输出效果如下: 去露营啦!  很快就回来. 真开心! ","date":"2020-03-05","objectID":"/theme-documentation-content/:5:5","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["网站使用"],"content":"转义字符 在某些特殊情况下 (编写这个主题文档时 ), 你的文章内容会与 Markdown 的基本或者扩展语法冲突, 并且无法避免. 转义字符语法可以帮助你渲染出想要的内容: {?X} -\u003e X 例如, 两个 : 会启用 emoji 语法. 但有时候这不是你想要的结果. 可以像这样使用转义字符语法: {?:}joy: 呈现的输出效果如下: :joy: 而不是 😂 技巧 这个方法可以间接解决一个还未解决的 Hugo 的 issue. 另一个例子是: [link{?]}(#escape-character) 呈现的输出效果如下: [link](#escape-character) 而不是 link. ","date":"2020-03-05","objectID":"/theme-documentation-content/:5:6","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["网站使用"],"content":"LoveIt 主题在 Hugo 内置的 shortcode 的基础上提供多个扩展的 shortcode.","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["网站使用"],"content":"LoveIt 主题在 Hugo 内置的 shortcode 的基础上提供多个扩展的 shortcode. ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:0:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["网站使用"],"content":"1 style 注意 Hugo extended 版本对于 style shortcode 是必需的. style shortcode 用来在你的文章中插入自定义样式. style shortcode 有两个位置参数. 第一个参数是自定义样式的内容. 它支持  SASS 中的嵌套语法, 并且 \u0026 指代这个父元素. 第二个参数是包裹你要更改样式的内容的 HTML 标签, 默认值是 div. 一个 style 示例: {{\u003c style \"text-align:right; strong{color:#00b1ff;}\" \u003e}} This is a **right-aligned** paragraph. {{\u003c /style \u003e}} 呈现的输出效果如下: This is a right-aligned paragraph. ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:1:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["网站使用"],"content":"2 link link shortcode 是 Markdown 链接语法 的替代. link shortcode 可以提供一些其它的功能并且可以在代码块中使用. 支持本地资源引用的完整用法. link shortcode 有以下命名参数: href [必需] (第一个位置参数) 链接的目标. content [可选] (第二个位置参数) 链接的内容, 默认值是 href 参数的值. 支持 Markdown 或者 HTML 格式. title [可选] (第三个位置参数) HTML a 标签 的 title 属性, 当悬停在链接上会显示的提示. rel [可选] HTML a 标签 的 rel 补充属性. class [可选] HTML a 标签 的 class 属性. 一个 link 示例: {{\u003c link \"https://assemble.io\" \u003e}} 或者 {{\u003c link href=\"https://assemble.io\" \u003e}} {{\u003c link \"mailto:contact@revolunet.com\" \u003e}} 或者 {{\u003c link href=\"mailto:contact@revolunet.com\" \u003e}} {{\u003c link \"https://assemble.io\" Assemble \u003e}} 或者 {{\u003c link href=\"https://assemble.io\" content=Assemble \u003e}} 呈现的输出效果如下: https://assemble.io mailto:contact@revolunet.com Assemble 一个带有标题的 link 示例: {{\u003c link \"https://github.com/upstage/\" Upstage \"Visit Upstage!\" \u003e}} 或者 {{\u003c link href=\"https://github.com/upstage/\" content=Upstage title=\"Visit Upstage!\" \u003e}} 呈现的输出效果如下 (将鼠标悬停在链接上，会有一行提示): Upstage ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:2:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["网站使用"],"content":"3 image image shortcode 是 figure shortcode 的替代. image shortcode 可以充分利用 lazysizes 和 lightgallery.js 两个依赖库. 支持本地资源引用的完整用法. image shortcode 有以下命名参数: src [必需] (第一个位置参数) 图片的 URL. alt [可选] (第二个位置参数) 图片无法显示时的替代文本, 默认值是 src 参数的值. 支持 Markdown 或者 HTML 格式. caption [可选] (第三个位置参数) 图片标题. 支持 Markdown 或者 HTML 格式. title [可选] 当悬停在图片上会显示的提示. class [可选] HTML figure 标签的 class 属性. src_s [可选] 图片缩略图的 URL, 用在画廊模式中, 默认值是 src 参数的值. src_l [可选] 高清图片的 URL, 用在画廊模式中, 默认值是 src 参数的值. height [可选] 图片的 height 属性. width [可选] 图片的 width 属性. linked [可选] 图片是否需要被链接, 默认值是 true. rel [可选] HTML a 标签 的 rel 补充属性, 仅在 linked 属性设置成 true 时有效. 一个 image 示例: {{\u003c image src=\"/images/lighthouse.jpg\" caption=\"Lighthouse (`image`)\" src_s=\"/images/lighthouse-small.jpg\" src_l=\"/images/lighthouse-large.jpg\" \u003e}} 呈现的输出效果如下: Lighthouse (image)\" Lighthouse (image) ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:3:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["网站使用"],"content":"4 admonition admonition shortcode 支持 12 种 帮助你在页面中插入提示的横幅. 支持 Markdown 或者 HTML 格式. 注意 一个 注意 横幅 摘要 一个 摘要 横幅 信息 一个 信息 横幅 技巧 一个 技巧 横幅 成功 一个 成功 横幅 问题 一个 问题 横幅 警告 一个 警告 横幅 失败 一个 失败 横幅 危险 一个 危险 横幅 Bug 一个 Bug 横幅 示例 一个 示例 横幅 引用 一个 引用 横幅 admonition shortcode 有以下命名参数: type [必需] (第一个位置参数) admonition 横幅的类型, 默认值是 note. title [可选] (第二个位置参数) admonition 横幅的标题, 默认值是 type 参数的值. open [可选] (第三个位置参数) 横幅内容是否默认展开, 默认值是 true. 一个 admonition 示例: {{\u003c admonition type=tip title=\"This is a tip\" open=false \u003e}} 一个 **技巧** 横幅 {{\u003c /admonition \u003e}} 或者 {{\u003c admonition tip \"This is a tip\" false \u003e}} 一个 **技巧** 横幅 {{\u003c /admonition \u003e}} 呈现的输出效果如下: This is a tip 一个 技巧 横幅 ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:4:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["网站使用"],"content":"5 mermaid mermaid 是一个可以帮助你在文章中生成图表和流程图的库, 类似 Markdown 的语法. 只需将你的 mermaid 代码插入 mermaid shortcode 中即可. ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:5:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["网站使用"],"content":"5.1 流程图 一个 流程图 mermaid 示例: {{\u003c mermaid \u003e}} graph LR; A[Hard edge] --\u003e|Link text| B(Round edge) B --\u003e C{Decision} C --\u003e|One| D[Result one] C --\u003e|Two| E[Result two] {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:5:1","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["网站使用"],"content":"5.2 时序图 一个 时序图 mermaid 示例: {{\u003c mermaid \u003e}} sequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughts \u003cbr/\u003eprevail... John--\u003eAlice: Great! John-\u003eBob: How about you? Bob--\u003eJohn: Jolly good! {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:5:2","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["网站使用"],"content":"5.3 甘特图 一个 甘特图 mermaid 示例: {{\u003c mermaid \u003e}} gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:5:3","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["网站使用"],"content":"5.4 类图 一个 类图 mermaid 示例: {{\u003c mermaid \u003e}} classDiagram Class01 \u003c|-- AveryLongClass : Cool Class03 *-- Class04 Class05 o-- Class06 Class07 .. Class08 Class09 --\u003e C2 : Where am i? Class09 --* C3 Class09 --|\u003e Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08 \u003c--\u003e C2: Cool label {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:5:4","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["网站使用"],"content":"5.5 状态图 一个 状态图 mermaid 示例: {{\u003c mermaid \u003e}} stateDiagram [*] --\u003e Still Still --\u003e [*] Still --\u003e Moving Moving --\u003e Still Moving --\u003e Crash Crash --\u003e [*] {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:5:5","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["网站使用"],"content":"5.6 Git 图 一个 Git 图 mermaid 示例: {{\u003c mermaid \u003e}} gitGraph: options { \"nodeSpacing\": 100, \"nodeRadius\": 10 } end commit branch newbranch checkout newbranch commit commit checkout master commit commit merge newbranch {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:5:6","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["网站使用"],"content":"5.7 饼图 一个 饼图 mermaid 示例: {{\u003c mermaid \u003e}} pie \"Dogs\" : 386 \"Cats\" : 85 \"Rats\" : 15 {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:5:7","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["网站使用"],"content":"6 echarts ECharts 是一个帮助你生成交互式数据可视化的库. ECharts 提供了常规的 折线图, 柱状图, 散点图, 饼图, K线图, 用于统计的 盒形图, 用于地理数据可视化的 地图, 热力图, 线图, 用于关系数据可视化的 关系图, treemap, 旭日图, 多维数据可视化的 平行坐标, 还有用于 BI 的 漏斗图, 仪表盘, 并且支持图与图之间的混搭. 只需在 echarts shortcode 中以 JSON/YAML/TOML格式插入 ECharts 选项即可. 一个 JSON 格式的 echarts 示例: {{\u003c echarts \u003e}} { \"title\": { \"text\": \"折线统计图\", \"top\": \"2%\", \"left\": \"center\" }, \"tooltip\": { \"trigger\": \"axis\" }, \"legend\": { \"data\": [\"邮件营销\", \"联盟广告\", \"视频广告\", \"直接访问\", \"搜索引擎\"], \"top\": \"10%\" }, \"grid\": { \"left\": \"5%\", \"right\": \"5%\", \"bottom\": \"5%\", \"top\": \"20%\", \"containLabel\": true }, \"toolbox\": { \"feature\": { \"saveAsImage\": { \"title\": \"保存为图片\" } } }, \"xAxis\": { \"type\": \"category\", \"boundaryGap\": false, \"data\": [\"周一\", \"周二\", \"周三\", \"周四\", \"周五\", \"周六\", \"周日\"] }, \"yAxis\": { \"type\": \"value\" }, \"series\": [ { \"name\": \"邮件营销\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [120, 132, 101, 134, 90, 230, 210] }, { \"name\": \"联盟广告\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [220, 182, 191, 234, 290, 330, 310] }, { \"name\": \"视频广告\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [150, 232, 201, 154, 190, 330, 410] }, { \"name\": \"直接访问\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [320, 332, 301, 334, 390, 330, 320] }, { \"name\": \"搜索引擎\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [820, 932, 901, 934, 1290, 1330, 1320] } ] } {{\u003c /echarts \u003e}} 一个 YAML 格式的 echarts 示例: {{\u003c echarts \u003e}}title:text:折线统计图top:2%left:centertooltip:trigger:axislegend:data:- 邮件营销- 联盟广告- 视频广告- 直接访问- 搜索引擎top:10%grid:left:5%right:5%bottom:5%top:20%containLabel:truetoolbox:feature:saveAsImage:title:保存为图片xAxis:type:categoryboundaryGap:falsedata:- 周一- 周二- 周三- 周四- 周五- 周六- 周日yAxis:type:valueseries:- name:邮件营销type:linestack:总量data:- 120- 132- 101- 134- 90- 230- 210- name:联盟广告type:linestack:总量data:- 220- 182- 191- 234- 290- 330- 310- name:视频广告type:linestack:总量data:- 150- 232- 201- 154- 190- 330- 410- name:直接访问type:linestack:总量data:- 320- 332- 301- 334- 390- 330- 320- name:搜索引擎type:linestack:总量data:- 820- 932- 901- 934- 1290- 1330- 1320{{\u003c /echarts \u003e}} 一个 TOML 格式的 echarts 示例: {{\u003c echarts \u003e}} [title] text = \"折线统计图\" top = \"2%\" left = \"center\" [tooltip] trigger = \"axis\" [legend] data = [ \"邮件营销\", \"联盟广告\", \"视频广告\", \"直接访问\", \"搜索引擎\" ] top = \"10%\" [grid] left = \"5%\" right = \"5%\" bottom = \"5%\" top = \"20%\" containLabel = true [toolbox] [toolbox.feature] [toolbox.feature.saveAsImage] title = \"保存为图片\" [xAxis] type = \"category\" boundaryGap = false data = [ \"周一\", \"周二\", \"周三\", \"周四\", \"周五\", \"周六\", \"周日\" ] [yAxis] type = \"value\" [[series]] name = \"邮件营销\" type = \"line\" stack = \"总量\" data = [ 120.0, 132.0, 101.0, 134.0, 90.0, 230.0, 210.0 ] [[series]] name = \"联盟广告\" type = \"line\" stack = \"总量\" data = [ 220.0, 182.0, 191.0, 234.0, 290.0, 330.0, 310.0 ] [[series]] name = \"视频广告\" type = \"line\" stack = \"总量\" data = [ 150.0, 232.0, 201.0, 154.0, 190.0, 330.0, 410.0 ] [[series]] name = \"直接访问\" type = \"line\" stack = \"总量\" data = [ 320.0, 332.0, 301.0, 334.0, 390.0, 330.0, 320.0 ] [[series]] name = \"搜索引擎\" type = \"line\" stack = \"总量\" data = [ 820.0, 932.0, 901.0, 934.0, 1290.0, 1330.0, 1320.0 ] {{\u003c /echarts \u003e}} 呈现的输出效果如下: echarts shortcode 还有以下命名参数: width [可选] (第一个位置参数) 数据可视化的宽度, 默认值是 100%. height [可选] (第二个位置参数) 数据可视化的高度, 默认值是 30rem. ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:6:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["网站使用"],"content":"7 mapbox Mapbox GL JS 是一个 JavaScript 库，它使用 WebGL, 以 vector tiles 和 Mapbox styles 为来源, 将它们渲染成互动式地图. mapbox shortcode 有以下命名参数来使用 Mapbox GL JS: lng [必需] (第一个位置参数) 地图初始中心点的经度, 以度为单位. lat [必需] (第二个位置参数) 地图初始中心点的纬度, 以度为单位. zoom [可选] (第三个位置参数) 地图的初始缩放级别, 默认值是 10. marked [可选] (第四个位置参数) 是否在地图的初始中心点添加图钉, 默认值是 true. light-style [可选] (第五个位置参数) 浅色主题的地图样式, 默认值是前置参数或者网站配置中设置的值. dark-style [可选] (第六个位置参数) 深色主题的地图样式, 默认值是前置参数或者网站配置中设置的值. navigation [可选] 是否添加 NavigationControl, 默认值是前置参数或者网站配置中设置的值. geolocate [可选] 是否添加 GeolocateControl, 默认值是前置参数或者网站配置中设置的值. scale [可选] 是否添加 ScaleControl, 默认值是前置参数或者网站配置中设置的值. fullscreen [可选] 是否添加 FullscreenControl, 默认值是前置参数或者网站配置中设置的值. width [可选] 地图的宽度, 默认值是 100%. height [可选] 地图的高度, 默认值是 20rem. 一个简单的 mapbox 示例: {{\u003c mapbox 121.485 31.233 12 \u003e}} 或者 {{\u003c mapbox lng=121.485 lat=31.233 zoom=12 \u003e}} 呈现的输出效果如下: 一个带有自定义样式的 mapbox 示例: {{\u003c mapbox -122.252 37.453 10 false \"mapbox://styles/mapbox/streets-zh-v1\" \u003e}} 或者 {{\u003c mapbox lng=-122.252 lat=37.453 zoom=10 marked=false light-style=\"mapbox://styles/mapbox/streets-zh-v1\" \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:7:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["网站使用"],"content":"8 music music shortcode 基于 APlayer 和 MetingJS 提供了一个内嵌的响应式音乐播放器. 有三种方式使用 music shortcode. ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:8:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["网站使用"],"content":"8.1 自定义音乐 URL 支持本地资源引用的完整用法. music shortcode 有以下命名参数来使用自定义音乐 URL: server [必需] 音乐的链接. type [可选] 音乐的名称. artist [可选] 音乐的创作者. cover [可选] 音乐的封面链接. 一个使用自定义音乐 URL 的 music 示例: {{\u003c music url=\"/music/Wavelength.mp3\" name=Wavelength artist=oldmanyoung cover=\"/images/Wavelength.jpg\" \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:8:1","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["网站使用"],"content":"8.2 音乐平台 URL 的自动识别 music shortcode 有一个命名参数来使用音乐平台 URL 的自动识别: auto [必需]] (第一个位置参数) 用来自动识别的音乐平台 URL, 支持 netease, tencent 和 xiami 平台. 一个使用音乐平台 URL 的自动识别的 music 示例: {{\u003c music auto=\"https://music.163.com/#/playlist?id=60198\" \u003e}} 或者 {{\u003c music \"https://music.163.com/#/playlist?id=60198\" \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:8:2","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["网站使用"],"content":"8.3 自定义音乐平台, 类型和 ID music shortcode 有以下命名参数来使用自定义音乐平台: server [必需] (第一个位置参数) [netease, tencent, kugou, xiami, baidu] 音乐平台. type [必需] (第二个位置参数) [song, playlist, album, search, artist] 音乐类型. id [必需] (第三个位置参数) 歌曲 ID, 或者播放列表 ID, 或者专辑 ID, 或者搜索关键词, 或者创作者 ID. 一个使用自定义音乐平台的 music 示例: {{\u003c music server=\"netease\" type=\"song\" id=\"1868553\" \u003e}} 或者 {{\u003c music netease song 1868553 \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:8:3","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["网站使用"],"content":"8.4 其它参数 music shortcode 有一些可以应用于以上三种方式的其它命名参数: theme [可选] 音乐播放器的主题色, 默认值是 #448aff. fixed [可选] 是否开启固定模式, 默认值是 false. mini [可选] 是否开启迷你模式, 默认值是 false. autoplay [可选] 是否自动播放音乐, 默认值是 false. volume [可选] 第一次打开播放器时的默认音量, 会被保存在浏览器缓存中, 默认值是 0.7. mutex [可选] 是否自动暂停其它播放器, 默认值是 true. music shortcode 还有一些只适用于音乐列表方式的其它命名参数: loop [可选] [all, one, none] 音乐列表的循环模式, 默认值是 none. order [可选] [list, random] 音乐列表的播放顺序, 默认值是 list. list-folded [可选] 初次打开的时候音乐列表是否折叠, 默认值是 false. list-max-height [可选] 音乐列表的最大高度, 默认值是 340px. ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:8:4","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["网站使用"],"content":"9 bilibili bilibili shortcode 提供了一个内嵌的用来播放 bilibili 视频的响应式播放器. 如果视频只有一个部分, 则仅需要视频的 BV id, 例如: https://www.bilibili.com/video/BV1Sx411T7QQ 一个 bilibili 示例: {{\u003c bilibili BV1Sx411T7QQ \u003e}} 或者 {{\u003c bilibili id=BV1Sx411T7QQ \u003e}} 呈现的输出效果如下: 如果视频包含多个部分, 则除了视频的 BV id 之外, 还需要 p, 默认值为 1, 例如: https://www.bilibili.com/video/BV1TJ411C7An?p=3 一个带有 p 参数的 bilibili 示例: {{\u003c bilibili BV1TJ411C7An 3 \u003e}} 或者 {{\u003c bilibili id=BV1TJ411C7An p=3 \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:9:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["网站使用"],"content":"10 typeit typeit shortcode 基于 TypeIt 提供了打字动画. 只需将你需要打字动画的内容插入 typeit shortcode 中即可. ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:10:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["网站使用"],"content":"10.1 简单内容 允许使用 Markdown 格式的简单内容, 并且 不包含 富文本的块内容, 例如图像等等… 一个 typeit 示例: {{\u003c typeit \u003e}} 这一个带有基于 [TypeIt](https://typeitjs.com/) 的 **打字动画** 的 *段落*... {{\u003c /typeit \u003e}} 呈现的输出效果如下: 另外, 你也可以自定义 HTML 标签. 一个带有 h4 标签的 typeit 示例: {{\u003c typeit tag=h4 \u003e}} 这一个带有基于 [TypeIt](https://typeitjs.com/) 的 **打字动画** 的 *段落*... {{\u003c /typeit \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:10:1","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["网站使用"],"content":"10.2 代码内容 代码内容也是允许的, 并且通过使用参数 code 指定语言类型可以实习语法高亮. 一个带有 code 参数的 typeit 示例: {{\u003c typeit code=java \u003e}} public class HelloWorld { public static void main(String []args) { System.out.println(\"Hello World\"); } } {{\u003c /typeit \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:10:2","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["网站使用"],"content":"10.3 分组内容 默认情况下, 所有打字动画都是同时开始的. 但是有时你可能需要按顺序开始一组 typeit 内容的打字动画. 一组具有相同 group 参数值的 typeit 内容将按顺序开始打字动画. 一个带有 group 参数的 typeit 示例: {{\u003c typeit group=paragraph \u003e}} **首先**, 这个段落开始 {{\u003c /typeit \u003e}} {{\u003c typeit group=paragraph \u003e}} **然后**, 这个段落开始 {{\u003c /typeit \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:10:3","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["网站使用"],"content":"11 script script shortcode 用来在你的文章中插入  Javascript 脚本. 注意 脚本内容可以保证在所有的第三方库加载之后按顺序执行. 所以你可以自由地使用第三方库. 一个 script 示例: {{\u003c script \u003e}} console.log('Hello LoveIt!'); {{\u003c /script \u003e}} 你可以在开发者工具的控制台中看到输出. ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:11:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["网站使用"],"content":"这篇文章展示了基本的 Markdown 语法和格式.","date":"2019-12-01","objectID":"/basic-markdown-syntax/","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["网站使用"],"content":"这篇文章提供了可以在 Hugo 的文章中使用的基本 Markdown 语法示例. 注意 这篇文章借鉴了一篇很棒的来自 Grav 的文章. 如果你想了解 Loveit 主题的扩展 Markdown 语法, 请阅读扩展 Markdown 语法页面. 事实上, 编写 Web 内容很麻烦. WYSIWYG所见即所得 编辑器帮助减轻了这一任务. 但通常会导致代码太糟, 或更糟糕的是, 网页也会很丑. 没有通常伴随的所有复杂和丑陋的问题, Markdown 是一种更好的生成 HTML 内容的方式. 一些主要好处是: Markdown 简单易学, 几乎没有多余的字符, 因此编写内容也更快. 用 Markdown 书写时出错的机会更少. 可以产生有效的 XHTML 输出. 将内容和视觉显示保持分开, 这样就不会打乱网站的外观. 可以在你喜欢的任何文本编辑器或 Markdown 应用程序中编写内容. Markdown 使用起来很有趣! John Gruber, Markdown 的作者如是说: Markdown 格式的首要设计目标是更具可读性. 最初的想法是 Markdown 格式的文档应当以纯文本形式发布, 而不会看起来像被标签或格式说明所标记. 虽然 Markdown 的语法受到几种现有的文本到 HTML 转换工具的影响, 但 Markdown 语法的最大灵感来源是纯文本电子邮件的格式. – John Gruber 话不多说, 我们来回顾一下 Markdown 的主要语法以及生成的 HTML 样式! 技巧  将此页保存为书签，以备将来参考! ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:0:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["网站使用"],"content":"1 标题 从 h2 到 h6 的标题在每个级别上都加上一个 ＃: ## h2 标题 ### h3 标题 #### h4 标题 ##### h5 标题 ###### h6 标题 输出的 HTML 看起来像这样: \u003ch2\u003eh2 标题\u003c/h2\u003e \u003ch3\u003eh3 标题\u003c/h3\u003e \u003ch4\u003eh4 标题\u003c/h4\u003e \u003ch5\u003eh5 标题\u003c/h5\u003e \u003ch6\u003eh6 标题\u003c/h6\u003e 标题 ID 要添加自定义标题 ID, 请在与标题相同的行中将自定义 ID 放在花括号中: ### 一个很棒的标题 {#custom-id} 输出的 HTML 看起来像这样: \u003ch3 id=\"custom-id\"\u003e一个很棒的标题\u003c/h3\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:1:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["网站使用"],"content":"2 注释 注释是和 HTML 兼容的： \u003c!-- 这是一段注释 --\u003e 不能看到以下的注释: ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:2:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["网站使用"],"content":"3 水平线 HTML 中的 \u003chr\u003e 标签是用来在段落元素之间创建一个 “专题间隔” 的. 使用 Markdown, 你可以用以下方式创建一个 \u003chr\u003e 标签: ___: 三个连续的下划线 ---: 三个连续的破折号 ***: 三个连续的星号 呈现的输出效果如下: ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:3:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["网站使用"],"content":"4 段落 按照纯文本的方式书写段落, 纯文本在呈现的 HTML 中将用 \u003cp\u003e/\u003c/p\u003e 标签包裹. 如下段落: Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad. 输出的 HTML 看起来像这样: \u003cp\u003eLorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.\u003c/p\u003e 可以使用一个空白行进行换行. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:4:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["网站使用"],"content":"5 内联 HTML 元素 如果你需要某个 HTML 标签 (带有一个类), 则可以简单地像这样使用: Markdown 格式的段落. \u003cdiv class=\"class\"\u003e 这是 \u003cb\u003eHTML\u003c/b\u003e \u003c/div\u003e Markdown 格式的段落. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:5:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["网站使用"],"content":"6 强调 ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:6:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["网站使用"],"content":"加粗 用于强调带有较粗字体的文本片段. 以下文本片段会被 渲染为粗体. **渲染为粗体** __渲染为粗体__ 输出的 HTML 看起来像这样: \u003cstrong\u003e渲染为粗体\u003c/strong\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:6:1","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["网站使用"],"content":"斜体 用于强调带有斜体的文本片段. 以下文本片段被 渲染为斜体. *渲染为斜体* _渲染为斜体_ 输出的 HTML 看起来像这样: \u003cem\u003e渲染为斜体\u003c/em\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:6:2","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["网站使用"],"content":"删除线 按照 GFMGitHub flavored Markdown 你可以使用删除线. ~~这段文本带有删除线.~~ 呈现的输出效果如下: 这段文本带有删除线. 输出的 HTML 看起来像这样: \u003cdel\u003e这段文本带有删除线.\u003c/del\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:6:3","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["网站使用"],"content":"组合 加粗, 斜体, 和删除线可以 组合使用. ***加粗和斜体*** ~~**删除线和加粗**~~ ~~*删除线和斜体*~~ ~~***加粗, 斜体和删除线***~~ 呈现的输出效果如下: 加粗和斜体 删除线和加粗 删除线和斜体 加粗, 斜体和删除线 输出的 HTML 看起来像这样: \u003cem\u003e\u003cstrong\u003e加粗和斜体\u003c/strong\u003e\u003c/em\u003e \u003cdel\u003e\u003cstrong\u003e删除线和加粗\u003c/strong\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003e删除线和斜体\u003c/em\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003e\u003cstrong\u003e加粗, 斜体和删除线\u003c/strong\u003e\u003c/em\u003e\u003c/del\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:6:4","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["网站使用"],"content":"7 引用 用于在文档中引用其他来源的内容块. 在要引用的任何文本之前添加 \u003e: \u003e **Fusion Drive** combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. 呈现的输出效果如下: Fusion Drive combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. 输出的 HTML 看起来像这样: \u003cblockquote\u003e \u003cp\u003e \u003cstrong\u003eFusion Drive\u003c/strong\u003e combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. \u003c/p\u003e \u003c/blockquote\u003e 引用也可以嵌套: \u003e Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. \u003e\u003e Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. 呈现的输出效果如下: Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:7:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["网站使用"],"content":"8 列表 ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:8:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["网站使用"],"content":"无序列表 一系列项的列表, 其中项的顺序没有明显关系. 你可以使用以下任何符号来表示无序列表中的项: * 一项内容 - 一项内容 + 一项内容 例如: * Lorem ipsum dolor sit amet * Consectetur adipiscing elit * Integer molestie lorem at massa * Facilisis in pretium nisl aliquet * Nulla volutpat aliquam velit * Phasellus iaculis neque * Purus sodales ultricies * Vestibulum laoreet porttitor sem * Ac tristique libero volutpat at * Faucibus porta lacus fringilla vel * Aenean sit amet erat nunc * Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Phasellus iaculis neque Purus sodales ultricies Vestibulum laoreet porttitor sem Ac tristique libero volutpat at Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 输出的 HTML 看起来像这样: \u003cul\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit \u003cul\u003e \u003cli\u003ePhasellus iaculis neque\u003c/li\u003e \u003cli\u003ePurus sodales ultricies\u003c/li\u003e \u003cli\u003eVestibulum laoreet porttitor sem\u003c/li\u003e \u003cli\u003eAc tristique libero volutpat at\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ul\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:8:1","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["网站使用"],"content":"有序列表 一系列项的列表, 其中项的顺序确实很重要. 1. Lorem ipsum dolor sit amet 2. Consectetur adipiscing elit 3. Integer molestie lorem at massa 4. Facilisis in pretium nisl aliquet 5. Nulla volutpat aliquam velit 6. Faucibus porta lacus fringilla vel 7. Aenean sit amet erat nunc 8. Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 输出的 HTML 看起来像这样: \u003col\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit\u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ol\u003e 技巧 如果你对每一项使用 1., Markdown 将自动为每一项编号. 例如: 1. Lorem ipsum dolor sit amet 1. Consectetur adipiscing elit 1. Integer molestie lorem at massa 1. Facilisis in pretium nisl aliquet 1. Nulla volutpat aliquam velit 1. Faucibus porta lacus fringilla vel 1. Aenean sit amet erat nunc 1. Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:8:2","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["网站使用"],"content":"任务列表 任务列表使你可以创建带有复选框的列表. 要创建任务列表, 请在任务列表项之前添加破折号 (-) 和带有空格的方括号 ([ ]). 要选择一个复选框，请在方括号之间添加 x ([x]). - [x] Write the press release - [ ] Update the website - [ ] Contact the media 呈现的输出效果如下: Write the press release Update the website Contact the media ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:8:3","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["网站使用"],"content":"9 代码 ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:9:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["网站使用"],"content":"行内代码 用 ` 包装行内代码段. 在这个例子中, `\u003csection\u003e\u003c/section\u003e` 会被包裹成 **代码**. 呈现的输出效果如下: 在这个例子中, \u003csection\u003e\u003c/section\u003e 会被包裹成 代码. 输出的 HTML 看起来像这样: \u003cp\u003e 在这个例子中, \u003ccode\u003e\u0026lt;section\u0026gt;\u0026lt;/section\u0026gt;\u003c/code\u003e 会被包裹成 \u003cstrong\u003e代码\u003c/strong\u003e. \u003c/p\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:9:1","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["网站使用"],"content":"缩进代码 将几行代码缩进至少四个空格，例如: // Some comments line 1 of code line 2 of code line 3 of code 呈现的输出效果如下: // Some comments line 1 of code line 2 of code line 3 of code 输出的 HTML 看起来像这样: \u003cpre\u003e \u003ccode\u003e // Some comments line 1 of code line 2 of code line 3 of code \u003c/code\u003e \u003c/pre\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:9:2","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["网站使用"],"content":"围栏代码块 使用 “围栏” ``` 来生成一段带有语言属性的代码块. ```markdown Sample text here... ``` 输出的 HTML 看起来像这样: \u003cpre language-html\u003e \u003ccode\u003eSample text here...\u003c/code\u003e \u003c/pre\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:9:3","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["网站使用"],"content":"语法高亮 GFMGitHub Flavored Markdown 也支持语法高亮. 要激活它，只需在第一个代码 “围栏” 之后直接添加你要使用的语言的文件扩展名, ```js, 语法高亮显示将自动应用于渲染的 HTML 中. 例如, 在以下 JavaScript 代码中应用语法高亮: ```js grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; ``` 呈现的输出效果如下: grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; 注意 Hugo 文档中的 语法高亮页面 介绍了有关语法高亮的更多信息, 包括语法高亮的 shortcode. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:9:4","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["网站使用"],"content":"10 表格 通过在每个单元格之间添加竖线作为分隔线, 并在标题下添加一行破折号 (也由竖线分隔) 来创建表格. 注意, 竖线不需要垂直对齐. | Option | Description | | ------ | ----------- | | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | 呈现的输出效果如下: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. 输出的 HTML 看起来像这样: \u003ctable\u003e \u003cthead\u003e \u003ctr\u003e \u003cth\u003eOption\u003c/th\u003e \u003cth\u003eDescription\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e \u003ctr\u003e \u003ctd\u003edata\u003c/td\u003e \u003ctd\u003epath to data files to supply the data that will be passed into templates.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eengine\u003c/td\u003e \u003ctd\u003eengine to be used for processing templates. Handlebars is the default.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eext\u003c/td\u003e \u003ctd\u003eextension to be used for dest files.\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e \u003c/table\u003e 文本右对齐或居中对齐 在任何标题下方的破折号右侧添加冒号将使该列的文本右对齐. 在任何标题下方的破折号两边添加冒号将使该列的对齐文本居中. | Option | Description | |:------:| -----------:| | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | 呈现的输出效果如下: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:10:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["网站使用"],"content":"11 链接 ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:11:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["网站使用"],"content":"基本链接 \u003chttps://assemble.io\u003e \u003ccontact@revolunet.com\u003e [Assemble](https://assemble.io) 呈现的输出效果如下 (将鼠标悬停在链接上，没有提示): https://assemble.io contact@revolunet.com Assemble 输出的 HTML 看起来像这样: \u003ca href=\"https://assemble.io\"\u003ehttps://assemble.io\u003c/a\u003e \u003ca href=\"mailto:contact@revolunet.com\"\u003econtact@revolunet.com\u003c/a\u003e \u003ca href=\"https://assemble.io\"\u003eAssemble\u003c/a\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:11:1","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["网站使用"],"content":"添加一个标题 [Upstage](https://github.com/upstage/ \"Visit Upstage!\") 呈现的输出效果如下 (将鼠标悬停在链接上，会有一行提示): Upstage 输出的 HTML 看起来像这样: \u003ca href=\"https://github.com/upstage/\" title=\"Visit Upstage!\"\u003eUpstage\u003c/a\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:11:2","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["网站使用"],"content":"定位标记 定位标记使你可以跳至同一页面上的指定锚点. 例如, 每个章节: ## Table of Contents * [Chapter 1](#chapter-1) * [Chapter 2](#chapter-2) * [Chapter 3](#chapter-3) 将跳转到这些部分: ## Chapter 1 \u003ca id=\"chapter-1\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 2 \u003ca id=\"chapter-2\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 3 \u003ca id=\"chapter-3\"\u003e\u003c/a\u003e Content for chapter one. 注意 定位标记的位置几乎是任意的. 因为它们并不引人注目, 所以它们通常被放在同一行了. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:11:3","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["网站使用"],"content":"12 脚注 脚注使你可以添加注释和参考, 而不会使文档正文混乱. 当你创建脚注时, 会在添加脚注引用的位置出现带有链接的上标编号. 读者可以单击链接以跳至页面底部的脚注内容. 要创建脚注引用, 请在方括号中添加插入符号和标识符 ([^1]). 标识符可以是数字或单词, 但不能包含空格或制表符. 标识符仅将脚注引用与脚注本身相关联 - 在脚注输出中, 脚注按顺序编号. 在中括号内使用插入符号和数字以及用冒号和文本来添加脚注内容 ([^1]：这是一段脚注). 你不一定要在文档末尾添加脚注. 可以将它们放在除列表, 引用和表格等元素之外的任何位置. 这是一个数字脚注[^1]. 这是一个带标签的脚注[^label] [^1]: 这是一个数字脚注 [^label]: 这是一个带标签的脚注 这是一个数字脚注1. 这是一个带标签的脚注2 ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:12:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["网站使用"],"content":"13 图片 图片的语法与链接相似, 但包含一个在前面的感叹号. ![Minion](https://octodex.github.com/images/minion.png) 或者: ![Alt text](https://octodex.github.com/images/stormtroopocat.jpg \"The Stormtroopocat\") The StormtroopocatAlt text \" The Stormtroopocat 像链接一样, 图片也具有脚注样式的语法: ![Alt text][id] The DojocatAlt text \" The Dojocat 稍后在文档中提供参考内容, 用来定义 URL 的位置: [id]: https://octodex.github.com/images/dojocat.jpg \"The Dojocat\" 技巧 LoveIt 主题提供了一个包含更多功能的 图片的 shortcode. 这是一个数字脚注 ↩︎ 这是一个带标签的脚注 ↩︎ ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:13:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["网站使用"],"content":"Hugo 和 LoveIt 中的 Emoji 的用法指南.","date":"2019-10-01","objectID":"/emoji-support/","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"Emoji 可以通过多种方式在 Hugo 项目中启用. emojify 方法可以直接在模板中调用, 或者使用行内 Shortcodes. 要全局使用 emoji, 需要在你的网站配置中设置 enableEmoji 为 true, 然后你就可以直接在文章中输入 emoji 的代码. 它们以冒号开头和结尾，并且包含 emoji 的 代码: 去露营啦! :tent: 很快就回来. 真开心! :joy: 呈现的输出效果如下: 去露营啦! ⛺ 很快就回来. 真开心! 😂 以下符号清单是 emoji 代码的非常有用的参考. ","date":"2019-10-01","objectID":"/emoji-support/:0:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"表情与情感 ","date":"2019-10-01","objectID":"/emoji-support/:1:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"笑脸表情 图标 代码 图标 代码 😀 grinning 😃 smiley 😄 smile 😁 grin 😆 laughing satisfied 😅 sweat_smile 🤣 rofl 😂 joy 🙂 slightly_smiling_face 🙃 upside_down_face 😉 wink 😊 blush 😇 innocent ","date":"2019-10-01","objectID":"/emoji-support/:1:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"爱意表情 图标 代码 图标 代码 😍 heart_eyes 😘 kissing_heart 😗 kissing ☺️ relaxed 😚 kissing_closed_eyes 😙 kissing_smiling_eyes ","date":"2019-10-01","objectID":"/emoji-support/:1:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"吐舌头表情 图标 代码 图标 代码 😋 yum 😛 stuck_out_tongue 😜 stuck_out_tongue_winking_eye 😝 stuck_out_tongue_closed_eyes 🤑 money_mouth_face ","date":"2019-10-01","objectID":"/emoji-support/:1:3","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"带手的表情 图标 代码 图标 代码 🤗 hugs 🤔 thinking ","date":"2019-10-01","objectID":"/emoji-support/:1:4","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"中性表情 图标 代码 图标 代码 🤐 zipper_mouth_face 😐 neutral_face 😑 expressionless 😶 no_mouth 😏 smirk 😒 unamused 🙄 roll_eyes 😬 grimacing 🤥 lying_face ","date":"2019-10-01","objectID":"/emoji-support/:1:5","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"困倦的表情 图标 代码 图标 代码 😌 relieved 😔 pensive 😪 sleepy 🤤 drooling_face 😴 sleeping ","date":"2019-10-01","objectID":"/emoji-support/:1:6","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"不适的表情 图标 代码 图标 代码 😷 mask 🤒 face_with_thermometer 🤕 face_with_head_bandage 🤢 nauseated_face 🤧 sneezing_face 😵 dizzy_face ","date":"2019-10-01","objectID":"/emoji-support/:1:7","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"戴帽子的表情 图标 代码 图标 代码 🤠 cowboy_hat_face ","date":"2019-10-01","objectID":"/emoji-support/:1:8","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"戴眼镜的表情 图标 代码 图标 代码 😎 sunglasses 🤓 nerd_face ","date":"2019-10-01","objectID":"/emoji-support/:1:9","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"担心的表情 图标 代码 图标 代码 😕 confused 😟 worried 🙁 slightly_frowning_face ☹ frowning_face 😮 open_mouth 😯 hushed 😲 astonished 😳 flushed 😦 frowning 😧 anguished 😨 fearful 😰 cold_sweat 😥 disappointed_relieved 😢 cry 😭 sob 😱 scream 😖 confounded 😣 persevere 😞 disappointed 😓 sweat 😩 weary 😫 tired_face ","date":"2019-10-01","objectID":"/emoji-support/:1:10","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"否定的表情 图标 代码 图标 代码 😤 triumph 😡 pout rage 😠 angry 😈 smiling_imp 👿 imp 💀 skull ☠️ skull_and_crossbones ","date":"2019-10-01","objectID":"/emoji-support/:1:11","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"特殊打扮的表情 图标 代码 图标 代码 💩 hankey poop shit 🤡 clown_face 👹 japanese_ogre 👺 japanese_goblin 👻 ghost 👽 alien 👾 space_invader 🤖 robot ","date":"2019-10-01","objectID":"/emoji-support/:1:12","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"猫脸表情 图标 代码 图标 代码 😺 smiley_cat 😸 smile_cat 😹 joy_cat 😻 heart_eyes_cat 😼 smirk_cat 😽 kissing_cat 🙀 scream_cat 😿 crying_cat_face 😾 pouting_cat ","date":"2019-10-01","objectID":"/emoji-support/:1:13","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"猴脸表情 图标 代码 图标 代码 🙈 see_no_evil 🙉 hear_no_evil 🙊 speak_no_evil ","date":"2019-10-01","objectID":"/emoji-support/:1:14","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"情感 图标 代码 图标 代码 💋 kiss 💌 love_letter 💘 cupid 💝 gift_heart 💖 sparkling_heart 💗 heartpulse 💓 heartbeat 💞 revolving_hearts 💕 two_hearts 💟 heart_decoration ❣️ heavy_heart_exclamation 💔 broken_heart ❤️ heart 💛 yellow_heart 💚 green_heart 💙 blue_heart 💜 purple_heart 🖤 black_heart 💯 100 💢 anger 💥 boom collision 💫 dizzy 💦 sweat_drops 💨 dash 🕳️ hole 💣 bomb 💬 speech_balloon 👁️‍🗨️ eye_speech_bubble 🗯️ right_anger_bubble 💭 thought_balloon 💤 zzz ","date":"2019-10-01","objectID":"/emoji-support/:1:15","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"人与身体 ","date":"2019-10-01","objectID":"/emoji-support/:2:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"张开手掌的手势 图标 代码 图标 代码 👋 wave 🤚 raised_back_of_hand 🖐️ raised_hand_with_fingers_splayed ✋ hand raised_hand 🖖 vulcan_salute ","date":"2019-10-01","objectID":"/emoji-support/:2:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"部分手指的手势 图标 代码 图标 代码 👌 ok_hand ✌️ v 🤞 crossed_fingers 🤘 metal 🤙 call_me_hand ","date":"2019-10-01","objectID":"/emoji-support/:2:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"一根手指的手势 图标 代码 图标 代码 👈 point_left 👉 point_right 👆 point_up_2 🖕 fu middle_finger 👇 point_down ☝️ point_up ","date":"2019-10-01","objectID":"/emoji-support/:2:3","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"握紧的手势 图标 代码 图标 代码 👍 +1 thumbsup 👎 -1 thumbsdown ✊ fist fist_raised 👊 facepunch fist_oncoming punch 🤛 fist_left 🤜 fist_right ","date":"2019-10-01","objectID":"/emoji-support/:2:4","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"两只手 图标 代码 图标 代码 👏 clap 🙌 raised_hands 👐 open_hands 🤝 handshake 🙏 pray ","date":"2019-10-01","objectID":"/emoji-support/:2:5","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"握住东西的手势 图标 代码 图标 代码 ✍️ writing_hand 💅 nail_care 🤳 selfie ","date":"2019-10-01","objectID":"/emoji-support/:2:6","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"身体部位 图标 代码 图标 代码 💪 muscle 👂 ear 👃 nose 👀 eyes 👁️ eye 👅 tongue 👄 lips ","date":"2019-10-01","objectID":"/emoji-support/:2:7","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"人 图标 代码 图标 代码 👶 baby 👦 boy 👧 girl :blonde_man: blonde_man person_with_blond_hair 👨 man 👩 woman 👱‍♀️ blonde_woman 👴 older_man 👵 older_woman ","date":"2019-10-01","objectID":"/emoji-support/:2:8","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"身体动作 图标 代码 图标 代码 🙍‍♀️ frowning_woman person_frowning 🙍‍♂️ frowning_man 🙎‍♀️ person_with_pouting_face pouting_woman 🙎‍♂️ pouting_man 🙅‍♀️ ng_woman no_good no_good_woman 🙅‍♂️ ng_man no_good_man 🙆‍♀️ ok_woman 🙆‍♂️ ok_man 💁‍♀️ information_desk_person sassy_woman tipping_hand_woman 💁‍♂️ sassy_man tipping_hand_man 🙋‍♀️ raising_hand raising_hand_woman 🙋‍♂️ raising_hand_man 🙇‍♂️ bow bowing_man 🙇‍♀️ bowing_woman 🤦‍♂️ man_facepalming 🤦‍♀️ woman_facepalming 🤷‍♂️ man_shrugging 🤷‍♀️ woman_shrugging ","date":"2019-10-01","objectID":"/emoji-support/:2:9","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"人物角色 图标 代码 图标 代码 👨‍⚕️ man_health_worker 👩‍⚕️ woman_health_worker 👨‍🎓 man_student 👩‍🎓 woman_student 👨‍🏫 man_teacher 👩‍🏫 woman_teacher 👨‍⚖️ man_judge 👩‍⚖️ woman_judge 👨‍🌾 man_farmer 👩‍🌾 woman_farmer 👨‍🍳 man_cook 👩‍🍳 woman_cook 👨‍🔧 man_mechanic 👩‍🔧 woman_mechanic 👨‍🏭 man_factory_worker 👩‍🏭 woman_factory_worker 👨‍💼 man_office_worker 👩‍💼 woman_office_worker 👨‍🔬 man_scientist 👩‍🔬 woman_scientist 👨‍💻 man_technologist 👩‍💻 woman_technologist 👨‍🎤 man_singer 👩‍🎤 woman_singer 👨‍🎨 man_artist 👩‍🎨 woman_artist 👨‍✈️ man_pilot 👩‍✈️ woman_pilot 👨‍🚀 man_astronaut 👩‍🚀 woman_astronaut 👨‍🚒 man_firefighter 👩‍🚒 woman_firefighter 👮‍♂️ cop policeman 👮‍♀️ policewoman 🕵 detective male_detective 🕵️‍♀️ female_detective 💂‍♂️ guardsman 💂‍♀️ guardswoman 👷‍♂️ construction_worker construction_worker_man 👷‍♀️ construction_worker_woman 🤴 prince 👸 princess 👳‍♂️ man_with_turban 👳‍♀️ woman_with_turban 👲 man_with_gua_pi_mao 🤵‍♂️ man_in_tuxedo 👰 bride_with_veil 🤰 pregnant_woman ","date":"2019-10-01","objectID":"/emoji-support/:2:10","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"幻想的人物 图标 代码 图标 代码 👼 angel 🎅 santa 🤶 mrs_claus ","date":"2019-10-01","objectID":"/emoji-support/:2:11","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"人物活动 图标 代码 图标 代码 💆‍♀️ massage massage_woman 💆‍♂️ massage_man 💇‍♀️ haircut haircut_woman 💇‍♂️ haircut_man 🚶‍♂️ walking walking_man 🚶‍♀️ walking_woman 🏃‍♂️ runner running running_man 🏃‍♀️ running_woman 💃 dancer 🕺 man_dancing 🕴️ business_suit_levitating 👯‍♀️ dancers dancing_women 👯‍♂️ dancing_men ","date":"2019-10-01","objectID":"/emoji-support/:2:12","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"体育 图标 代码 图标 代码 🤺 person_fencing 🏇 horse_racing ⛷️ skier 🏂 snowboarder 🏌️‍♂️ golfing_man 🏌️‍♀️ golfing_woman 🏄‍♂️ surfer surfing_man 🏄‍♀️ surfing_woman 🚣‍♂️ rowboat rowing_man 🚣‍♀️ rowing_woman 🏊‍♂️ swimmer swimming_man 🏊‍♀️ swimming_woman ⛹️‍♂️ basketball_man ⛹️‍♀️ basketball_woman 🏋️‍♂️ weight_lifting_man 🏋️‍♀️ weight_lifting_woman 🚴‍♂️ bicyclist biking_man 🚴‍♀️ biking_woman 🚵‍♂️ mountain_bicyclist mountain_biking_man 🚵‍♀️ mountain_biking_woman 🤸‍♂️ man_cartwheeling 🤸‍♀️ woman_cartwheeling 🤼‍♂️ men_wrestling 🤼‍♀️ women_wrestling 🤽‍♂️ man_playing_water_polo 🤽‍♀️ woman_playing_water_polo 🤾‍♂️ man_playing_handball 🤾‍♀️ woman_playing_handball 🤹‍♂️ man_juggling 🤹‍♀️ woman_juggling ","date":"2019-10-01","objectID":"/emoji-support/:2:13","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"休息 图标 代码 图标 代码 🛀 bath 🛌 sleeping_bed ","date":"2019-10-01","objectID":"/emoji-support/:2:14","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"家庭 图标 代码 图标 代码 👭 two_women_holding_hands 👫 couple 👬 two_men_holding_hands 👩‍❤️‍💋‍👨 couplekiss_man_woman 👨‍❤️‍💋‍👨 couplekiss_man_man 👩‍❤️‍💋‍👩 couplekiss_woman_woman 👩‍❤️‍👨 couple_with_heart couple_with_heart_woman_man 👨‍❤️‍👨 couple_with_heart_man_man 👩‍❤️‍👩 couple_with_heart_woman_woman 👨‍👩‍👦 family family_man_woman_boy 👨‍👩‍👧 family_man_woman_girl 👨‍👩‍👧‍👦 family_man_woman_girl_boy 👨‍👩‍👦‍👦 family_man_woman_boy_boy 👨‍👩‍👧‍👧 family_man_woman_girl_girl 👨‍👨‍👦 family_man_man_boy 👨‍👨‍👧 family_man_man_girl 👨‍👨‍👧‍👦 family_man_man_girl_boy 👨‍👨‍👦‍👦 family_man_man_boy_boy 👨‍👨‍👧‍👧 family_man_man_girl_girl 👩‍👩‍👦 family_woman_woman_boy 👩‍👩‍👧 family_woman_woman_girl 👩‍👩‍👧‍👦 family_woman_woman_girl_boy 👩‍👩‍👦‍👦 family_woman_woman_boy_boy 👩‍👩‍👧‍👧 family_woman_woman_girl_girl 👨‍👦 family_man_boy 👨‍👦‍👦 family_man_boy_boy 👨‍👧 family_man_girl 👨‍👧‍👦 family_man_girl_boy 👨‍👧‍👧 family_man_girl_girl 👩‍👦 family_woman_boy 👩‍👦‍👦 family_woman_boy_boy 👩‍👧 family_woman_girl 👩‍👧‍👦 family_woman_girl_boy 👩‍👧‍👧 family_woman_girl_girl ","date":"2019-10-01","objectID":"/emoji-support/:2:15","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"人物符号 图标 代码 图标 代码 🗣 speaking_head 👤 bust_in_silhouette 👥 busts_in_silhouette 👣 footprints ","date":"2019-10-01","objectID":"/emoji-support/:2:16","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"动物与自然 ","date":"2019-10-01","objectID":"/emoji-support/:3:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"哺乳动物 图标 代码 图标 代码 🐵 monkey_face 🐒 monkey 🦍 gorilla 🐶 dog 🐕 dog2 🐩 poodle 🐺 wolf 🦊 fox_face 🐱 cat 🐈 cat2 🦁 lion 🐯 tiger 🐅 tiger2 🐆 leopard 🐴 horse 🐎 racehorse 🦄 unicorn 🦌 deer 🐮 cow 🐂 ox 🐃 water_buffalo 🐄 cow2 🐷 pig 🐖 pig2 🐗 boar 🐽 pig_nose 🐏 ram 🐑 sheep 🐐 goat 🐪 dromedary_camel 🐫 camel 🐘 elephant 🦏 rhinoceros 🐭 mouse 🐁 mouse2 🐀 rat 🐹 hamster 🐰 rabbit 🐇 rabbit2 🐿️ chipmunk 🦇 bat 🐻 bear 🐨 koala 🐼 panda_face 🐾 feet paw_prints ","date":"2019-10-01","objectID":"/emoji-support/:3:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"鸟类 图标 代码 图标 代码 🦃 turkey 🐔 chicken 🐓 rooster 🐣 hatching_chick 🐤 baby_chick 🐥 hatched_chick 🐦 bird 🐧 penguin 🕊 dove 🦅 eagle 🦆 duck 🦉 owl ","date":"2019-10-01","objectID":"/emoji-support/:3:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"两栖动物 icon code icon code 🐸 frog ","date":"2019-10-01","objectID":"/emoji-support/:3:3","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"爬虫类 图标 代码 图标 代码 🐊 crocodile 🐢 turtle 🦎 lizard 🐍 snake 🐲 dragon_face 🐉 dragon ","date":"2019-10-01","objectID":"/emoji-support/:3:4","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"海洋动物 图标 代码 图标 代码 🐳 whale 🐋 whale2 🐬 dolphin flipper 🐟 fish 🐠 tropical_fish 🐡 blowfish 🦈 shark 🐙 octopus 🐚 shell ","date":"2019-10-01","objectID":"/emoji-support/:3:5","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"虫类 图标 代码 图标 代码 🐌 snail 🦋 butterfly 🐛 bug 🐜 ant 🐝 bee honeybee 🪲 beetle 🕷️ spider 🕸️ spider_web 🦂 scorpion ","date":"2019-10-01","objectID":"/emoji-support/:3:6","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"花类植物 图标 代码 图标 代码 💐 bouquet 🌸 cherry_blossom 💮 white_flower 🏵️ rosette 🌹 rose 🥀 wilted_flower 🌺 hibiscus 🌻 sunflower 🌼 blossom 🌷 tulip ","date":"2019-10-01","objectID":"/emoji-support/:3:7","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"其它植物 图标 代码 图标 代码 🌱 seedling 🌲 evergreen_tree 🌳 deciduous_tree 🌴 palm_tree 🌵 cactus 🌾 ear_of_rice 🌿 herb ☘️ shamrock 🍀 four_leaf_clover 🍁 maple_leaf 🍂 fallen_leaf 🍃 leaves ","date":"2019-10-01","objectID":"/emoji-support/:3:8","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"食物与饮料 ","date":"2019-10-01","objectID":"/emoji-support/:4:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"水果 图标 代码 图标 代码 🍇 grapes 🍈 melon 🍉 watermelon 🍊 mandarin orange tangerine 🍋 lemon 🍌 banana 🍍 pineapple 🍎 apple 🍏 green_apple 🍐 pear 🍑 peach 🍒 cherries 🍓 strawberry 🥝 kiwi_fruit 🍅 tomato ","date":"2019-10-01","objectID":"/emoji-support/:4:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"蔬菜 图标 代码 图标 代码 🥑 avocado 🍆 eggplant 🥔 potato 🥕 carrot 🌽 corn 🌶️ hot_pepper 🥒 cucumber 🍄 mushroom 🥜 peanuts 🌰 chestnut ","date":"2019-10-01","objectID":"/emoji-support/:4:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"快餐 图标 代码 图标 代码 🍞 bread 🥐 croissant 🥖 baguette_bread 🥞 pancakes 🧀 cheese 🍖 meat_on_bone 🍗 poultry_leg 🥓 bacon 🍔 hamburger 🍟 fries 🍕 pizza 🌭 hotdog 🌮 taco 🌯 burrito 🥙 stuffed_flatbread 🥚 egg 🍳 fried_egg 🥘 shallow_pan_of_food 🍲 stew 🥗 green_salad 🍿 popcorn ","date":"2019-10-01","objectID":"/emoji-support/:4:3","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"亚洲食物 图标 代码 图标 代码 🍱 bento 🍘 rice_cracker 🍙 rice_ball 🍚 rice 🍛 curry 🍜 ramen 🍝 spaghetti 🍠 sweet_potato 🍢 oden 🍣 sushi 🍤 fried_shrimp 🍥 fish_cake 🍡 dango ","date":"2019-10-01","objectID":"/emoji-support/:4:4","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"海鲜 图标 代码 图标 代码 🦀 crab 🦐 shrimp 🦑 squid ","date":"2019-10-01","objectID":"/emoji-support/:4:5","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"甜点 图标 代码 图标 代码 🍦 icecream 🍧 shaved_ice 🍨 ice_cream 🍩 doughnut 🍪 cookie 🎂 birthday 🍰 cake 🍫 chocolate_bar 🍬 candy 🍭 lollipop 🍮 custard 🍯 honey_pot ","date":"2019-10-01","objectID":"/emoji-support/:4:6","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"饮料 图标 代码 图标 代码 🍼 baby_bottle 🥛 milk_glass ☕ coffee 🍵 tea 🍶 sake 🍾 champagne 🍷 wine_glass 🍸 cocktail 🍹 tropical_drink 🍺 beer 🍻 beers 🥂 clinking_glasses 🥃 tumbler_glass ","date":"2019-10-01","objectID":"/emoji-support/:4:7","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"餐具 图标 代码 图标 代码 🍽️ plate_with_cutlery 🍴 fork_and_knife 🥄 spoon 🔪 hocho knife 🏺 amphora ","date":"2019-10-01","objectID":"/emoji-support/:4:8","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"旅游与地理 ","date":"2019-10-01","objectID":"/emoji-support/:5:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"地图 图标 代码 图标 代码 🌍 earth_africa 🌎 earth_americas 🌏 earth_asia 🌐 globe_with_meridians 🗺️ world_map 🗾 japan ","date":"2019-10-01","objectID":"/emoji-support/:5:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"地理现象 图标 代码 图标 代码 🏔 mountain_snow ⛰️ mountain 🌋 volcano 🗻 mount_fuji 🏕️ camping ⛱ beach_umbrella 🏜️ desert 🏝️ desert_island 🏞️ national_park ","date":"2019-10-01","objectID":"/emoji-support/:5:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"建筑物 图标 代码 图标 代码 🏟️ stadium 🏛️ classical_building 🏗️ building_construction 🏘 houses 🏚 derelict_house 🏠 house 🏡 house_with_garden 🏢 office 🏣 post_office 🏤 european_post_office 🏥 hospital 🏦 bank 🏨 hotel 🏩 love_hotel 🏪 convenience_store 🏫 school 🏬 department_store 🏭 factory 🏯 japanese_castle 🏰 european_castle 💒 wedding 🗼 tokyo_tower 🗽 statue_of_liberty ","date":"2019-10-01","objectID":"/emoji-support/:5:3","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"宗教建筑 图标 代码 图标 代码 ⛪ church 🕌 mosque 🕍 synagogue ⛩️ shinto_shrine 🕋 kaaba ","date":"2019-10-01","objectID":"/emoji-support/:5:4","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"其它地点 图标 代码 图标 代码 ⛲ fountain ⛺ tent 🌁 foggy 🌃 night_with_stars 🏙️ cityscape 🌄 sunrise_over_mountains 🌅 sunrise 🌆 city_sunset 🌇 city_sunrise 🌉 bridge_at_night ♨️ hotsprings 🎠 carousel_horse 🎡 ferris_wheel 🎢 roller_coaster 💈 barber 🎪 circus_tent ","date":"2019-10-01","objectID":"/emoji-support/:5:5","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"陆路运输 图标 代码 图标 代码 🚂 steam_locomotive 🚃 railway_car 🚄 bullettrain_side 🚅 bullettrain_front 🚆 train2 🚇 metro 🚈 light_rail 🚉 station 🚊 tram 🚝 monorail 🚞 mountain_railway 🚋 train 🚌 bus 🚍 oncoming_bus 🚎 trolleybus 🚐 minibus 🚑 ambulance 🚒 fire_engine 🚓 police_car 🚔 oncoming_police_car 🚕 taxi 🚖 oncoming_taxi 🚗 car red_car 🚘 oncoming_automobile 🚙 blue_car 🚚 truck 🚛 articulated_lorry 🚜 tractor 🏎️ racing_car 🏍 motorcycle 🛵 motor_scooter 🚲 bike 🛴 kick_scooter 🚏 busstop 🛣️ motorway 🛤️ railway_track 🛢️ oil_drum ⛽ fuelpump 🚨 rotating_light 🚥 traffic_light 🚦 vertical_traffic_light 🛑 stop_sign 🚧 construction ","date":"2019-10-01","objectID":"/emoji-support/:5:6","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"水路运输 图标 代码 图标 代码 ⚓ anchor ⛵ boat sailboat 🛶 canoe 🚤 speedboat 🛳️ passenger_ship ⛴️ ferry 🛥️ motor_boat 🚢 ship ","date":"2019-10-01","objectID":"/emoji-support/:5:7","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"空中运输 图标 代码 图标 代码 ✈️ airplane 🛩️ small_airplane 🛫 flight_departure 🛬 flight_arrival 💺 seat 🚁 helicopter 🚟 suspension_railway 🚠 mountain_cableway 🚡 aerial_tramway 🛰️ artificial_satellite 🚀 rocket ","date":"2019-10-01","objectID":"/emoji-support/:5:8","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"旅馆 icon code icon code 🛎️ bellhop_bell ","date":"2019-10-01","objectID":"/emoji-support/:5:9","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"时间 图标 代码 图标 代码 ⌛ hourglass ⏳ hourglass_flowing_sand ⌚ watch ⏰ alarm_clock ⏱️ stopwatch ⏲️ timer_clock 🕰️ mantelpiece_clock 🕛 clock12 🕧 clock1230 🕐 clock1 🕜 clock130 🕑 clock2 🕝 clock230 🕒 clock3 🕞 clock330 🕓 clock4 🕟 clock430 🕔 clock5 🕠 clock530 🕕 clock6 🕡 clock630 🕖 clock7 🕢 clock730 🕗 clock8 🕣 clock830 🕘 clock9 🕤 clock930 🕙 clock10 🕥 clock1030 🕚 clock11 🕦 clock1130 ","date":"2019-10-01","objectID":"/emoji-support/:5:10","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"天空与天气 图标 代码 图标 代码 🌑 new_moon 🌒 waxing_crescent_moon 🌓 first_quarter_moon 🌔 moon waxing_gibbous_moon 🌕 full_moon 🌖 waning_gibbous_moon 🌗 last_quarter_moon 🌘 waning_crescent_moon 🌙 crescent_moon 🌚 new_moon_with_face 🌛 first_quarter_moon_with_face 🌜 last_quarter_moon_with_face 🌡️ thermometer ☀️ sunny 🌝 full_moon_with_face 🌞 sun_with_face ⭐ star 🌟 star2 🌠 stars 🌌 milky_way ☁️ cloud ⛅ partly_sunny ⛈ cloud_with_lightning_and_rain 🌤 sun_behind_small_cloud 🌥 sun_behind_large_cloud 🌦 sun_behind_rain_cloud 🌧 cloud_with_rain 🌨 cloud_with_snow 🌩 cloud_with_lightning 🌪️ tornado 🌫️ fog 🌬 wind_face 🌀 cyclone 🌈 rainbow 🌂 closed_umbrella ☂️ open_umbrella ☂️ umbrella ⛱️ parasol_on_ground ⚡ zap ❄️ snowflake ☃️ snowman_with_snow ☃️ snowman ☄️ comet 🔥 fire 💧 droplet 🌊 ocean ","date":"2019-10-01","objectID":"/emoji-support/:5:11","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"活动 ","date":"2019-10-01","objectID":"/emoji-support/:6:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"事件 图标 代码 图标 代码 🎃 jack_o_lantern 🎄 christmas_tree 🎆 fireworks 🎇 sparkler ✨ sparkles 🎈 balloon 🎉 tada 🎊 confetti_ball 🎋 tanabata_tree 🎍 bamboo 🎎 dolls 🎏 flags 🎐 wind_chime 🎑 rice_scene 🎀 ribbon 🎁 gift 🎗️ reminder_ribbon 🎟 tickets 🎫 ticket ","date":"2019-10-01","objectID":"/emoji-support/:6:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"奖杯与奖牌 图标 代码 图标 代码 🎖️ medal_military 🏆 trophy 🏅 medal_sports 🥇 1st_place_medal 🥈 2nd_place_medal 🥉 3rd_place_medal ","date":"2019-10-01","objectID":"/emoji-support/:6:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"体育运动 图标 代码 图标 代码 ⚽ soccer ⚾ baseball 🏀 basketball 🏐 volleyball 🏈 football 🏉 rugby_football 🎾 tennis 🎳 bowling 🦗 cricket 🏑 field_hockey 🏒 ice_hockey 🏓 ping_pong 🏸 badminton 🥊 boxing_glove 🥋 martial_arts_uniform 🥅 goal_net ⛳ golf ⛸️ ice_skate 🎣 fishing_pole_and_fish 🎽 running_shirt_with_sash 🎿 ski ","date":"2019-10-01","objectID":"/emoji-support/:6:3","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"游戏 图标 代码 图标 代码 🎯 dart 🎱 8ball 🔮 crystal_ball 🎮 video_game 🕹️ joystick 🎰 slot_machine 🎲 game_die ♠️ spades ♥️ hearts ♦️ diamonds ♣️ clubs 🃏 black_joker 🀄 mahjong 🎴 flower_playing_cards ","date":"2019-10-01","objectID":"/emoji-support/:6:4","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"艺术与工艺 图标 代码 图标 代码 🎭 performing_arts 🖼 framed_picture 🎨 art ","date":"2019-10-01","objectID":"/emoji-support/:6:5","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"物品 ","date":"2019-10-01","objectID":"/emoji-support/:7:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"服装 图标 代码 图标 代码 👓 eyeglasses 🕶️ dark_sunglasses 👔 necktie 👕 shirt tshirt 👖 jeans 👗 dress 👘 kimono 👙 bikini 👚 womans_clothes 👛 purse 👜 handbag 👝 pouch 🛍️ shopping 🎒 school_satchel 👞 mans_shoe shoe 👟 athletic_shoe 👠 high_heel 👡 sandal 👢 boot 👑 crown 👒 womans_hat 🎩 tophat 🎓 mortar_board ⛑️ rescue_worker_helmet 📿 prayer_beads 💄 lipstick 💍 ring 💎 gem ","date":"2019-10-01","objectID":"/emoji-support/:7:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"声音 图标 代码 图标 代码 🔇 mute 🔈 speaker 🔉 sound 🔊 loud_sound 📢 loudspeaker 📣 mega 📯 postal_horn 🔔 bell 🔕 no_bell ","date":"2019-10-01","objectID":"/emoji-support/:7:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"音乐 图标 代码 图标 代码 🎼 musical_score 🎵 musical_note 🎶 notes 🎙️ studio_microphone 🎚️ level_slider 🎛️ control_knobs 🎤 microphone 🎧 headphones 📻 radio ","date":"2019-10-01","objectID":"/emoji-support/:7:3","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"乐器 图标 代码 图标 代码 🎷 saxophone 🎸 guitar 🎹 musical_keyboard 🎺 trumpet 🎻 violin 🥁 drum ","date":"2019-10-01","objectID":"/emoji-support/:7:4","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"电话 图标 代码 图标 代码 📱 iphone 📲 calling ☎️ phone telephone 📞 telephone_receiver 📟 pager 📠 fax ","date":"2019-10-01","objectID":"/emoji-support/:7:5","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"电脑 图标 代码 图标 代码 🔋 battery 🔌 electric_plug 💻 computer 🖥️ desktop_computer 🖨️ printer ⌨️ keyboard 🖱 computer_mouse 🖲️ trackball 💽 minidisc 💾 floppy_disk 💿 cd 📀 dvd ","date":"2019-10-01","objectID":"/emoji-support/:7:6","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"灯光与影像 图标 代码 图标 代码 🎥 movie_camera 🎞️ film_strip 📽️ film_projector 🎬 clapper 📺 tv 📷 camera 📸 camera_flash 📹 video_camera 📼 vhs 🔍 mag 🔎 mag_right 🕯️ candle 💡 bulb 🔦 flashlight 🏮 izakaya_lantern lantern ","date":"2019-10-01","objectID":"/emoji-support/:7:7","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"书与纸张 图标 代码 图标 代码 📔 notebook_with_decorative_cover 📕 closed_book 📖 book open_book 📗 green_book 📘 blue_book 📙 orange_book 📚 books 📓 notebook 📒 ledger 📃 page_with_curl 📜 scroll 📄 page_facing_up 📰 newspaper 🗞️ newspaper_roll 📑 bookmark_tabs 🔖 bookmark 🏷️ label ","date":"2019-10-01","objectID":"/emoji-support/:7:8","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"钱 图标 代码 图标 代码 💰 moneybag 💴 yen 💵 dollar 💶 euro 💷 pound 💸 money_with_wings 💳 credit_card 💹 chart ","date":"2019-10-01","objectID":"/emoji-support/:7:9","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"邮件 图标 代码 图标 代码 ✉️ email envelope 📧 📧 📨 incoming_envelope 📩 envelope_with_arrow 📤 outbox_tray 📥 inbox_tray 📦 package 📫 mailbox 📪 mailbox_closed 📬 mailbox_with_mail 📭 mailbox_with_no_mail 📮 postbox 🗳 ballot_box ","date":"2019-10-01","objectID":"/emoji-support/:7:10","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"书写 图标 代码 图标 代码 ✏️ pencil2 ✒️ black_nib 🖋 fountain_pen 🖊 pen 🖌 paintbrush 🖍 crayon 📝 memo pencil ","date":"2019-10-01","objectID":"/emoji-support/:7:11","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"办公 图标 代码 图标 代码 💼 briefcase 📁 file_folder 📂 open_file_folder 🗂️ card_index_dividers 📅 date 📆 calendar 🗒 spiral_notepad 🗓 spiral_calendar 📇 card_index 📈 chart_with_upwards_trend 📉 chart_with_downwards_trend 📊 bar_chart 📋 clipboard 📌 pushpin 📍 round_pushpin 📎 paperclip 🖇 paperclips 📏 straight_ruler 📐 triangular_ruler ✂️ scissors 🗃️ card_file_box 🗄️ file_cabinet 🗑️ wastebasket ","date":"2019-10-01","objectID":"/emoji-support/:7:12","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"锁 图标 代码 图标 代码 🔒 lock 🔓 unlock 🔏 lock_with_ink_pen 🔐 closed_lock_with_key 🔑 key 🗝️ old_key ","date":"2019-10-01","objectID":"/emoji-support/:7:13","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"工具 图标 代码 图标 代码 🔨 hammer ⛏️ pick ⚒️ hammer_and_pick 🛠️ hammer_and_wrench 🗡 dagger ⚔️ crossed_swords 🔫 gun 🏹 bow_and_arrow 🛡️ shield 🔧 wrench 🔩 nut_and_bolt ⚙️ gear 🗜 clamp ⚖ balance_scale 🔗 link ⛓️ chains ","date":"2019-10-01","objectID":"/emoji-support/:7:14","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"科学 图标 代码 图标 代码 ⚗️ alembic 🔬 microscope 🔭 telescope 🛰️ satellite ","date":"2019-10-01","objectID":"/emoji-support/:7:15","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"医疗 图标 代码 图标 代码 💉 syringe 💊 pill ","date":"2019-10-01","objectID":"/emoji-support/:7:16","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"生活用品 图标 代码 图标 代码 🚪 door 🛏️ bed 🛋️ couch_and_lamp 🚽 toilet 🚿 shower 🛁 bathtub 🛒 shopping_cart ","date":"2019-10-01","objectID":"/emoji-support/:7:17","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"其它物品 图标 代码 图标 代码 🚬 smoking ⚰️ coffin ⚱️ funeral_urn 🗿 moyai ","date":"2019-10-01","objectID":"/emoji-support/:7:18","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"符号 ","date":"2019-10-01","objectID":"/emoji-support/:8:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"交通标识 图标 代码 图标 代码 🏧 atm 🚮 put_litter_in_its_place 🚰 potable_water ♿ wheelchair 🚹 mens 🚺 womens 🚻 restroom 🚼 baby_symbol 🚾 wc 🛂 passport_control 🛃 customs 🛄 baggage_claim 🛅 left_luggage ","date":"2019-10-01","objectID":"/emoji-support/:8:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"警告 图标 代码 图标 代码 ⚠️ warning 🚸 children_crossing ⛔ no_entry 🚫 no_entry_sign 🚳 no_bicycles 🚭 no_smoking 🚯 do_not_litter 🚱 🚱 🚷 no_pedestrians 📵 no_mobile_phones 🔞 underage ☢ radioactive ☣ biohazard ","date":"2019-10-01","objectID":"/emoji-support/:8:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"箭头 图标 代码 图标 代码 ⬆️ arrow_up ↗️ arrow_upper_right ➡️ arrow_right ↘️ arrow_lower_right ⬇️ arrow_down ↙️ arrow_lower_left ⬅️ arrow_left ↖️ arrow_upper_left ↕️ arrow_up_down ↔️ left_right_arrow ↩️ leftwards_arrow_with_hook ↪️ arrow_right_hook ⤴️ arrow_heading_up ⤵️ arrow_heading_down 🔃 arrows_clockwise 🔄 arrows_counterclockwise 🔙 back 🔚 end 🔛 on 🔜 soon 🔝 top ","date":"2019-10-01","objectID":"/emoji-support/:8:3","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"宗教 图标 代码 图标 代码 🛐 place_of_worship ⚛️ atom_symbol 🕉 om ✡️ star_of_david ☸️ wheel_of_dharma ☯️ yin_yang ✝️ latin_cross ☦️ orthodox_cross ☪️ star_and_crescent ☮️ peace_symbol 🕎 menorah 🔯 six_pointed_star ","date":"2019-10-01","objectID":"/emoji-support/:8:4","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"生肖 图标 代码 图标 代码 ♈ aries ♉ taurus ♊ gemini ♋ cancer ♌ leo ♍ virgo ♎ libra ♏ scorpius ♐ sagittarius ♑ capricorn ♒ aquarius ♓ pisces ⛎ ophiuchus ","date":"2019-10-01","objectID":"/emoji-support/:8:5","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"影像符号 图标 代码 图标 代码 🔀 twisted_rightwards_arrows 🔁 repeat 🔂 repeat_one ▶️ arrow_forward ⏩ fast_forward ⏭ next_track_button ⏯ play_or_pause_button ◀️ arrow_backward ⏪ rewind ⏮️ previous_track_button 🔼 arrow_up_small ⏫ arrow_double_up 🔽 arrow_down_small ⏬ arrow_double_down ⏸ pause_button ⏹ stop_button ⏺ record_button 🎦 cinema 🔅 low_brightness 🔆 high_brightness 📶 signal_strength 📳 vibration_mode 📴 mobile_phone_off ","date":"2019-10-01","objectID":"/emoji-support/:8:6","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"数学 图标 代码 图标 代码 ✖️ heavy_multiplication_x ➕ heavy_plus_sign ➖ heavy_minus_sign ➗ heavy_division_sign ","date":"2019-10-01","objectID":"/emoji-support/:8:7","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"标点符号 图标 代码 图标 代码 ‼️ bangbang ⁉️ interrobang ❓ question ❔ grey_question ❕ grey_exclamation ❗ exclamation heavy_exclamation_mark 〰️ wavy_dash ","date":"2019-10-01","objectID":"/emoji-support/:8:8","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"货币 图标 代码 图标 代码 💱 currency_exchange 💲 heavy_dollar_sign ","date":"2019-10-01","objectID":"/emoji-support/:8:9","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"按键符号 图标 代码 图标 代码 #️⃣ hash *️⃣ asterisk 0️⃣ zero 1️⃣ one 2️⃣ two 3️⃣ three 4️⃣ four 5️⃣ five 6️⃣ six 7️⃣ seven 8️⃣ eight 9️⃣ nine 🔟 keycap_ten ","date":"2019-10-01","objectID":"/emoji-support/:8:10","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"字母符号 图标 代码 图标 代码 🔠 capital_abcd 🔡 abcd 🔢 1234 🔣 symbols 🔤 abc 🅰️ a 🆎 ab 🅱️ b 🆑 cl 🆒 cool 🆓 free ℹ️ information_source 🆔 id ⓜ️ m 🆕 new 🆖 ng 🅾️ o2 🆗 ok 🅿️ parking 🆘 sos 🆙 up 🆚 vs 🈁 koko 🈂️ sa 🈷️ u6708 🈶 u6709 🈯 u6307 🉐 ideograph_advantage 🈹 u5272 🈚 u7121 🈲 u7981 🉑 accept 🈸 u7533 🈴 u5408 🈳 u7a7a ㊗️ congratulations ㊙️ secret 🈺 u55b6 🈵 u6e80 ","date":"2019-10-01","objectID":"/emoji-support/:8:11","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"几何符号 图标 代码 图标 代码 🔴 red_circle 🔵 large_blue_circle ⚫ black_circle ⚪ white_circle ⬛ black_large_square ⬜ white_large_square ◼️ black_medium_square ◻️ white_medium_square ◾ black_medium_small_square ◽ white_medium_small_square ▪️ black_small_square ▫️ white_small_square 🔶 large_orange_diamond 🔷 large_blue_diamond 🔸 small_orange_diamond 🔹 small_blue_diamond 🔺 small_red_triangle 🔻 small_red_triangle_down 💠 diamond_shape_with_a_dot_inside 🔘 radio_button 🔳 white_square_button 🔲 black_square_button ","date":"2019-10-01","objectID":"/emoji-support/:8:12","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"其它符合 图标 代码 图标 代码 ♻️ recycle ⚜️ fleur_de_lis 🔱 trident 📛 name_badge 🔰 beginner ⭕ o ✅ white_check_mark ☑️ ballot_box_with_check ✔️ heavy_check_mark ❌ x ❎ negative_squared_cross_mark ➰ curly_loop ➿ loop 〽️ part_alternation_mark ✳️ eight_spoked_asterisk ✴️ eight_pointed_black_star ❇️ sparkle ©️ copyright ®️ registered ™️ tm ","date":"2019-10-01","objectID":"/emoji-support/:8:13","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"旗帜 ","date":"2019-10-01","objectID":"/emoji-support/:9:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"常用旗帜 图标 代码 图标 代码 🏁 checkered_flag 🚩 triangular_flag_on_post 🎌 crossed_flags 🏴 black_flag 🏳 white_flag 🏳️‍🌈 rainbow_flag ","date":"2019-10-01","objectID":"/emoji-support/:9:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["网站使用"],"content":"国家和地区旗帜 图标 代码 图标 代码 🇦🇩 andorra 🇦🇪 united_arab_emirates 🇦🇫 afghanistan 🇦🇬 antigua_barbuda 🇦🇮 anguilla 🇦🇱 albania 🇦🇲 armenia 🇦🇴 angola 🇦🇶 antarctica 🇦🇷 argentina 🇦🇸 american_samoa 🇦🇹 austria 🇦🇺 australia 🇦🇼 aruba 🇦🇽 aland_islands 🇦🇿 azerbaijan 🇧🇦 bosnia_herzegovina 🇧🇧 barbados 🇧🇩 bangladesh 🇧🇪 belgium 🇧🇫 burkina_faso 🇧🇬 bulgaria 🇧🇭 bahrain 🇧🇮 burundi 🇧🇯 benin 🇧🇱 st_barthelemy 🇧🇲 bermuda 🇧🇳 brunei 🇧🇴 bolivia 🇧🇶 caribbean_netherlands 🇧🇷 brazil 🇧🇸 bahamas 🇧🇹 bhutan 🇧🇼 botswana 🇧🇾 belarus 🇧🇿 belize 🇨🇦 canada 🇨🇨 cocos_islands 🇨🇩 congo_kinshasa 🇨🇫 central_african_republic 🇨🇬 congo_brazzaville 🇨🇭 switzerland 🇨🇮 cote_divoire 🇨🇰 cook_islands 🇨🇱 chile 🇨🇲 cameroon 🇨🇳 cn 🇨🇴 colombia 🇨🇷 costa_rica 🇨🇺 cuba 🇨🇻 cape_verde 🇨🇼 curacao 🇨🇽 christmas_island 🇨🇾 cyprus 🇨🇿 czech_republic 🇩🇪 de 🇩🇯 djibouti 🇩🇰 denmark 🇩🇲 dominica 🇩🇴 dominican_republic 🇩🇿 algeria 🇪🇨 ecuador 🇪🇪 estonia 🇪🇬 egypt 🇪🇭 western_sahara 🇪🇷 eritrea 🇪🇸 es 🇪🇹 ethiopia 🇪🇺 eu european_union 🇫🇮 finland 🇫🇯 fiji 🇫🇰 falkland_islands 🇫🇲 micronesia 🇫🇴 faroe_islands 🇫🇷 fr 🇬🇦 gabon 🇬🇧 gb uk 🇬🇩 grenada 🇬🇪 georgia 🇬🇫 french_guiana 🇬🇬 guernsey 🇬🇭 ghana 🇬🇮 gibraltar 🇬🇱 greenland 🇬🇲 gambia 🇬🇳 guinea 🇬🇵 guadeloupe 🇬🇶 equatorial_guinea 🇬🇷 greece 🇬🇸 south_georgia_south_sandwich_islands 🇬🇹 guatemala 🇬🇺 guam 🇬🇼 guinea_bissau 🇬🇾 guyana 🇭🇰 hong_kong 🇭🇳 honduras 🇭🇷 croatia 🇭🇹 haiti 🇭🇺 hungary 🇮🇨 canary_islands 🇮🇩 indonesia 🇮🇪 ireland 🇮🇱 israel 🇮🇲 isle_of_man 🇮🇳 india 🇮🇴 british_indian_ocean_territory 🇮🇶 iraq 🇮🇷 iran 🇮🇸 iceland 🇮🇹 it 🇯🇪 jersey 🇯🇲 jamaica 🇯🇴 jordan 🇯🇵 jp 🇰🇪 kenya 🇰🇬 kyrgyzstan 🇰🇭 cambodia 🇰🇮 kiribati 🇰🇲 comoros 🇰🇳 st_kitts_nevis 🇰🇵 north_korea 🇰🇷 kr 🇰🇼 kuwait 🇰🇾 cayman_islands 🇰🇿 kazakhstan 🇱🇦 laos 🇱🇧 lebanon 🇱🇨 st_lucia 🇱🇮 liechtenstein 🇱🇰 sri_lanka 🇱🇷 liberia 🇱🇸 lesotho 🇱🇹 lithuania 🇱🇺 luxembourg 🇱🇻 latvia 🇱🇾 libya 🇲🇦 morocco 🇲🇨 monaco 🇲🇩 moldova 🇲🇪 montenegro 🇲🇬 madagascar 🇲🇭 marshall_islands 🇲🇰 macedonia 🇲🇱 mali 🇲🇲 myanmar 🇲🇳 mongolia 🇲🇴 macau 🇲🇵 northern_mariana_islands 🇲🇶 martinique 🇲🇷 mauritania 🇲🇸 montserrat 🇲🇹 malta 🇲🇺 mauritius 🇲🇻 maldives 🇲🇼 malawi 🇲🇽 mexico 🇲🇾 malaysia 🇲🇿 mozambique 🇳🇦 namibia 🇳🇨 new_caledonia 🇳🇪 niger 🇳🇫 norfolk_island 🇳🇬 nigeria 🇳🇮 nicaragua 🇳🇱 netherlands 🇳🇴 norway 🇳🇵 nepal 🇳🇷 nauru 🇳🇺 niue 🇳🇿 new_zealand 🇴🇲 oman 🇵🇦 panama 🇵🇪 peru 🇵🇫 french_polynesia 🇵🇬 papua_new_guinea 🇵🇭 philippines 🇵🇰 pakistan 🇵🇱 poland 🇵🇲 st_pierre_miquelon 🇵🇳 pitcairn_islands 🇵🇷 puerto_rico 🇵🇸 palestinian_territories 🇵🇹 portugal 🇵🇼 palau 🇵🇾 paraguay 🇶🇦 qatar 🇷🇪 reunion 🇷🇴 romania 🇷🇸 serbia 🇷🇺 ru 🇷🇼 rwanda 🇸🇦 saudi_arabia 🇸🇧 solomon_islands 🇸🇨 seychelles 🇸🇩 sudan 🇸🇪 sweden 🇸🇬 singapore 🇸🇭 st_helena 🇸🇮 slovenia 🇸🇰 slovakia 🇸🇱 sierra_leone 🇸🇲 san_marino 🇸🇳 senegal 🇸🇴 somalia 🇸🇷 suriname 🇸🇸 south_sudan 🇸🇹 sao_tome_principe 🇸🇻 el_salvador 🇸🇽 sint_maarten 🇸🇾 syria 🇸🇿 swaziland 🇹🇨 turks_caicos_islands 🇹🇩 chad 🇹🇫 french_southern_territories 🇹🇬 togo 🇹🇭 thailand 🇹🇯 tajikistan 🇹🇰 tokelau 🇹🇱 timor_leste 🇹🇲 turkmenistan 🇹🇳 tunisia 🇹🇴 tonga 🇹🇷 tr 🇹🇹 trinidad_tobago 🇹🇻 tuvalu 🇹🇼 taiwan 🇹🇿 tanzania 🇺🇦 ukraine 🇺🇬 uganda 🇺🇸 us 🇺🇾 uruguay 🇺🇿 uzbekistan 🇻🇦 vatican_city 🇻🇨 st_vincent_grenadines 🇻🇪 venezuela 🇻🇬 british_virgin_islands 🇻🇮 us_virgin_islands 🇻🇳 vietnam 🇻🇺 vanuatu 🇼🇫 wallis_futuna 🇼🇸 samoa 🇽🇰 kosovo 🇾🇪 yemen 🇾🇹 mayotte 🇿🇦 south_africa 🇿🇲 zambia 🇿🇼 zimbabwe ","date":"2019-10-01","objectID":"/emoji-support/:9:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Redis"],"content":"Redis-AKF/CAP原理","date":"2021-04-27","objectID":"/redis-afk%E5%8E%9F%E7%90%86/","tags":["Redis","AKF","CAP"],"title":"Redis-AKF/CAP原理","uri":"/redis-afk%E5%8E%9F%E7%90%86/"},{"categories":["Redis"],"content":"Redis-AKF/CAP原则 ","date":"2021-04-27","objectID":"/redis-afk%E5%8E%9F%E7%90%86/:0:0","tags":["Redis","AKF","CAP"],"title":"Redis-AKF/CAP原理","uri":"/redis-afk%E5%8E%9F%E7%90%86/"},{"categories":["Redis"],"content":"1. AKF 扩展立方体理论 之前讨论的情况都是单机版单进程下的情况 AKF扩展立方体（Scalability Cube），是《架构即未来》一书中提出的可扩展模型，这个立方体有三个轴线，每个轴线描述扩展性的一个维度，他们分别是产品、流程和团队： X轴 —— 代表无差别的克隆服务和数据，工作可以很均匀的分散在不同的服务实例上； Y轴 —— 关注应用中职责的划分，比如数据类型，交易执行类型的划分； Z轴 —— 关注服务和数据的优先级划分，如分地域划分。 AKF拆分原则 业界对可扩展系统架构设计有一个朴素的概念，就是：通过加机器可以解决容量和可用性问题（如果一台不行就两台）用个段子描述就是：（世界上没有什么事是一顿烧烤解决不了的，如果有，那就两顿） 这一理念在“云计算”概念疯狂流行的今天。得到了广泛的认可。对于一个规模迅速增长的系统而言。容量和性能问题当然是首当其冲的。但是随着时间的向前，系统规模的增长，除了面对性能与容量的问题外，还需要面对功能与模块数量上增长带来的系统复杂性问题。以及业务变化带来的提供差异化服务问题。而许多系统在架构设计时并未充分考虑到这些问题，导致系统的重构成为常态。从而影响业务交付能力，还浪费人力财力。对此《可扩展的艺术》一书提出了一个更加系统的可扩展模型—-AKF可扩展立方。 ","date":"2021-04-27","objectID":"/redis-afk%E5%8E%9F%E7%90%86/:1:0","tags":["Redis","AKF","CAP"],"title":"Redis-AKF/CAP原理","uri":"/redis-afk%E5%8E%9F%E7%90%86/"},{"categories":["Redis"],"content":"1. 单节点，单进程存在的问题： 单点故障 容量有限 数据承载压力有限 X轴：水平复制。全量镜像数据。 Y轴：服务功能拆分。按照不同的业务进行分类，类似于oracle的分库。 Z轴：按优先级进行数据分区。比如说某个模块数据过多，可以拆分为多个Redis客户端，全量数据分为多份，每个Redis中存一部分数据。 此时虽然解决了单实例存在的三个问题，那么又会带来数据一致性问题。 ","date":"2021-04-27","objectID":"/redis-afk%E5%8E%9F%E7%90%86/:1:1","tags":["Redis","AKF","CAP"],"title":"Redis-AKF/CAP原理","uri":"/redis-afk%E5%8E%9F%E7%90%86/"},{"categories":["Redis"],"content":"2. 解决数据一致性问题 同步阻塞方式 ​ 强一致性导致服务阻塞，可用性差 异步 ​ 异步处理，可用性强，但数据一致性差，容易丢失数据 同步阻塞 + 异步 ​ 主节点与中间件之间同步阻塞，可用性相对来说较好（有可能会有脏读现象），可靠的中间件负责进行异步同步数据，最终一致性 ","date":"2021-04-27","objectID":"/redis-afk%E5%8E%9F%E7%90%86/:1:2","tags":["Redis","AKF","CAP"],"title":"Redis-AKF/CAP原理","uri":"/redis-afk%E5%8E%9F%E7%90%86/"},{"categories":["Redis"],"content":"2. CAP理论 补充知识： 主备模式：备用机一般不参与业务，只有在主挂掉之后，才会替代主去提供服务； 主从模式：主从同时提供服务，客户端可以访问主，也可以访问从。 redis一般采用的是主从复制的模式 ","date":"2021-04-27","objectID":"/redis-afk%E5%8E%9F%E7%90%86/:2:0","tags":["Redis","AKF","CAP"],"title":"Redis-AKF/CAP原理","uri":"/redis-afk%E5%8E%9F%E7%90%86/"},{"categories":["Redis"],"content":"Redis持久化-RDB/AOF","date":"2021-04-26","objectID":"/redis%E6%8C%81%E4%B9%85%E5%8C%96/","tags":["持久化"],"title":"Redis持久化-RDB/AOF","uri":"/redis%E6%8C%81%E4%B9%85%E5%8C%96/"},{"categories":["Redis"],"content":"Redis持久化-RDB/AOF 我们都知道Redis所有的数据都存在内存中，这与传统的MySQL，Oracle等关系型数据库直接将内容保存到硬盘中相比，内存数据库的读写效率比传统数据库要快的多（内存的读写效率远远大于硬盘的读写效率）。但是保存在内存中也随之带来了一个缺点，一旦断电或者宕机，那么内存数据库中的数据将会全部丢失。 为了解决这个缺点，Redis提供了将内存数据持久化到硬盘，以及用持久化文件来恢复数据库数据的功能，从内存当中同步到硬盘上，这个过程叫做持久化过程。 ​ 存储层： 1，快照/副本 RDB 2，日志 AOF ","date":"2021-04-26","objectID":"/redis%E6%8C%81%E4%B9%85%E5%8C%96/:0:0","tags":["持久化"],"title":"Redis持久化-RDB/AOF","uri":"/redis%E6%8C%81%E4%B9%85%E5%8C%96/"},{"categories":["Redis"],"content":"1. RDB 时间点快照（point-in-time snapshot） ","date":"2021-04-26","objectID":"/redis%E6%8C%81%E4%B9%85%E5%8C%96/:1:0","tags":["持久化"],"title":"Redis持久化-RDB/AOF","uri":"/redis%E6%8C%81%E4%B9%85%E5%8C%96/"},{"categories":["Redis"],"content":"1. redis database时点性 RDB持久化就是把当前Redis数据库中的内存数据保存到硬盘的过程，RDB方式是Redis默认支持的。 每执行一次修改，会通过fork执行一次写时复制(COW) 实现异步落盘 ","date":"2021-04-26","objectID":"/redis%E6%8C%81%E4%B9%85%E5%8C%96/:1:1","tags":["持久化"],"title":"Redis持久化-RDB/AOF","uri":"/redis%E6%8C%81%E4%B9%85%E5%8C%96/"},{"categories":["Redis"],"content":"2. 触发时机 RDB持久化的触发方式有两种，第一种是自动触发，另外一种是手动触发。 1) 自动触发 通过查看redis.conf里面的SNAPSHOTTING内容可知： ################################ SNAPSHOTTING ################################ # # Save the DB on disk: # # save \u003cseconds\u003e \u003cchanges\u003e # # Will save the DB if both the given number of seconds and the given # number of write operations against the DB occurred. # # In the example below the behaviour will be to save: # after 900 sec (15 min) if at least 1 key changed # after 300 sec (5 min) if at least 10 keys changed # after 60 sec if at least 10000 keys changed # # Note: you can disable saving completely by commenting out all \"save\" lines. # # It is also possible to remove all the previously configured save # points by adding a save directive with a single empty string argument # like in the following example: # # save \"\" 通过save命令执行bgsave操作 save 900 1 save 300 10 save 60 10000 # By default Redis will stop accepting writes if RDB snapshots are enabled # (at least one save point) and the latest background save failed. # This will make the user aware (in a hard way) that data is not persisting # on disk properly, otherwise chances are that no one will notice and some # disaster will happen. # # If the background saving process will start working again Redis will # automatically allow writes again. # # However if you have setup your proper monitoring of the Redis server # and persistence, you may want to disable this feature so that Redis will # continue to work as usual even if there are problems with disk, # permissions, and so forth. stop-writes-on-bgsave-error yes # Compress string objects using LZF when dump .rdb databases? # For default that's set to 'yes' as it's almost always a win. # If you want to save some CPU in the saving child set it to 'no' but # the dataset will likely be bigger if you have compressible values or keys. rdbcompression yes # Since version 5 of RDB a CRC64 checksum is placed at the end of the file. # This makes the format more resistant to corruption but there is a performance # hit to pay (around 10%) when saving and loading RDB files, so you can disable it # for maximum performances. # # RDB files created with checksum disabled have a checksum of zero that will # tell the loading code to skip the check. rdbchecksum yes # The filename where to dump the DB dbfilename dump.rdb # Remove RDB files used by replication in instances without persistence 342,1 16% # in order to load them for the initial synchronization, should be deleted # ASAP. Note that this option ONLY WORKS in instances that have both AOF # and RDB persistence disabled, otherwise is completely ignored. # # An alternative (and sometimes better) way to obtain the same effect is # to use diskless replication on both master and replicas instances. However # in the case of replicas, diskless is not always an option. rdb-del-sync-files no # The working directory. # # The DB will be written inside this directory, with the filename specified # above using the 'dbfilename' configuration directive. # # The Append Only File will also be created inside this directory. # # Note that you must specify a directory here, not a file name. dir /var/lib/redis/6379 1、save：这是默认触发Redis的RDB持久化的条件，如果你只是用Redis的缓存功能，不需要持久化，那么你可以注释掉所有save的默认配置来停用保存功能。可以直接一个空字符串来实现停用：save \" “。 默认配置： save save 900 1： 表示900 秒内如果至少有 1 个 key 的值变化，则保存 save 300 10： 表示300 秒内如果至少有 10 个 key 的值变化，则保存 save 60 10000：表示60 秒内如果至少有 10000 个 key 的值变化，则保存 　2、stop-writes-on-bgsave-error ：默认值为yes。当启用了RDB且最后一次后台保存数据失败，Redis是否停止接收数据。这会让用户意识到数据没有正确持久化到磁盘上，否则没有人会注意到灾难（disaster）发生了。如果Redis重启了，那么又可以重新开始接收数据了 　3、rdbcompression ；默认值是yes。对于存储到磁盘中的快照，可以设置是否进行压缩存储。如果是的话，redis会采用LZF算法进行压缩。如果你不想消耗CPU来进行压缩的话，可以设置为关闭此功能，但是存储在磁盘上的快照会比较大。 　4、rdbchecksum ：默认值是yes。在存储快照后，我们还可以让redis使用CRC64算法来进行数据校验，但是这样做会增加大约10%的性能消耗，如果希望获取到最大的性能提升，可以关闭此功能。 　5、dbfilename ：设置快照的文件名，默认是 dump.rdb 　6、dir：设置快照文件的存放路径，这个配置项一定是个目录，而不能是文件名。默认是和当前配置文件保存在同一目录。 2) 手动触发 通过命令save或者是bgsave save：save时只管保存，其它不管，全部阻塞。关机维护的时候 bgsave：Redis会在后台异步进行快照操作，快照同时还可以响应客户端请求。可以通过lasts","date":"2021-04-26","objectID":"/redis%E6%8C%81%E4%B9%85%E5%8C%96/:1:2","tags":["持久化"],"title":"Redis持久化-RDB/AOF","uri":"/redis%E6%8C%81%E4%B9%85%E5%8C%96/"},{"categories":["Redis"],"content":"3. 弊端 不支持拉链，每次都是全量dump.rdb。 丢失数据相对多一些。时点间的数据窗口数据容易丢失。 ","date":"2021-04-26","objectID":"/redis%E6%8C%81%E4%B9%85%E5%8C%96/:1:3","tags":["持久化"],"title":"Redis持久化-RDB/AOF","uri":"/redis%E6%8C%81%E4%B9%85%E5%8C%96/"},{"categories":["Redis"],"content":"4. 优点 类似于java中的序列化，恢复的速度相对快。 ","date":"2021-04-26","objectID":"/redis%E6%8C%81%E4%B9%85%E5%8C%96/:1:4","tags":["持久化"],"title":"Redis持久化-RDB/AOF","uri":"/redis%E6%8C%81%E4%B9%85%E5%8C%96/"},{"categories":["Redis"],"content":"2. AOF 只追加文件 ","date":"2021-04-26","objectID":"/redis%E6%8C%81%E4%B9%85%E5%8C%96/:2:0","tags":["持久化"],"title":"Redis持久化-RDB/AOF","uri":"/redis%E6%8C%81%E4%B9%85%E5%8C%96/"},{"categories":["Redis"],"content":"1）配置文件 ############################## APPEND ONLY MODE ############################### # By default Redis asynchronously dumps the dataset on disk. This mode is # good enough in many applications, but an issue with the Redis process or # a power outage may result into a few minutes of writes lost (depending on # the configured save points). # # The Append Only File is an alternative persistence mode that provides # much better durability. For instance using the default data fsync policy # (see later in the config file) Redis can lose just one second of writes in a # dramatic event like a server power outage, or a single write if something # wrong with the Redis process itself happens, but the operating system is # still running correctly. # # AOF and RDB persistence can be enabled at the same time without problems. # If the AOF is enabled on startup Redis will load the AOF, that is the file # with the better durability guarantees. # # Please check http://redis.io/topics/persistence for more information. appendonly no # The name of the append only file (default: \"appendonly.aof\") appendfilename \"appendonly.aof\" # The fsync() call tells the Operating System to actually write data on disk # instead of waiting for more data in the output buffer. Some OS will really flush # data on disk, some other OS will just try to do it ASAP. # # Redis supports three different modes: # # no: don't fsync, just let the OS flush the data when it wants. Faster. # always: fsync after every write to the append only log. Slow, Safest. # always: fsync after every write to the append only log. Slow, Safest. # everysec: fsync only one time every second. Compromise. # # The default is \"everysec\", as that's usually the right compromise between # speed and data safety. It's up to you to understand if you can relax this to # \"no\" that will let the operating system flush the output buffer when # it wants, for better performances (but if you can live with the idea of # some data loss consider the default persistence mode that's snapshotting), # or on the contrary, use \"always\" that's very slow but a bit safer than # everysec. # # More details please check the following article: # http://antirez.com/post/redis-persistence-demystified.html # # If unsure, use \"everysec\". # appendfsync always appendfsync everysec # appendfsync no # When the AOF fsync policy is set to always or everysec, and a background # saving process (a background save or AOF log background rewriting) is # performing a lot of I/O against the disk, in some Linux configurations # Redis may block too long on the fsync() call. Note that there is no fix for # this currently, as even performing fsync in a different thread will block # our synchronous write(2) call. # # In order to mitigate this problem it's possible to use the following option # that will prevent fsync() from being called in the main process while a # BGSAVE or BGREWRITEAOF is in progress. # # This means that while another child is saving, the durability of Redis is # the same as \"appendfsync none\". In practical terms, this means that it is # possible to lose up to 30 seconds of log in the worst scenario (with the # default Linux settings). # # If you have latency problems turn this to \"yes\". Otherwise leave it as # \"no\" that is the safest pick from the point of view of durability. no-appendfsync-on-rewrite no # Automatic rewrite of the append only file. # Redis is able to automatically rewrite the log file implicitly calling # BGREWRITEAOF when the AOF log size grows by the specified percentage. # # This is how it works: Redis remembers the size of the AOF file after the # latest rewrite (if no rewrite has happened since the restart, the size of # the AOF at startup is used). # # This base size is compared to the current size. If the current size is # bigger than the specified percentage, the rewrite is triggered. Also # you need to specify a minimal size for the AOF file to be rewritten, this # is useful to avoid rewriting the AOF ","date":"2021-04-26","objectID":"/redis%E6%8C%81%E4%B9%85%E5%8C%96/:2:1","tags":["持久化"],"title":"Redis持久化-RDB/AOF","uri":"/redis%E6%8C%81%E4%B9%85%E5%8C%96/"},{"categories":["Redis"],"content":"实操比较两种AOF重写方式： ","date":"2021-04-26","objectID":"/redis%E6%8C%81%E4%B9%85%E5%8C%96/:2:2","tags":["持久化"],"title":"Redis持久化-RDB/AOF","uri":"/redis%E6%8C%81%E4%B9%85%E5%8C%96/"},{"categories":["Redis"],"content":"1）重写 （4.0版本之前） 修改配置文件 # 关闭后台守护，方便看前台日志 daemonize no # 注释掉日志文件输出，直接在前台输出 # logfile /var/log/redis_6379.log # 只开启aof appendonly yes # 关闭默认开启的混合体模式 aof-use-rdb-preamble no 清理老的文件 cd /var/lib/redis/6379 rm -rf dump.rdb appendonly.aof 启动服务 redis-server /etc/redis/6379_aof_rewrite.conf 现象 # 未执行操作时，aof文件为空 [root@localhost 6379]# ll appendonly.aof -rw-r--r--. 1 root root 0 4月 26 14:24 appendonly.aof # 设置一个key 127.0.0.1:6379\u003e set k1 aaa OK # 查看appendonly.aof文件内容，为写操作指令 *2 $6 SELECT $1 0 *3 $3 set $2 k1 $3 aaa # 手动调用rdb bgsave进行写rdb文件 127.0.0.1:6379\u003e bgsave Background saving started # 前台日志提示，后台子进程进行写时复制执行 15113:M 26 Apr 2021 14:28:50.513 * Background saving started by pid 15352 15352:C 26 Apr 2021 14:28:50.520 * DB saved on disk 15352:C 26 Apr 2021 14:28:50.521 * RDB: 8 MB of memory used by copy-on-write 15113:M 26 Apr 2021 14:28:50.620 * Background saving terminated with success # 生成了rdb文件 [root@localhost 6379]# ll 总用量 8 -rw-r--r--. 1 root root 53 4月 26 14:25 appendonly.aof -rw-r--r--. 1 root root 105 4月 26 14:28 dump.rdb # rdb文件内容为字节码文件，开头为REDIS。 REDIS0009ú redis-ver^E6.0.6ú redis-bitsÀ@ú^EctimeÂb^F\u003c87\u003e`ú^Hused-memÂ\u003c80\u003e3^M^@ú^Laof-preambleÀ^@þ^@û^A^@^@^Bk1^Caaaÿ\u003c97\u003e\u003c8c\u003e|^S\u003c80\u003e¾V_ # 查看rdb文件 [root@localhost 6379]# redis-check-rdb dump.rdb [offset 0] Checking RDB file dump.rdb [offset 26] AUX FIELD redis-ver = '6.0.6' [offset 40] AUX FIELD redis-bits = '64' [offset 52] AUX FIELD ctime = '1619461730' [offset 67] AUX FIELD used-mem = '865152' [offset 83] AUX FIELD aof-preamble = '0' [offset 85] Selecting DB ID 0 [offset 105] Checksum OK [offset 105] \\o/ RDB looks OK! \\o/ [info] 1 keys read [info] 0 expires [info] 0 already expired # 对同一个key执行多次写操作 127.0.0.1:6379\u003e set k1 aaa OK 127.0.0.1:6379\u003e bgsave Background saving started 127.0.0.1:6379\u003e set k1 bbb OK 127.0.0.1:6379\u003e set k1 ccc OK 127.0.0.1:6379\u003e set k1 ddd OK # aof文件 # 其实内存中只有一个值有效，内存中保存了大量无效数据 *2 $6 SELECT $1 0 *3 $3 set $2 k1 $3 aaa *3 $3 set $2 k1 $3 bbb *3 $3 set $2 k1 $3 ccc *3 $3 set $2 k1 $3 ddd # 手动调用重写aof命令 127.0.0.1:6379\u003e BGREWRITEAOF Background append only file rewriting started # 前台日志 15113:M 26 Apr 2021 14:36:38.629 * Background append only file rewriting started by pid 15756 15113:M 26 Apr 2021 14:36:38.660 * AOF rewrite child asks to stop sending diffs. 15756:C 26 Apr 2021 14:36:38.660 * Parent agreed to stop sending diffs. Finalizing AOF... 15756:C 26 Apr 2021 14:36:38.660 * Concatenating 0.00 MB of AOF diff received from parent. 15756:C 26 Apr 2021 14:36:38.660 * SYNC append only file rewrite performed 15756:C 26 Apr 2021 14:36:38.661 * AOF rewrite: 8 MB of memory used by copy-on-write 15113:M 26 Apr 2021 14:36:38.739 * Background AOF rewrite terminated with success 15113:M 26 Apr 2021 14:36:38.739 * Residual parent diff successfully flushed to the rewritten AOF (0.00 MB) 15113:M 26 Apr 2021 14:36:38.739 * Background AOF rewrite finished successfully # 重新查看aof文件，已经删除了无效数据，重新写入。 [root@localhost redis]# cd 6379/ *2 $6 SELECT $1 0 *3 $3 SET $2 k1 $3 ddd ","date":"2021-04-26","objectID":"/redis%E6%8C%81%E4%B9%85%E5%8C%96/:2:3","tags":["持久化"],"title":"Redis持久化-RDB/AOF","uri":"/redis%E6%8C%81%E4%B9%85%E5%8C%96/"},{"categories":["Redis"],"content":"2）重写 + RDB 混合体（4.0版本之后） # 恢复配置 appendonly yes aof-use-rdb-preamble yes # 启动服务 # 查看目录下默认就已经生成aof文件 [root@localhost 6379]# pwd /var/lib/redis/6379 appendonly.aof # 添加key操作，目录下生成aof文件记录 *2 $6 SELECT $1 0 *3 $3 set $2 k1 $3 111 *3 $3 set $2 k2 $3 aaa *3 $3 set $2 k3 $3 xcg # 重写之后才能变为混合体,生成redis开头的aof文件 127.0.0.1:6379\u003e BGREWRITEAOF Background append only file rewriting started [root@localhost 6379]# vim appendonly.aof REDIS0009ú redis-ver^E6.0.6ú redis-bitsÀ@ú^EctimeÂNw\u003c87\u003e`ú^Hused-memÂØ3^M^@ú^Laof-preambleÀ^Aþ^@û^C^@^@^Bk2^Caaa^@^Bk3^Cxcg^@^Bk1^Bk1ÿ\u003c9b\u003e«Á.\u003c9e\u003e^?,^? # 增量明文日志，混合体 REDIS0009ú redis-ver^E6.0.6ú redis-bitsÀ@ú^EctimeÂNw\u003c87\u003e`ú^Hused-memÂØ3^M^@ú^Laof-preambleÀ^Aþ^@û^C^@^@^Bk2^Caaa^@^Bk3^Cxcg^@^Bk1^Bk1ÿ\u003c9b\u003e«Á.\u003c9e\u003e^?,^?*2^M $6^M SELECT^M $1^M 0^M *3^M $3^M set^M $2^M k1^M $1^M a^M *3^M $3^M set^M $2^M k2^M $1^M b^M ~ ","date":"2021-04-26","objectID":"/redis%E6%8C%81%E4%B9%85%E5%8C%96/:2:4","tags":["持久化"],"title":"Redis持久化-RDB/AOF","uri":"/redis%E6%8C%81%E4%B9%85%E5%8C%96/"},{"categories":["Redis"],"content":"3. 官网对两种持久化方式优缺点分析 ","date":"2021-04-26","objectID":"/redis%E6%8C%81%E4%B9%85%E5%8C%96/:3:0","tags":["持久化"],"title":"Redis持久化-RDB/AOF","uri":"/redis%E6%8C%81%E4%B9%85%E5%8C%96/"},{"categories":["Redis"],"content":"RDB 的优点: RDB是一种表示某个即时点的Redis数据的紧凑文件。RDB文件适合用于备份。例如，你可能想要每小时归档最近24小时的RDB文件，每天保存近30天的RDB快照。这允许你很容易的恢复不同版本的数据集以容灾。 RDB非常适合于灾难恢复，作为一个紧凑的单一文件，可以被传输到远程的数据中心，或者是Amazon S3(可能得加密)。 RDB最大化了Redis的性能，因为Redis父进程持久化时唯一需要做的是启动(fork)一个子进程，由子进程完成所有剩余工作。父进程实例不需要执行像磁盘IO这样的操作。 RDB在重启保存了大数据集的实例时比AOF要快。 ","date":"2021-04-26","objectID":"/redis%E6%8C%81%E4%B9%85%E5%8C%96/:3:1","tags":["持久化"],"title":"Redis持久化-RDB/AOF","uri":"/redis%E6%8C%81%E4%B9%85%E5%8C%96/"},{"categories":["Redis"],"content":"RDB 的缺点 当你需要在Redis停止工作(例如停电)时最小化数据丢失，RDB可能不太好。你可以配置不同的保存点(save point)来保存RDB文件(例如，至少5分钟和对数据集100次写之后，但是你可以有多个保存点)。然而，你通常每隔5分钟或更久创建一个RDB快照，所以一旦Redis因为任何原因没有正确关闭而停止工作，你就得做好最近几分钟数据丢失的准备了。 RDB需要经常调用fork()子进程来持久化到磁盘。如果数据集很大的话，fork()比较耗时，结果就是，当数据集非常大并且CPU性能不够强大的话，Redis会停止服务客户端几毫秒甚至一秒。AOF也需要fork()，但是你可以调整多久频率重写日志而不会有损(trade-off)持久性(durability)。 ","date":"2021-04-26","objectID":"/redis%E6%8C%81%E4%B9%85%E5%8C%96/:3:2","tags":["持久化"],"title":"Redis持久化-RDB/AOF","uri":"/redis%E6%8C%81%E4%B9%85%E5%8C%96/"},{"categories":["Redis"],"content":"AOF 的优点: 使用AOF Redis会更具有可持久性(durable)：你可以有很多不同的fsync策略：没有fsync，每秒fsync，每次请求时fsync。使用默认的每秒fsync策略，写性能也仍然很不错(fsync是由后台线程完成的，主线程继续努力地执行写请求)，即便你也就仅仅只损失一秒钟的写数据。 AOF日志是一个追加文件，所以不需要定位，在断电时也没有损坏问题。即使由于某种原因文件末尾是一个写到一半的命令(磁盘满或者其他原因),redis-check-aof工具也可以很轻易的修复。 当AOF文件变得很大时，Redis会自动在后台进行重写。重写是绝对安全的，因为Redis继续往旧的文件中追加，使用创建当前数据集所需的最小操作集合来创建一个全新的文件，一旦第二个文件创建完毕，Redis就会切换这两个文件，并开始往新文件追加。 AOF文件里面包含一个接一个的操作，以易于理解和解析的格式存储。你也可以轻易的导出一个AOF文件。例如，即使你不小心错误地使用FLUSHALL命令清空一切，如果此时并没有执行重写，你仍然可以保存你的数据集，你只要停止服务器，删除最后一条命令，然后重启Redis就可以。 ","date":"2021-04-26","objectID":"/redis%E6%8C%81%E4%B9%85%E5%8C%96/:3:3","tags":["持久化"],"title":"Redis持久化-RDB/AOF","uri":"/redis%E6%8C%81%E4%B9%85%E5%8C%96/"},{"categories":["Redis"],"content":"AOF 的缺点: 对同样的数据集，AOF文件通常要大于等价的RDB文件。 AOF可能比RDB慢，这取决于准确的fsync策略。通常fsync设置为每秒一次的话性能仍然很高，如果关闭fsync，即使在很高的负载下也和RDB一样的快。不过，即使在很大的写负载情况下，RDB还是能提供能好的最大延迟保证。 在过去，我们经历了一些针对特殊命令(例如，像BRPOPLPUSH这样的阻塞命令)的罕见bug，导致在数据加载时无法恢复到保存时的样子。这些bug很罕见，我们也在测试套件中进行了测试，自动随机创造复杂的数据集，然后加载它们以检查一切是否正常，但是，这类bug几乎不可能出现在RDB持久化中。为了说得更清楚一点：Redis AOF是通过递增地更新一个已经存在的状态，像MySQL或者MongoDB一样，而RDB快照是一次又一次地从头开始创造一切，概念上更健壮。但是，1)要注意Redis每次重写AOF时都是以当前数据集中的真实数据从头开始，相对于一直追加的AOF文件(或者一次重写读取老的AOF文件而不是读内存中的数据)对bug的免疫力更强。2)我们还没有收到一份用户在真实世界中检测到崩溃的报告。 ","date":"2021-04-26","objectID":"/redis%E6%8C%81%E4%B9%85%E5%8C%96/:3:4","tags":["持久化"],"title":"Redis持久化-RDB/AOF","uri":"/redis%E6%8C%81%E4%B9%85%E5%8C%96/"},{"categories":["Redis"],"content":"4. 备份Redis数据库建议 创建一个定时任务(cron job)，每隔一个小时创建一个RDB快照到一个目录，每天的快照放在不同目录。 每次定时脚本运行时，务必使用find命令来删除旧的快照：例如，你可以保存最近48小时内的每小时快照，一到两个月的内的每天快照。注意命名快照时加上日期时间信息。 至少每天一次将你的RDB快照传输到你的数据中心之外，或者至少传输到运行你的Redis实例的物理机之外。 ","date":"2021-04-26","objectID":"/redis%E6%8C%81%E4%B9%85%E5%8C%96/:4:0","tags":["持久化"],"title":"Redis持久化-RDB/AOF","uri":"/redis%E6%8C%81%E4%B9%85%E5%8C%96/"},{"categories":["Redis"],"content":"Redis-fork-cow-引申linux系统管道","date":"2021-04-25","objectID":"/redis-linux%E7%B3%BB%E7%BB%9F%E7%AE%A1%E9%81%93-fork-copyonwrite/","tags":["Redis","linux","管道","fork"],"title":"Redis-fork-cow-引申linux系统管道","uri":"/redis-linux%E7%B3%BB%E7%BB%9F%E7%AE%A1%E9%81%93-fork-copyonwrite/"},{"categories":["Redis"],"content":"linux系统管道 ","date":"2021-04-25","objectID":"/redis-linux%E7%B3%BB%E7%BB%9F%E7%AE%A1%E9%81%93-fork-copyonwrite/:0:0","tags":["Redis","linux","管道","fork"],"title":"Redis-fork-cow-引申linux系统管道","uri":"/redis-linux%E7%B3%BB%E7%BB%9F%E7%AE%A1%E9%81%93-fork-copyonwrite/"},{"categories":["Redis"],"content":"1. 管道符 1，衔接，前一个命令的输出作为后一个命令的输入 2，管道会触发创建【子进程】 ","date":"2021-04-25","objectID":"/redis-linux%E7%B3%BB%E7%BB%9F%E7%AE%A1%E9%81%93-fork-copyonwrite/:1:0","tags":["Redis","linux","管道","fork"],"title":"Redis-fork-cow-引申linux系统管道","uri":"/redis-linux%E7%B3%BB%E7%BB%9F%E7%AE%A1%E9%81%93-fork-copyonwrite/"},{"categories":["Redis"],"content":"2. 环境变量，父子进程的变量空间 进阶思想，父进程其实可以让子进程看到数据！ linux中 export的环境变量，子进程的修改不会破坏父进程 父进程的修改也不会破坏子进程 ","date":"2021-04-25","objectID":"/redis-linux%E7%B3%BB%E7%BB%9F%E7%AE%A1%E9%81%93-fork-copyonwrite/:2:0","tags":["Redis","linux","管道","fork"],"title":"Redis-fork-cow-引申linux系统管道","uri":"/redis-linux%E7%B3%BB%E7%BB%9F%E7%AE%A1%E9%81%93-fork-copyonwrite/"},{"categories":["Redis"],"content":"3. fork() 1，速度：快 2，空间：小 ","date":"2021-04-25","objectID":"/redis-linux%E7%B3%BB%E7%BB%9F%E7%AE%A1%E9%81%93-fork-copyonwrite/:3:0","tags":["Redis","linux","管道","fork"],"title":"Redis-fork-cow-引申linux系统管道","uri":"/redis-linux%E7%B3%BB%E7%BB%9F%E7%AE%A1%E9%81%93-fork-copyonwrite/"},{"categories":["Redis"],"content":"4. copy on write 写时复制 - 加快创建子进程速度 创建子进程并不发生复制，只有在想修改数据的时候才会去定向复制一部分数据。 优势：创建进程变快，同时根据经验，子进程不可能把父进程所有数据都改一遍。 主要是针对**指针**的操作 ","date":"2021-04-25","objectID":"/redis-linux%E7%B3%BB%E7%BB%9F%E7%AE%A1%E9%81%93-fork-copyonwrite/:4:0","tags":["Redis","linux","管道","fork"],"title":"Redis-fork-cow-引申linux系统管道","uri":"/redis-linux%E7%B3%BB%E7%BB%9F%E7%AE%A1%E9%81%93-fork-copyonwrite/"},{"categories":["Redis"],"content":"Redis-Module-Bloom-白名单机制","date":"2021-04-25","objectID":"/redis-module-redisbloom/","tags":["Redis","Bloom","布谷鸟","过滤器"],"title":"Redis-Module-Bloom-白名单机制","uri":"/redis-module-redisbloom/"},{"categories":["Redis"],"content":"Redis-Module-Bloom-白名单机制 位图的最常见场景之一: 大数据下去重过滤功能. ","date":"2021-04-25","objectID":"/redis-module-redisbloom/:0:0","tags":["Redis","Bloom","布谷鸟","过滤器"],"title":"Redis-Module-Bloom-白名单机制","uri":"/redis-module-redisbloom/"},{"categories":["Redis"],"content":"1. Why 你有啥？有的数据都拿到一个集合里，把用户搜索的和你已有的做一个比对，如果没找到就不用去数据库了。 但是像淘宝这种网站，本身数据库的数据就已经需要分而治之了，内存数据库更难以实现了，所以诞生了布隆控制器。 （有点类似于白名单） 解决缓存穿透问题 ","date":"2021-04-25","objectID":"/redis-module-redisbloom/:1:0","tags":["Redis","Bloom","布谷鸟","过滤器"],"title":"Redis-Module-Bloom-白名单机制","uri":"/redis-module-redisbloom/"},{"categories":["Redis"],"content":"2. What ","date":"2021-04-25","objectID":"/redis-module-redisbloom/:2:0","tags":["Redis","Bloom","布谷鸟","过滤器"],"title":"Redis-Module-Bloom-白名单机制","uri":"/redis-module-redisbloom/"},{"categories":["Redis"],"content":"原理： 布隆过滤器原理是通过多个 hash 函数, 将结果对应的位设为1, 所以它能做到 100%的去重. 虽然会误判, 但是在合理的设计的前提下, 误判率是可以接受的. 实现代码： 牺牲数据的精度，换取空间效率。会出现不同的值算出来的值是一样的情况。 ","date":"2021-04-25","objectID":"/redis-module-redisbloom/:2:1","tags":["Redis","Bloom","布谷鸟","过滤器"],"title":"Redis-Module-Bloom-白名单机制","uri":"/redis-module-redisbloom/"},{"categories":["Redis"],"content":"缺点： 首先它的查询性能相对较弱, 它是用 hash 函数在位图上不同的点跳跃探测, 很难利用 cpu 缓存. 第二它不支持删除, 假如邮箱a 的 hash 结果分别是 1 3 7, 邮箱 b 的结果是 2 6 7. 那么在删除邮箱a 的结果之后, 邮箱 b 也会被重新认为是不存在, 因为第 7 位的值是 0. 这一点布隆过滤器也很无奈.当位图拥挤到一定程度, 只能选择重建整个位图. 存在误判概率 ","date":"2021-04-25","objectID":"/redis-module-redisbloom/:2:2","tags":["Redis","Bloom","布谷鸟","过滤器"],"title":"Redis-Module-Bloom-白名单机制","uri":"/redis-module-redisbloom/"},{"categories":["Redis"],"content":"3. How ","date":"2021-04-25","objectID":"/redis-module-redisbloom/:3:0","tags":["Redis","Bloom","布谷鸟","过滤器"],"title":"Redis-Module-Bloom-白名单机制","uri":"/redis-module-redisbloom/"},{"categories":["Redis"],"content":"1. 下载，编译，并加载布隆过滤器 # 下载bloom模块并编译 wget https://github.com/RedisBloom/RedisBloom/archive/refs/heads/master.zip unzip master.zip make生成redisbloom.so扩展库 # 启动redis服务 service redis_6379 stop [root@localhost bin]# ./redis-server /etc/redis/6379.conf --loadmodule /opt/soft/redis/redisbloom.so [root@localhost bin]# ps -ef |grep redis root 29460 1 0 00:10 ? 00:00:00 ./redis-server 127.0.0.1:6379 # 连接 [root@localhost bin]# redis-cli 127.0.0.1:6379\u003e BF.LOADCHUNK key ...options... 可显示bf扩展关键字 注意加载模块时配置绝对路径 ","date":"2021-04-25","objectID":"/redis-module-redisbloom/:3:1","tags":["Redis","Bloom","布谷鸟","过滤器"],"title":"Redis-Module-Bloom-白名单机制","uri":"/redis-module-redisbloom/"},{"categories":["Redis"],"content":"2. 布隆过滤器的思路：小空间解决大量数据匹配问题 bitmap二进制位进行代表，会使得体积变得很小 **所有映射函数的值都是1则进行穿透，有一个映射函数遇到0就不往下查询了** 运算的复杂度 + 空间 换取 查询成本 概率解决问题，不可能百分百阻挡，未阻挡\u003c1%。函数的数量和bitmap数组的宽度需要调整。 引申两点： 数据库增加了新元素，需完成元素对bloom的添加 涉及到双写问题 缓存雪崩解决方法：缓存不设置相同的超时时间，使用定时任务定期进行更新。 ","date":"2021-04-25","objectID":"/redis-module-redisbloom/:3:2","tags":["Redis","Bloom","布谷鸟","过滤器"],"title":"Redis-Module-Bloom-白名单机制","uri":"/redis-module-redisbloom/"},{"categories":["Redis"],"content":"4. 发展 bloom -\u003e counting bloom -\u003e cuckoo 布谷鸟过滤器 bloom过滤器问题： 首先它的查询性能相对较弱, 它是用 hash 函数在位图上不同的点跳跃探测, 很难利用 cpu 缓存. 第二它不支持删除, 假如邮箱a 的 hash 结果分别是 1 3 7, 邮箱 b 的结果是 2 6 7. 那么在删除邮箱a 的结果之后, 邮箱 b 也会被重新认为是不存在, 因为第 7 位的值是 0. 这一点布隆过滤器也很无奈.当位图拥挤到一定程度, 只能选择重建整个位图. ","date":"2021-04-25","objectID":"/redis-module-redisbloom/:4:0","tags":["Redis","Bloom","布谷鸟","过滤器"],"title":"Redis-Module-Bloom-白名单机制","uri":"/redis-module-redisbloom/"},{"categories":["Redis"],"content":"counting bloom： 原理：把位图的位 升级为计数器(Counter). 添加元素, 就给对应的Counter分别+1; 删除元素, 就给对应的Counter分别减一. 用多出几倍存储空间的代价, 来实现删除功能. 虽然实现了功能, 但是不够完美. ","date":"2021-04-25","objectID":"/redis-module-redisbloom/:4:1","tags":["Redis","Bloom","布谷鸟","过滤器"],"title":"Redis-Module-Bloom-白名单机制","uri":"/redis-module-redisbloom/"},{"categories":["Redis"],"content":"Cuckoo filter: 论文地址 首先要说明布谷鸟过滤器并不是使用位图实现的, 而是一维数组. 它所存储的是数据的指纹(fingerprint). 布谷鸟过滤器使用两个 hash 算法将新来的元素映射到数组的两个位置. 如果两个位置中有一个位置位空, 那么就可以将元素直接放进去. 但是如果这两个位置都满了, 它就会随机踢走一个, 然后自己霸占了这个位置. 正如布谷鸟那样, 把蛋下到其它鸟的窝里. 这也是得名的由来. 但它并不是像布谷鸟那样, 管杀不管埋, 还会为这个被踢走的数据, 找一个新家. 这里看一下它的公式, Cuckoo filter中只采用两个哈希映射函数 H1 和 H2，H3用于计算数据的 fingerprint. 他们的关系如下 H3(key) = key’s fingerprint = hash(key) H1(key) = hash1(key) H2(key) = H1(key) ^ H1(key’s fingerprint) // 异或 从上面的公式中可以看出，当我们知道 fingerprint 和 H1(key)，就可以直接算出 H2(key)。同样如果我们知道 H2(key) 和 fpfingerprint 也可以直接算出H1(key) —- 对偶性. 通过 fingerprint 和当前位置, 算出对应的另一个巢, 然后安放这个可怜的数据. 如果另一个巢仍然有数据, 那就为受害者继续寻找下一个巢. 但也有问题, 假如数组太过拥挤, 踢了几十次仍然没有找到空缺的巢, 那就需要为数组扩容了. 不过原生的布谷鸟过滤器空间利用率并不高, 大约 50%. 改良的方案之一是增加 hash 函数, 让每个元素不止有两个巢, 这样可以大大降低碰撞的概率, 将空间利用率提高到 95% 左右. 还有个方案是给每个位置上挂多个巢, 这样不会马上就挤来挤去. 也能大大降低碰撞概率, 空间利用率虽然比第一种改良方案稍低(约为 85%), 但cpu 缓存的利用率会提高不少. 甚至还可以将两种方案结合, 据说空间利用率高达99%. 了不起的数字. 要删除也很简单, 找到对应位置的指纹信息删除即可. 但布谷鸟过滤器有一个明显的弱点, 无法对同一个数据连续插入! 刚才也说到了, 假如数组太拥挤, 碰撞多次仍然未找到空缺的巢, 那就需要扩容了. 那么连续插入同一个数据, 马上就触发了扩容. 而且因为存储的只是一个字节的指纹信息, 也很难判断插入的数据和位置上的数据, 是不是同一个数据. 算法论文上也有说明, 支持删除, 不支持同一个数据多次插入. 要确保每一个元素不会被插入多次(kb+1). k 是指 hash 函数的个数 2，b是指单个位置上的座位数. 也就是说原生布谷鸟过滤器, 不能超过 3. 布谷鸟问题： 循环挤兑问题；插入重复数据不能超过 hash函数个数 * 每个数组包含的子数组个数 + 1次，想实现这点还需要另外一层数据结构来进行维护次数，增加了开销。而且如果一个指纹使用一个字节，只有256种可能性，会出现不同数据相同指纹的情况，也会出现一定概率的误判情况。 鸠占鹊巢的次数有限制，到一定次数后，会进行数组扩容；类似于hashmap，达到0.75的时候进行扩容 删除功能缺陷：一个指纹使用一个字节，只有256种可能性，也有不同数据相同指纹的情况，会有误删除其他数据的情况发生。 优化方法： hash函数个数，可以有多个位置可以选择 1嵌套内部子数组 以通过调整指纹信息的保存量来降低误判情况，如在上面的实现中，指纹信息是 1byte 保存8位信息误判概率是0.03，当指纹信息增加到 2bytes 保存16位信息误判概率会降低至 0.0001。 ","date":"2021-04-25","objectID":"/redis-module-redisbloom/:4:2","tags":["Redis","Bloom","布谷鸟","过滤器"],"title":"Redis-Module-Bloom-白名单机制","uri":"/redis-module-redisbloom/"},{"categories":["Redis"],"content":"5. 使用场景 ","date":"2021-04-25","objectID":"/redis-module-redisbloom/:5:0","tags":["Redis","Bloom","布谷鸟","过滤器"],"title":"Redis-Module-Bloom-白名单机制","uri":"/redis-module-redisbloom/"},{"categories":["Redis"],"content":"黑名单： 视频网站推送视频 ","date":"2021-04-25","objectID":"/redis-module-redisbloom/:5:1","tags":["Redis","Bloom","布谷鸟","过滤器"],"title":"Redis-Module-Bloom-白名单机制","uri":"/redis-module-redisbloom/"},{"categories":["Redis"],"content":"白名单： 允许转载 没有最好的技术，只有最适合的技术，需要根据技术的优缺点结合现有的使用场景进行选型。 ","date":"2021-04-25","objectID":"/redis-module-redisbloom/:5:2","tags":["Redis","Bloom","布谷鸟","过滤器"],"title":"Redis-Module-Bloom-白名单机制","uri":"/redis-module-redisbloom/"},{"categories":["Linux"],"content":"awk命令","date":"2021-04-25","objectID":"/awk/","tags":["awk"],"title":"awk命令","uri":"/awk/"},{"categories":["Linux"],"content":"AWK awk是处理文本文件的一个应用程序，几乎所有 Linux 系统都自带这个程序。 它依次处理文件的每一行，并读取里面的每一个字段。对于日志、CSV 那样的每行格式相同的文本文件，awk可能是最方便的工具。 awk其实不仅仅是工具软件，还是一种编程语言。不过，本文只介绍它的命令行用法，对于大多数场合，应该足够用了。 ","date":"2021-04-25","objectID":"/awk/:0:0","tags":["awk"],"title":"awk命令","uri":"/awk/"},{"categories":["Linux"],"content":"一、基本用法 awk的基本用法就是下面的形式。 # 格式 $ awk 动作 文件名 # 示例 $ awk '{print $0}' demo.txt 上面示例中，demo.txt是awk所要处理的文本文件。前面单引号内部有一个大括号，里面就是每一行的处理动作print $0。其中，print是打印命令，$0代表当前行，因此上面命令的执行结果，就是把每一行原样打印出来。 下面，我们先用标准输入（stdin）演示上面这个例子。 $ echo 'this is a test' | awk '{print $0}' this is a test 上面代码中，print $0就是把标准输入this is a test，重新打印了一遍。 awk会根据空格和制表符，将每一行分成若干字段，依次用$1、$2、$3代表第一个字段、第二个字段、第三个字段等等。 $ echo 'this is a test' | awk '{print $3}' a 上面代码中，$3代表this is a test的第三个字段a。 下面，为了便于举例，我们把/etc/passwd文件保存成demo.txt。 root❌0:0:root:/root:/usr/bin/zsh daemon❌1:1:daemon:/usr/sbin:/usr/sbin/nologin bin❌2:2:bin:/bin:/usr/sbin/nologin sys❌3:3:sys:/dev:/usr/sbin/nologin sync❌4:65534:sync:/bin:/bin/sync 这个文件的字段分隔符是冒号（:），所以要用-F参数指定分隔符为冒号。然后，才能提取到它的第一个字段。 $ awk -F ':' '{ print $1 }' demo.txt root daemon bin sys sync ","date":"2021-04-25","objectID":"/awk/:1:0","tags":["awk"],"title":"awk命令","uri":"/awk/"},{"categories":["Linux"],"content":"二、变量 除了$ + 数字表示某个字段，awk还提供其他一些变量。 变量NF表示当前行有多少个字段，因此$NF就代表最后一个字段。 $ echo 'this is a test' | awk '{print $NF}' test $(NF-1)代表倒数第二个字段。 $ awk -F ':' '{print $1, $(NF-1)}' demo.txt root /root daemon /usr/sbin bin /bin sys /dev sync /bin 上面代码中，print命令里面的逗号，表示输出的时候，两个部分之间使用空格分隔。 变量NR表示当前处理的是第几行。 $ awk -F ':' '{print NR \") \" $1}' demo.txt 1) root 2) daemon 3) bin 4) sys 5) sync 上面代码中，print命令里面，如果原样输出字符，要放在双引号里面。 awk的其他内置变量如下。 FILENAME：当前文件名 FS：字段分隔符，默认是空格和制表符。 RS：行分隔符，用于分割每一行，默认是换行符。 OFS：输出字段的分隔符，用于打印时分隔字段，默认为空格。 ORS：输出记录的分隔符，用于打印时分隔记录，默认为换行符。 OFMT：数字输出的格式，默认为％.6g。 ","date":"2021-04-25","objectID":"/awk/:2:0","tags":["awk"],"title":"awk命令","uri":"/awk/"},{"categories":["Linux"],"content":"三、函数 awk还提供了一些内置函数，方便对原始数据的处理。 函数toupper()用于将字符转为大写。 $ awk -F ':' '{ print toupper($1) }' demo.txt ROOT DAEMON BIN SYS SYNC 上面代码中，第一个字段输出时都变成了大写。 其他常用函数如下。 tolower()：字符转为小写。 length()：返回字符串长度。 substr()：返回子字符串。 sin()：正弦。 cos()：余弦。 sqrt()：平方根。 rand()：随机数。 awk内置函数的完整列表，可以查看手册。 ","date":"2021-04-25","objectID":"/awk/:3:0","tags":["awk"],"title":"awk命令","uri":"/awk/"},{"categories":["Linux"],"content":"四、条件 awk允许指定输出条件，只输出符合条件的行。 输出条件要写在动作的前面。 $ awk '条件 动作' 文件名 请看下面的例子。 $ awk -F ':' '/usr/ {print $1}' demo.txt root daemon bin sys 上面代码中，print命令前面是一个正则表达式，只输出包含usr的行。 下面的例子只输出奇数行，以及输出第三行以后的行。 # 输出奇数行 $ awk -F ':' 'NR % 2 == 1 {print $1}' demo.txt root bin sync # 输出第三行以后的行 $ awk -F ':' 'NR \u003e3 {print $1}' demo.txt sys sync 下面的例子输出第一个字段等于指定值的行。 $ awk -F ':' '$1 == \"root\" {print $1}' demo.txt root $ awk -F ':' '$1 == \"root\" || $1 == \"bin\" {print $1}' demo.txt root bin ","date":"2021-04-25","objectID":"/awk/:4:0","tags":["awk"],"title":"awk命令","uri":"/awk/"},{"categories":["Linux"],"content":"五、if 语句 awk提供了if结构，用于编写复杂的条件。 $ awk -F ':' '{if ($1 \u003e \"m\") print $1}' demo.txt root sys sync 上面代码输出第一个字段的第一个字符大于m的行。 if结构还可以指定else部分。 $ awk -F ':' '{if ($1 \u003e \"m\") print $1; else print \"---\"}' demo.txt root --- --- sys sync ","date":"2021-04-25","objectID":"/awk/:5:0","tags":["awk"],"title":"awk命令","uri":"/awk/"},{"categories":["Linux"],"content":"六、参考链接 An Awk tutorial by Example, Greg Grothaus 30 Examples for Awk Command in Text Processing, Mokhtar Ebrahim （完） ","date":"2021-04-25","objectID":"/awk/:6:0","tags":["awk"],"title":"awk命令","uri":"/awk/"},{"categories":["Linux"],"content":"文档信息 版权声明：自由转载-非商用-非衍生-保持署名（创意共享3.0许可证） ","date":"2021-04-25","objectID":"/awk/:6:1","tags":["awk"],"title":"awk命令","uri":"/awk/"},{"categories":["route"],"content":"java技术栈发展路线","date":"2021-04-25","objectID":"/%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/","tags":["java","路线"],"title":"java技术栈发展路线","uri":"/%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"},{"categories":["route"],"content":"To be continued ","date":"2021-04-25","objectID":"/%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/:0:0","tags":["java","路线"],"title":"java技术栈发展路线","uri":"/%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"},{"categories":["Redis"],"content":"Redis缓存和数据库区别","date":"2021-04-25","objectID":"/redis%E7%BC%93%E5%AD%98%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E9%80%89%E5%9E%8B/","tags":["缓存"],"title":"Redis缓存和数据库区别","uri":"/redis%E7%BC%93%E5%AD%98%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E9%80%89%E5%9E%8B/"},{"categories":["Redis"],"content":"Redis 作为缓存和数据库区别 ","date":"2021-04-25","objectID":"/redis%E7%BC%93%E5%AD%98%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E9%80%89%E5%9E%8B/:0:0","tags":["缓存"],"title":"Redis缓存和数据库区别","uri":"/redis%E7%BC%93%E5%AD%98%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E9%80%89%E5%9E%8B/"},{"categories":["Redis"],"content":"什么是缓存： 1. 数据“不重要”，**不是全量数据** 2. 应该随着访问变化，**热数据** 缓存常见问题： 击穿 雪崩 穿透 一致性（双写） 技术是易于人的使用！ 理论是极其复杂！ 缓存：数据可以丢 急速！ 数据库：数据绝对不能丢的 速度+持久性 掉电易失！ ","date":"2021-04-25","objectID":"/redis%E7%BC%93%E5%AD%98%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E9%80%89%E5%9E%8B/:1:0","tags":["缓存"],"title":"Redis缓存和数据库区别","uri":"/redis%E7%BC%93%E5%AD%98%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E9%80%89%E5%9E%8B/"},{"categories":["Redis"],"content":"问题：怎么随着业务变化，只保留热数据，因为内存大小是有限的（瓶颈）？ 业务逻辑 —\u003e 有限期 expire 业务运转 —\u003e 业务的变化，淘汰冷数据 —\u003e 置换算法 内存多大呢？如何限制？ Redis 配置文件： [root@localhost ~]# cat /etc/redis/6379.conf |egrep '^[a-zA-Z]|##' ## Generated by install_server.sh ## 导入基础配置 ################################## INCLUDES ################################### ################################## MODULES ##################################### 加载绝对路径下的扩展库文件，也可以手动加在启动命令后面 --loadmodule loadmodule /opt/soft/redis/redisbloom.so ################################## NETWORK ##################################### 绑定端口 bind 127.0.0.1 protected-mode yes port 6379 tcp-backlog 511 timeout 0 tcp-keepalive 300 ################################# TLS/SSL ##################################### ################################# GENERAL 全局 ##################################### 是否为后台守护模式 daemonize yes supervised no 进程pid文件，判断程序是否在运行 pidfile /var/run/redis_6379.pid 日志级别 loglevel notice 日志目录 logfile /var/log/redis_6379.log 默认库 databases 16 always-show-logo yes ################################ SNAPSHOTTING RDP ################################ save 900 1 save 300 10 save 60 10000 stop-writes-on-bgsave-error yes rdbcompression yes rdbchecksum yes dbfilename dump.rdb rdb-del-sync-files no dir /var/lib/redis/6379 ################################# REPLICATION 主从复制 ################################# replica-serve-stale-data yes replica-read-only yes repl-diskless-sync no repl-diskless-sync-delay 5 repl-diskless-load disabled repl-disable-tcp-nodelay no replica-priority 100 ############################### KEYS TRACKING ################################# ################################## SECURITY 安全 ################################### 添加ACL users 重命名命令flushdb/flushall rename-command CONFIG \"\" acllog-max-len 128 ################################### CLIENTS #################################### 最大允许链接数 # maxclients 10000 ############################## MEMORY MANAGEMENT 内存管理 ################################ 最大内存1-10G范围，太大后面数据持久化存储迁移成本很大 # MAXMEMORY POLICY # maxmemory \u003cbytes\u003e LRU Least Recently Used 最近最少使用算法 volatile（只针对有有效期的key） # volatile-lru -\u003e Evict using approximated LRU, only keys with an expire set. # allkeys-lru -\u003e Evict any key using approximated LRU. LFU Least Frequency Used 最少使用置换算法 # volatile-lfu -\u003e Evict using approximated LFU, only keys with an expire set. # allkeys-lfu -\u003e Evict any key using approximated LFU. 随机 # volatile-random -\u003e Remove a random key having an expire set. # allkeys-random -\u003e Remove a random key, any key. 比较时间成本，复杂度太高 # volatile-ttl -\u003e Remove the key with the nearest expire time (minor TTL) # noeviction -\u003e Don't evict anything, just return an error on write operations. ############################# LAZY FREEING #################################### lazyfree-lazy-eviction no lazyfree-lazy-expire no lazyfree-lazy-server-del no replica-lazy-flush no lazyfree-lazy-user-del no ################################ THREADED I/O ################################# ############################## APPEND ONLY MODE ############################### appendonly no appendfilename \"appendonly.aof\" appendfsync everysec no-appendfsync-on-rewrite no auto-aof-rewrite-percentage 100 auto-aof-rewrite-min-size 64mb aof-load-truncated yes aof-use-rdb-preamble yes ################################ LUA SCRIPTING ############################### lua-time-limit 5000 ################################ REDIS CLUSTER ############################### ########################## CLUSTER DOCKER/NAT support ######################## ################################## SLOW LOG ################################### slowlog-log-slower-than 10000 slowlog-max-len 128 ################################ LATENCY MONITOR ############################## latency-monitor-threshold 0 ############################# EVENT NOTIFICATION ############################## notify-keyspace-events \"\" ############################### GOPHER SERVER ################################# ############################### ADVANCED CONFIG ############################### hash-max-ziplist-entries 51","date":"2021-04-25","objectID":"/redis%E7%BC%93%E5%AD%98%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E9%80%89%E5%9E%8B/:2:0","tags":["缓存"],"title":"Redis缓存和数据库区别","uri":"/redis%E7%BC%93%E5%AD%98%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E9%80%89%E5%9E%8B/"},{"categories":["Redis"],"content":"1. 页面置换算法解决淘汰冷数据问题 evict 驱逐 noeviction 不进行置换的 LRU（Recently）最近时间 LFU（Frequency）次数 如何选择看栈底，如果有大量配置了有效期，优先使用volatile，否则使用allkeys ","date":"2021-04-25","objectID":"/redis%E7%BC%93%E5%AD%98%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E9%80%89%E5%9E%8B/:2:1","tags":["缓存"],"title":"Redis缓存和数据库区别","uri":"/redis%E7%BC%93%E5%AD%98%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E9%80%89%E5%9E%8B/"},{"categories":["Redis"],"content":"2. 过期时间如何设置 ","date":"2021-04-25","objectID":"/redis%E7%BC%93%E5%AD%98%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E9%80%89%E5%9E%8B/:2:2","tags":["缓存"],"title":"Redis缓存和数据库区别","uri":"/redis%E7%BC%93%E5%AD%98%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E9%80%89%E5%9E%8B/"},{"categories":["Redis"],"content":"1）倒计时：set key value [EX seconds|PX milliseconds] [NX|XX] [KEEPTTL] 127.0.0.1:6379\u003e set k1 111 ex 10 OK 127.0.0.1:6379\u003e get k1 \"111\" 127.0.0.1:6379\u003e ttl k1 (integer) 5 127.0.0.1:6379\u003e ttl k1 (integer) 3 127.0.0.1:6379\u003e ttl k1 (integer) 2 127.0.0.1:6379\u003e ttl k1 (integer) -2 127.0.0.1:6379\u003e get k1 (nil) 127.0.0.1:6379\u003e set k1 111 OK 127.0.0.1:6379\u003e ttl k1 (integer) -1 ","date":"2021-04-25","objectID":"/redis%E7%BC%93%E5%AD%98%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E9%80%89%E5%9E%8B/:2:3","tags":["缓存"],"title":"Redis缓存和数据库区别","uri":"/redis%E7%BC%93%E5%AD%98%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E9%80%89%E5%9E%8B/"},{"categories":["Redis"],"content":"2）定时：EXPIREAT key timestamp 127.0.0.1:6379\u003e set k1 111 OK 127.0.0.1:6379\u003e EXPIREAT k1 1619379999 (integer) 1 127.0.0.1:6379\u003e get k1 \"111\" 127.0.0.1:6379\u003e ttl k1 (integer) 17591 ttl值的三个状态：-1 持久 -2 超时 不会随着访问而延长有效期 重新写会重置有效期 需要业务逻辑进行补全 ","date":"2021-04-25","objectID":"/redis%E7%BC%93%E5%AD%98%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E9%80%89%E5%9E%8B/:2:4","tags":["缓存"],"title":"Redis缓存和数据库区别","uri":"/redis%E7%BC%93%E5%AD%98%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E9%80%89%E5%9E%8B/"},{"categories":["Redis"],"content":"3. 过期淘汰的方式 Redis 的 key 有两种过期淘汰的方式：被动方式、主动方式。 被动过期：用户访问某个 key 的时候，key 被发现过期。 当然，被动方式过期对于那些永远也不会再次被访问的 key 并没有效果。不管怎么，这些 key 都应被过期淘汰，所以 Redis 周期性主动随机检查一部分被设置生存时间的 key，那些已经过期的 key 会被从 key 空间中删除。 Redis每秒执行10次下面的操作： 从带有生存时间的 key 的集合中随机选 20 进行检查。 删除所有过期的key。 如20里面有超过25%的key过期，立刻继续执行步骤1。 这是一个狭义概率算法，我们假设我们选出来的样本 key 代表整个 key 空间，我们继续过期检查直到过期 key 的比例降到 25% 以下。 这意味着在任意时刻已经过期但还占用内存的 key 的数量，最多等于每秒最多写操作的四分之一。 牺牲一部分内存，保证redis性能为王！！！ ","date":"2021-04-25","objectID":"/redis%E7%BC%93%E5%AD%98%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E9%80%89%E5%9E%8B/:2:5","tags":["缓存"],"title":"Redis缓存和数据库区别","uri":"/redis%E7%BC%93%E5%AD%98%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E9%80%89%E5%9E%8B/"},{"categories":["Redis"],"content":"Redis-Value-Hash类型","date":"2021-04-24","objectID":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8value-hash%E7%B1%BB%E5%9E%8B/","tags":["Redis"],"title":"Redis-Value-Hash类型","uri":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8value-hash%E7%B1%BB%E5%9E%8B/"},{"categories":["Redis"],"content":"Redis-Value-Hash类型 ","date":"2021-04-24","objectID":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8value-hash%E7%B1%BB%E5%9E%8B/:0:0","tags":["Redis"],"title":"Redis-Value-Hash类型","uri":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8value-hash%E7%B1%BB%E5%9E%8B/"},{"categories":["Redis"],"content":"1. Why（设计的必要性） 场景： 127.0.0.1:6379\u003e set sean:name xcg OK 127.0.0.1:6379\u003e set sean:age 18 OK 127.0.0.1:6379\u003e keys sean* 1) \"sean:name\" 2) \"sean:age\" 127.0.0.1:6379\u003e mget sean:name 1) \"xcg\" 127.0.0.1:6379\u003e mget sean:age 1) \"18\" 避免keys模式匹配查询，成本比较高 减少mget对多个key的取值，造成两次对服务器的通信成本。 ","date":"2021-04-24","objectID":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8value-hash%E7%B1%BB%E5%9E%8B/:1:0","tags":["Redis"],"title":"Redis-Value-Hash类型","uri":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8value-hash%E7%B1%BB%E5%9E%8B/"},{"categories":["Redis"],"content":"2. What/HOW命令列表 与String 类型很多操作名称类似，可以进行参考 HDEL HEXISTS HGET HGETALL HINCRBY HINCRBYFLOAT HKEYS HLEN HMGET HMSET HSET HSETNX Redis HSETNX 命令用于为哈希表中不存在的字段赋值 。 如果字段已经存在于哈希表中，操作无效。 如果 key 不存在，一个新哈希表被创建并执行 HSETNX 命令。 HVALS HSCAN redis\u003e HMSET sites google \"google.com\" redis \"redis.com.cn\" weibo \"weibo.com\" 4 \"taobao.com\" \"OK\" redis\u003e HSCAN sites 0 match \"red*\" 1) \"0\" 2) 1) \"redis\" 2) \"redis.com.cn\" ","date":"2021-04-24","objectID":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8value-hash%E7%B1%BB%E5%9E%8B/:2:0","tags":["Redis"],"title":"Redis-Value-Hash类型","uri":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8value-hash%E7%B1%BB%E5%9E%8B/"},{"categories":["Redis"],"content":"3. Where（应用场景） ​ 对field进行数值计算 ​ 对一个key快速展开其多个value值，并快速进行计算 场景：点赞，收藏，详情页 eg： 127.0.0.1:6379\u003e HMSET sean name xcg age 18 address nj OK 127.0.0.1:6379\u003e HMGET sean name age address 1) \"xcg\" 2) \"18\" 3) \"nj\" 127.0.0.1:6379\u003e HGETALL sean 1) \"name\" 2) \"xcg\" 3) \"age\" 4) \"18\" 5) \"address\" 6) \"nj\" ","date":"2021-04-24","objectID":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8value-hash%E7%B1%BB%E5%9E%8B/:3:0","tags":["Redis"],"title":"Redis-Value-Hash类型","uri":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8value-hash%E7%B1%BB%E5%9E%8B/"},{"categories":["Redis"],"content":"Redis-Value-Set集合类型","date":"2021-04-24","objectID":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-set%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B/","tags":["Redis"],"title":"Redis-Value-Set集合类型","uri":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-set%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B/"},{"categories":["Redis"],"content":"Redis-Value-Set集合类型 ","date":"2021-04-24","objectID":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-set%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B/:0:0","tags":["Redis"],"title":"Redis-Value-Set集合类型","uri":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-set%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B/"},{"categories":["Redis"],"content":"1. Why ","date":"2021-04-24","objectID":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-set%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B/:1:0","tags":["Redis"],"title":"Redis-Value-Set集合类型","uri":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-set%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B/"},{"categories":["Redis"],"content":"特点 无序 去重 ","date":"2021-04-24","objectID":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-set%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B/:1:1","tags":["Redis"],"title":"Redis-Value-Set集合类型","uri":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-set%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B/"},{"categories":["Redis"],"content":"应用场景 集合操作。求交、并集和差集 随机事件。 解决抽奖问题：10个奖品 用户\u003c10，用户中奖分为是否重复 正数去重：符合一个人只能中一个礼物的语义 负数可以重复： 几个维度： 可以使用Redis的Set数据类型跟踪一些唯一性数据，比如访问某一博客的唯一IP地址信息。对于此场景，我们仅需在每次访问该博客时将访问者的IP存入Redis中，Set数据类型会自动保证IP地址的唯一性。 充分利用Set类型的服务端聚合操作方便、高效的特性，可以用于维护数据对象之间的关联关系。比如所有购买某一电子设备的客户ID被存储在一个指定的Set中，而购买另外一种电子产品的客户ID被存储在另外一个Set中，如果此时我们想获取有哪些客户同时购买了这两种商品时，Set的intersections交集命令就可以充分发挥它的方便和效率的优势了。 ","date":"2021-04-24","objectID":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-set%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B/:1:2","tags":["Redis"],"title":"Redis-Value-Set集合类型","uri":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-set%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B/"},{"categories":["Redis"],"content":"2. What ","date":"2021-04-24","objectID":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-set%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B/:2:0","tags":["Redis"],"title":"Redis-Value-Set集合类型","uri":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-set%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B/"},{"categories":["Redis"],"content":"1. help @set SADD key member [member ...] summary: Add one or more members to a set since: 1.0.0 SCARD key summary: Get the number of members in a set since: 1.0.0 SDIFF key [key ...] summary: Subtract multiple sets since: 1.0.0 SDIFFSTORE destination key [key ...] summary: Subtract multiple sets and store the resulting set in a key since: 1.0.0 SINTER key [key ...] summary: Intersect multiple sets since: 1.0.0 SINTERSTORE destination key [key ...] summary: Intersect multiple sets and store the resulting set in a key since: 1.0.0 SISMEMBER key member summary: Determine if a given value is a member of a set since: 1.0.0 SMEMBERS key summary: Get all the members in a set since: 1.0.0 SMOVE source destination member summary: Move a member from one set to another since: 1.0.0 SPOP key [count] summary: Remove and return one or multiple random members from a set since: 1.0.0 SRANDMEMBER key [count] summary: Get one or multiple random members from a set since: 1.0.0 SREM key member [member ...] summary: Remove one or more members from a set since: 1.0.0 SSCAN key cursor [MATCH pattern] [COUNT count] summary: Incrementally iterate Set elements since: 2.8.0 SUNION key [key ...] summary: Add multiple sets since: 1.0.0 SUNIONSTORE destination key [key ...] summary: Add multiple sets and store the resulting set in a key since: 1.0.0 ","date":"2021-04-24","objectID":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-set%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B/:2:1","tags":["Redis"],"title":"Redis-Value-Set集合类型","uri":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-set%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B/"},{"categories":["Redis"],"content":"2. 文档扩展 SADD SCARD SDIFF 按传递的参数顺序进行取左差集 SDIFFSTORE STORE方法是，作者设计的细腻之处，避免多次IO的产生 SINTER SINTERSTORE SISMEMBER SMEMBERS 较消耗资源的操作 SMOVE SPOP 取出一个 SRANDMEMBER Redis SRANDMEMBER 命令仅使用key 参数，那么随机返回集合key 中的一个随机元素。 Redis 2.6开始，可以接受 count 参数，如果count是整数且小于元素的个数，返回含有 count 个不同的元素的数组，如果count是个整数且大于集合中元素的个数时，返回整个集合的所有元素，当count是负数，则会返回一个包含count的绝对值的个数元素的数组，则返回的结果集里会出现一个元素出现多次的情况。 仅提供key参数时，该命令作用类似于SPOP命令，不同的是SPOP命令会将被选择的随机元素从集合中移除，而SRANDMEMBER 仅仅是返回该随记元素，而不对原集合做任何操作。 1. 传递count参数时的行为规范 当传递了一个值为正数的count参数，返回的元素就好像从集合中移除了每个选中的元素一样（就像在宾果游戏中提取数字一样）。但是元素不会从集合中移除。所以基本上： 不会返回重复的元素。 如果count参数的值大于集合内的元素数量，此命令将会仅返回整个集合，没有额外的元素。 相反，当count参数的值为负数时，此命令的行为将发生改变，并且提取操作就像在每次提取后，重新将取出的元素放回包里一样，因此，可能返回重复的元素，以及总是会返回我们请求的数量的元素，因为我们可以一次又一次地重复相同的元素，除了当集合为空（或者不存在key）的时候，将总是会返回一个空数组。 2. 返回元素的分布 当集合中的元素数量很少时，返回元素分布远不够完美，这是因为我们使用了一个近似随机元素函数，它并不能保证良好的分布。 所使用的算法（在dict.c中实现）对哈希表桶进行采样以找到非空桶。一旦找到非空桶，由于我们在哈希表的实现中使用了链接法，因此会检查桶中的元素数量，并且选出一个随机元素。 这意味着，如果你在整个哈希表中有两个非空桶，其中一个有三个元素，另一个只有一个元素，那么其桶中单独存在的元素将以更高的概率返回。 SREM SUNION SUNIONSTORE SSCAN ","date":"2021-04-24","objectID":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-set%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B/:2:2","tags":["Redis"],"title":"Redis-Value-Set集合类型","uri":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-set%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B/"},{"categories":["Redis"],"content":"3. 分类 增删改查 集合操作 交集，并集，差集 随机事件 ","date":"2021-04-24","objectID":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-set%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B/:2:3","tags":["Redis"],"title":"Redis-Value-Set集合类型","uri":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-set%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B/"},{"categories":["Redis"],"content":"redis-Value-sorted-set类型","date":"2021-04-24","objectID":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-sorted-set%E7%B1%BB%E5%9E%8B/","tags":["Redis"],"title":"redis-Value-sorted-set类型","uri":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-sorted-set%E7%B1%BB%E5%9E%8B/"},{"categories":["Redis"],"content":"redis-Value-sorted-set类型 ","date":"2021-04-24","objectID":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-sorted-set%E7%B1%BB%E5%9E%8B/:0:0","tags":["Redis"],"title":"redis-Value-sorted-set类型","uri":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-sorted-set%E7%B1%BB%E5%9E%8B/"},{"categories":["Redis"],"content":"1. Why ","date":"2021-04-24","objectID":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-sorted-set%E7%B1%BB%E5%9E%8B/:1:0","tags":["Redis"],"title":"redis-Value-sorted-set类型","uri":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-sorted-set%E7%B1%BB%E5%9E%8B/"},{"categories":["Redis"],"content":"特点 有序 分数 scores 进行排序 ","date":"2021-04-24","objectID":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-sorted-set%E7%B1%BB%E5%9E%8B/:1:1","tags":["Redis"],"title":"redis-Value-sorted-set类型","uri":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-sorted-set%E7%B1%BB%E5%9E%8B/"},{"categories":["Redis"],"content":"2. What ","date":"2021-04-24","objectID":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-sorted-set%E7%B1%BB%E5%9E%8B/:2:0","tags":["Redis"],"title":"redis-Value-sorted-set类型","uri":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-sorted-set%E7%B1%BB%E5%9E%8B/"},{"categories":["Redis"],"content":"1. Help @sorted_set 127.0.0.1:6379\u003e help @sorted_set BZPOPMAX key [key ...] timeout summary: Remove and return the member with the highest score from one or more sorted sets, or block until one is available since: 5.0.0 BZPOPMIN key [key ...] timeout summary: Remove and return the member with the lowest score from one or more sorted sets, or block until one is available since: 5.0.0 ZADD key [NX|XX] [CH] [INCR] score member [score member ...] summary: Add one or more members to a sorted set, or update its score if it already exists since: 1.2.0 ZCARD key summary: Get the number of members in a sorted set since: 1.2.0 ZCOUNT key min max summary: Count the members in a sorted set with scores within the given values since: 2.0.0 ZINCRBY key increment member summary: Increment the score of a member in a sorted set since: 1.2.0 ZINTERSTORE destination numkeys key [key ...] [WEIGHTS weight] [AGGREGATE SUM|MIN|MAX] summary: Intersect multiple sorted sets and store the resulting sorted set in a new key since: 2.0.0 ZLEXCOUNT key min max summary: Count the number of members in a sorted set between a given lexicographical range since: 2.8.9 ZPOPMAX key [count] summary: Remove and return members with the highest scores in a sorted set since: 5.0.0 ZPOPMIN key [count] summary: Remove and return members with the lowest scores in a sorted set since: 5.0.0 ZRANGE key start stop [WITHSCORES] summary: Return a range of members in a sorted set, by index since: 1.2.0 ZRANGEBYLEX key min max [LIMIT offset count] summary: Return a range of members in a sorted set, by lexicographical range since: 2.8.9 ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count] summary: Return a range of members in a sorted set, by score since: 1.0.5 ZRANK key member summary: Determine the index of a member in a sorted set since: 2.0.0 ZREM key member [member ...] summary: Remove one or more members from a sorted set since: 1.2.0 ZREMRANGEBYLEX key min max summary: Remove all members in a sorted set between the given lexicographical range since: 2.8.9 ZREMRANGEBYRANK key start stop summary: Remove all members in a sorted set within the given indexes since: 2.0.0 ZREMRANGEBYSCORE key min max summary: Remove all members in a sorted set within the given scores since: 1.2.0 ZREVRANGE key start stop [WITHSCORES] summary: Return a range of members in a sorted set, by index, with scores ordered from high to low since: 1.2.0 ZREVRANGEBYLEX key max min [LIMIT offset count] summary: Return a range of members in a sorted set, by lexicographical range, ordered from higher to lower strings. since: 2.8.9 ZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count] summary: Return a range of members in a sorted set, by score, with scores ordered from high to low since: 2.2.0 ZREVRANK key member summary: Determine the index of a member in a sorted set, with scores ordered from high to low since: 2.0.0 ZSCAN key cursor [MATCH pattern] [COUNT count] summary: Incrementally iterate sorted sets elements and associated scores since: 2.8.0 ZSCORE key member summary: Get the score associated with the given member in a sorted set since: 1.2.0 ZUNIONSTORE destination numkeys key [key ...] [WEIGHTS weight] [AGGREGATE SUM|MIN|MAX] summary: Add multiple sorted sets and store the resulting sorted set in a new key since: 2.0.0 ","date":"2021-04-24","objectID":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-sorted-set%E7%B1%BB%E5%9E%8B/:2:1","tags":["Redis"],"title":"redis-Value-sorted-set类型","uri":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-sorted-set%E7%B1%BB%E5%9E%8B/"},{"categories":["Redis"],"content":"2. Redis 有序集合(sorted set) 命令 命令 描述 Redis Zrevrank 命令 返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序 Redis Zlexcount 命令 在有序集合中计算指定字典区间内成员数量 Redis Zunionstore 命令 计算给定的一个或多个有序集的并集，并存储在新的 key 中 Redis Zremrangebyrank 命令 移除有序集合中给定的排名区间的所有成员 Redis Zcard 命令 获取有序集合的成员数 Redis Zrem 命令 移除有序集合中的一个或多个成员 Redis Zinterstore 命令 计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中 Redis Zrank 命令 返回有序集合中指定成员的索引 Redis Zincrby 命令 有序集合中对指定成员的分数加上增量 increment Redis Zrangebyscore 命令 通过分数返回有序集合指定区间内的成员 Redis Zrangebylex 命令 通过字典区间返回有序集合的成员 Redis Zscore 命令 返回有序集中，成员的分数值 Redis Zremrangebyscore 命令 移除有序集合中给定的分数区间的所有成员 Redis Zscan 命令 迭代有序集合中的元素（包括元素成员和元素分值） Redis Zrevrangebyscore 命令 返回有序集中指定分数区间内的成员，分数从高到低排序 Redis Zremrangebylex 命令 移除有序集合中给定的字典区间的所有成员 Redis Zrevrange 命令 返回有序集中指定区间内的成员，通过索引，分数从高到底 Redis Zrange 命令 通过索引区间返回有序集合成指定区间内的成员 Redis Zcount 命令 计算在有序集合中指定区间分数的成员数 Redis Zadd 命令 向有序集合添加一个或多个成员，或者更新已存在成员的分数 ","date":"2021-04-24","objectID":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-sorted-set%E7%B1%BB%E5%9E%8B/:2:2","tags":["Redis"],"title":"redis-Value-sorted-set类型","uri":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-sorted-set%E7%B1%BB%E5%9E%8B/"},{"categories":["Redis"],"content":"3. How 在Sorted-Set中添加、删除或更新一个成员都是非常快速的操作，其时间复杂度为集合中成员数量的对数。由于Sorted-Set中的成员在集合中的位置是有序的，因此，即便是访问位于集合中部的成员也仍然是非常高效的。 ","date":"2021-04-24","objectID":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-sorted-set%E7%B1%BB%E5%9E%8B/:3:0","tags":["Redis"],"title":"redis-Value-sorted-set类型","uri":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-sorted-set%E7%B1%BB%E5%9E%8B/"},{"categories":["Redis"],"content":"1. 跳表 ","date":"2021-04-24","objectID":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-sorted-set%E7%B1%BB%E5%9E%8B/:3:1","tags":["Redis"],"title":"redis-Value-sorted-set类型","uri":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-sorted-set%E7%B1%BB%E5%9E%8B/"},{"categories":["Redis"],"content":"4. Where ","date":"2021-04-24","objectID":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-sorted-set%E7%B1%BB%E5%9E%8B/:4:0","tags":["Redis"],"title":"redis-Value-sorted-set类型","uri":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-sorted-set%E7%B1%BB%E5%9E%8B/"},{"categories":["Redis"],"content":"1. 排行榜 可以用于一个大型在线游戏的积分排行榜。每当玩家的分数发生变化时，可以执行ZADD命令更新玩家的分数，此后再通过ZRANGE命令获取积分TOPTEN的用户信息。当然我们也可以利用ZRANK命令通过username来获取玩家的排行信息。最后我们将组合使用ZRANGE和ZRANK命令快速的获取和某个玩家积分相近的其他用户的信息。 ","date":"2021-04-24","objectID":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-sorted-set%E7%B1%BB%E5%9E%8B/:4:1","tags":["Redis"],"title":"redis-Value-sorted-set类型","uri":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-sorted-set%E7%B1%BB%E5%9E%8B/"},{"categories":["Redis"],"content":"2. Sorted-Set类型还可用于构建索引数据。 ","date":"2021-04-24","objectID":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-sorted-set%E7%B1%BB%E5%9E%8B/:4:2","tags":["Redis"],"title":"redis-Value-sorted-set类型","uri":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-sorted-set%E7%B1%BB%E5%9E%8B/"},{"categories":["Redis"],"content":"redis命令手册","date":"2021-04-24","objectID":"/redis-%E5%91%BD%E4%BB%A4%E6%89%8B%E5%86%8C/","tags":["Redis"],"title":"redis命令手册","uri":"/redis-%E5%91%BD%E4%BB%A4%E6%89%8B%E5%86%8C/"},{"categories":["Redis"],"content":"redis 命令手册 ","date":"2021-04-24","objectID":"/redis-%E5%91%BD%E4%BB%A4%E6%89%8B%E5%86%8C/:0:0","tags":["Redis"],"title":"redis命令手册","uri":"/redis-%E5%91%BD%E4%BB%A4%E6%89%8B%E5%86%8C/"},{"categories":["Redis"],"content":"命令目录(使用 CTRL + F 快速查找)： Key（键） DEL DUMP EXISTS EXPIRE EXPIREAT KEYS MIGRATE MOVE OBJECT PERSIST PEXPIRE PEXPIREAT PTTL RANDOMKEY RENAME RENAMENX RESTORE SORT TTL TYPE SCAN String（字符串） APPEND BITCOUNT BITOP DECR DECRBY GET GETBIT GETRANGE GETSET INCR INCRBY INCRBYFLOAT MGET MSET MSETNX PSETEX SET SETBIT SETEX SETNX SETRANGE STRLEN Hash（哈希表） HDEL HEXISTS HGET HGETALL HINCRBY HINCRBYFLOAT HKEYS HLEN HMGET HMSET HSET HSETNX HVALS HSCAN List（列表） BLPOP BRPOP BRPOPLPUSH LINDEX LINSERT LLEN LPOP LPUSH LPUSHX LRANGE LREM LSET LTRIM RPOP RPOPLPUSH RPUSH RPUSHX Set（集合） SADD SCARD SDIFF SDIFFSTORE SINTER SINTERSTORE SISMEMBER SMEMBERS SMOVE SPOP SRANDMEMBER SREM SUNION SUNIONSTORE SSCAN SortedSet（有序集合） ZADD ZCARD ZCOUNT ZINCRBY ZRANGE ZRANGEBYSCORE ZRANK ZREM ZREMRANGEBYRANK ZREMRANGEBYSCORE ZREVRANGE ZREVRANGEBYSCORE ZREVRANK ZSCORE ZUNIONSTORE ZINTERSTORE ZSCAN Pub/Sub（发布/订阅） PSUBSCRIBE PUBLISH PUBSUB PUNSUBSCRIBE SUBSCRIBE UNSUBSCRIBE Transaction（事务） DISCARD EXEC MULTI UNWATCH WATCH Script（脚本） EVAL EVALSHA SCRIPT EXISTS SCRIPT FLUSH SCRIPT KILL SCRIPT LOAD Connection（连接） AUTH ECHO PING QUIT SELECT Server（服务器） BGREWRITEAOF BGSAVE CLIENT GETNAME CLIENT KILL CLIENT LIST CLIENT SETNAME CONFIG GET CONFIG RESETSTAT CONFIG REWRITE CONFIG SET DBSIZE DEBUG OBJECT DEBUG SEGFAULT FLUSHALL FLUSHDB INFO LASTSAVE MONITOR PSYNC SAVE SHUTDOWN SLAVEOF SLOWLOG SYNC TIME ","date":"2021-04-24","objectID":"/redis-%E5%91%BD%E4%BB%A4%E6%89%8B%E5%86%8C/:1:0","tags":["Redis"],"title":"redis命令手册","uri":"/redis-%E5%91%BD%E4%BB%A4%E6%89%8B%E5%86%8C/"},{"categories":["Redis"],"content":"文档 键空间通知（keyspace notification） 功能概览 事件的类型 配置 命令产生的通知 过期通知的发送时间 事务（transaction） 用法 事务中的错误 为什么 Redis 不支持回滚（roll back） 放弃事务 使用 check-and-set 操作实现乐观锁 了解 WATCH 使用 WATCH 实现 ZPOP Redis 脚本和事务 发布与订阅（pub/sub） 信息的格式 订阅模式 通过频道和模式接收同一条信息 订阅总数 编程示例 客户端库实现提示 复制（Replication） 复制功能的运作原理 部分重同步 配置 只读从服务器 从服务器相关配置 主服务器只在有至少 N 个从服务器的情况下，才执行写操作 通信协议（protocol） 网络层 请求 新版统一请求协议 回复 状态回复 错误回复 整数回复 批量回复 多条批量回复 多条批量回复中的空元素 多命令和流水线 内联命令 高性能 Redis 协议分析器 持久化（persistence） Redis 持久化 RDB 的优点 RDB 的缺点 AOF 的优点 AOF 的缺点 RDB 和 AOF ，我应该用哪一个？ RDB 快照 快照的运作方式 只进行追加操作的文件（append-only file，AOF） AOF 重写 AOF 有多耐久？ 如果 AOF 文件出错了，怎么办？ AOF 的运作方式 怎么从 RDB 持久化切换到 AOF 持久化 RDB 和 AOF 之间的相互作用 备份 Redis 数据 容灾备份 Sentinel 获取 Sentinel 启动 Sentinel 配置 Sentinel 主观下线和客观下线 每个 Sentinel 都需要定期执行的任务 自动发现 Sentinel 和从服务器 Sentinel API 故障转移 TILT 模式 处理 -BUSY 状态 Sentinel 的客户端实现 集群教程 集群简介 Redis 集群数据共享 Redis 集群中的主从复制 Redis 集群的一致性保证（guarantee） 创建并使用 Redis 集群 创建集群 集群的客户端 使用 redis-rb-cluster 编写一个示例应用 对集群进行重新分片 一个更有趣的示例应用 故障转移测试 添加新节点到集群 移除一个节点 Redis 集群规范 引言 什么是 Redis 集群？ Redis 集群实现的功能子集 Redis 集群协议中的客户端和服务器 键分布模型 集群节点属性 节点握手（已实现） MOVED 转向 集群在线重配置（live reconfiguration） ASK 转向 容错 发布/订阅（已实现，但仍然需要改善） 附录 A： CRC16 算法的 ANSI 实现参考 ","date":"2021-04-24","objectID":"/redis-%E5%91%BD%E4%BB%A4%E6%89%8B%E5%86%8C/:2:0","tags":["Redis"],"title":"redis命令手册","uri":"/redis-%E5%91%BD%E4%BB%A4%E6%89%8B%E5%86%8C/"},{"categories":["Redis"],"content":"redis面试题","date":"2021-04-24","objectID":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/","tags":["Redis"],"title":"redis面试题","uri":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":["Redis"],"content":"redis面试题 Redis 常见面试问题总结和答案。 ","date":"2021-04-24","objectID":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/:0:0","tags":["Redis"],"title":"redis面试题","uri":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":["Redis"],"content":"什么是Redis？ Redis(Remote Dictionary Server) Redis 是一个开源的使用 ANSI C 语言编写、遵守 BSD 协议、支持网络、可基于内存亦可持久化的日志型、Key-Value 数据库，并提供多种语言的 API 的非关系型数据库。 传统数据库遵循 ACID 规则。而 Nosql（Not Only SQL 的缩写，是对不同于传统的关系型数据库的数据库管理系统的统称） 一般为分布式而分布式一般遵循 CAP 定理。 Github 源码：https://github.com/antirez/redis Redis 官网：https://redis.io/ 与传统数据库不同的是 Redis 的数据是存在内存中的，所以读写速度非常快，因此 redis 被广泛应用于缓存，每秒可以处理超过 10 万次读写操作，是已知性能最快的 Key-Value 数据库。另外，Redis 也经常用来做分布式锁。除此之外，Redis 支持事务、持久化、LUA 脚本、LRU 驱动事件、多种集群方案。 ","date":"2021-04-24","objectID":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/:1:0","tags":["Redis"],"title":"redis面试题","uri":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":["Redis"],"content":"Redis支持的数据类型？ Redis 可以存储键和不同类型的值之间的映射。键的类型只能为字符串，值常见有五种数据类型：字符串、列表、集合、散列表、有序集合。 String字符串： 格式: set key value string类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。 string类型是Redis最基本的数据类型，一个键最大能存储512MB。 Hash（哈希） 格式: hmset name key1 value1 key2 value2 Redis hash 是一个键值(key=\u003evalue)对集合。 Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。 List（列表） Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边） 格式: lpush name value 在 key 对应 list 的头部添加字符串元素 格式: rpush name value 在 key 对应 list 的尾部添加字符串元素 格式: lrem name index key 对应 list 中删除 count 个和 value 相同的元素 格式: llen name 返回 key 对应 list 的长度 Set（集合） 格式: sadd name value Redis的Set是string类型的无序集合。 集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。 zset(sorted set：有序集合) 格式: zadd name score value Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。 不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。 zset的成员是唯一的,但分数(score)却可以重复。 ","date":"2021-04-24","objectID":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/:2:0","tags":["Redis"],"title":"redis面试题","uri":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":["Redis"],"content":"什么是Redis持久化？Redis有哪几种持久化方式？优缺点是什么？ 持久化就是把内存的数据写到磁盘中去，防止服务宕机了内存数据丢失。 Redis 提供了两种持久化方式:RDB（默认） 和AOF RDB： rdb是Redis DataBase缩写 功能核心函数rdbSave(生成RDB文件)和rdbLoad（从文件加载内存）两个函数 AOF: Aof是Append-only file缩写 每当执行服务器(定时)任务或者函数时flushAppendOnlyFile 函数都会被调用， 这个函数执行以下两个工作 aof写入保存： WRITE：根据条件，将 aof_buf 中的缓存写入到 AOF 文件 SAVE：根据条件，调用 fsync 或 fdatasync 函数，将 AOF 文件保存到磁盘中。 存储结构: 内容是redis通讯协议(RESP )格式的命令文本存储。 比较： 1、aof文件比rdb更新频率高，优先使用aof还原数据。 2、aof比rdb更安全也更大 3、rdb性能比aof好 4、如果两个都配了优先加载AOF ","date":"2021-04-24","objectID":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/:3:0","tags":["Redis"],"title":"redis面试题","uri":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":["Redis"],"content":"刚刚上面你有提到redis通讯协议(RESP )，能解释下什么是RESP？有什么特点？（可以看到很多面试其实都是连环炮，面试官其实在等着你回答到这个点，如果你答上了对你的评价就又加了一分） RESP 是redis客户端和服务端之前使用的一种通讯协议； RESP 的特点：实现简单、快速解析、可读性好 For Simple Strings the first byte of the reply is “+” 回复 For Errors the first byte of the reply is “-” 错误 For Integers the first byte of the reply is “:” 整数 For Bulk Strings the first byte of the reply is “$” 字符串 For Arrays the first byte of the reply is “*” 数组 ","date":"2021-04-24","objectID":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/:4:0","tags":["Redis"],"title":"redis面试题","uri":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":["Redis"],"content":"Redis 有哪些架构模式？讲讲各自的特点 单机版 特点：简单 问题： 1、内存容量有限 2、处理能力有限 3、无法高可用。 主从复制 Redis 的复制（replication）功能允许用户根据一个 Redis 服务器来创建任意多个该服务器的复制品，其中被复制的服务器为主服务器（master），而通过复制创建出来的服务器复制品则为从服务器（slave）。 只要主从服务器之间的网络连接正常，主从服务器两者会具有相同的数据，主服务器就会一直将发生在自己身上的数据更新同步 给从服务器，从而一直保证主从服务器的数据相同。 特点： 1、master/slave 角色 2、master/slave 数据相同 3、降低 master 读压力在转交从库 问题： 无法保证高可用 没有解决 master 写的压力 哨兵 Redis sentinel 是一个分布式系统中监控 redis 主从服务器，并在主服务器下线时自动进行故障转移。其中三个特性： 监控（Monitoring）： Sentinel 会不断地检查你的主服务器和从服务器是否运作正常。 提醒（Notification）： 当被监控的某个 Redis 服务器出现问题时， Sentinel 可以通过 API 向管理员或者其他应用程序发送通知。 自动故障迁移（Automatic failover）： 当一个主服务器不能正常工作时， Sentinel 会开始一次自动故障迁移操作。 特点： 1、保证高可用 2、监控各个节点 3、自动故障迁移 缺点：主从模式，切换需要时间丢数据 没有解决 master 写的压力 集群（proxy 型）： Twemproxy 是一个 Twitter 开源的一个 redis 和 memcache 快速/轻量级代理服务器； Twemproxy 是一个快速的单线程代理程序，支持 Memcached ASCII 协议和 redis 协议。 特点：1、多种 hash 算法：MD5、CRC16、CRC32、CRC32a、hsieh、murmur、Jenkins 2、支持失败节点自动删除 3、后端 Sharding 分片逻辑对业务透明，业务方的读写方式和操作单个 Redis 一致 缺点：增加了新的 proxy，需要维护其高可用。 failover 逻辑需要自己实现，其本身不能支持故障的自动转移可扩展性差，进行扩缩容都需要手动干预 集群（直连型）： 从redis 3.0之后版本支持redis-cluster集群，Redis-Cluster采用无中心结构，每个节点保存数据和整个集群状态,每个节点都和其他所有节点连接。 特点： 1、无中心架构（不存在哪个节点影响性能瓶颈），少了 proxy 层。 2、数据按照 slot 存储分布在多个节点，节点间数据共享，可动态调整数据分布。 3、可扩展性，可线性扩展到 1000 个节点，节点可动态添加或删除。 4、高可用性，部分节点不可用时，集群仍可用。通过增加 Slave 做备份数据副本 5、实现故障自动 failover，节点之间通过 gossip 协议交换状态信息，用投票机制完成 Slave到 Master 的角色提升。 缺点： 1、资源隔离性较差，容易出现相互影响的情况。 2、数据通过异步复制,不保证数据的强一致性 ","date":"2021-04-24","objectID":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/:5:0","tags":["Redis"],"title":"redis面试题","uri":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":["Redis"],"content":"什么是一致性哈希算法？什么是哈希槽？ 这两个问题篇幅过长 网上找了两个解锁的不错的文章 https://www.cnblogs.com/lpfuture/p/5796398.html http://www.jasontec.cn/articles/2020/04/11/1586586130767.html ","date":"2021-04-24","objectID":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/:6:0","tags":["Redis"],"title":"redis面试题","uri":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":["Redis"],"content":"Redis常用命令？ Keys pattern 列出所有key，*表示区配所有。 Set 设置 key 对应的值为 string 类型的 value。 setnx 设置 key 对应的值为 string 类型的 value。如果 key 已经存在，返回 0，nx 是 not exist 的意思。 Del 删除某个key，第一次返回1 删除了 第二次返回0 Expire 设置过期时间（单位秒） TTL 查看剩下多少时间，返回负数则key失效，key不存在了 Setex 设置 key 对应的值为 string 类型的 value，并指定此键值对应的有效期。 Mset 一次设置多个 key 的值，成功返回 ok 表示所有的值都设置了，失败返回 0 表示没有任何值被设置。 Getset 设置 key 的值，并返回 key 的旧值。 Mget 一次获取多个 key 的值，如果对应 key 不存在，则对应返回 nil。 Incr 对 key 的值做加加操作,并返回新的值。注意 incr 一个不是 int 的 value 会返回错误，incr 一个不存在的 key，则设置 key 为 1 incrby 同 incr 类似，加指定值 ，key 不存在时候会设置 key，并认为原来的 value 是 0 Decr 对 key 的值做的是减减操作，decr 一个不存在 key，则设置 key 为-1 Decrby 同 decr，减指定值。 Append 给指定 key 的字符串值追加 value,返回新字符串值的长度。 Strlen 取指定 key 的 value 值的长度。 persist xxx(取消过期时间) 选择数据库（0-15库） Select 0 选择数据库 move age 1 把age 移动到1库 Randomkey 随机返回一个key Rename 重命名 Type 返回数据类型 ","date":"2021-04-24","objectID":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/:7:0","tags":["Redis"],"title":"redis面试题","uri":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":["Redis"],"content":"使用过Redis分布式锁么，它是怎么实现的？ 先拿setnx来争抢锁，抢到之后，再用expire给锁加一个过期时间防止锁忘记了释放。 如果在setnx之后执行expire之前进程意外crash或者要重启维护了，那会怎么样？ set指令有非常复杂的参数，这个应该是可以同时把setnx和expire合成一条指令来用的！ ","date":"2021-04-24","objectID":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/:8:0","tags":["Redis"],"title":"redis面试题","uri":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":["Redis"],"content":"使用过Redis做异步队列么，你是怎么用的？有什么缺点？ 一般使用list结构作为队列，rpush生产消息，lpop消费消息。当lpop没有消息的时候，要适当sleep一会再重试。 缺点： 在消费者下线的情况下，生产的消息会丢失，得使用专业的消息队列如rabbitmq等。 能不能生产一次消费多次呢？ 使用pub/sub主题订阅者模式，可以实现1:N的消息队列。 ","date":"2021-04-24","objectID":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/:9:0","tags":["Redis"],"title":"redis面试题","uri":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":["Redis"],"content":"什么是缓存穿透？如何避免？什么是缓存雪崩？何如避免？ 缓存穿透 一般的缓存系统，都是按照key去缓存查询，如果不存在对应的value，就应该去后端系统查找（比如DB）。一些恶意的请求会故意查询不存在的key,请求量很大，就会对后端系统造成很大的压力。这就叫做缓存穿透。 如何避免？ 1：对查询结果为空的情况也进行缓存，缓存时间设置短一点，或者该key对应的数据insert了之后清理缓存。 2：对一定不存在的key进行过滤。可以把所有的可能存在的key放到一个大的Bitmap中，查询时通过该bitmap过滤。 缓存雪崩 当缓存服务器重启或者大量缓存集中在某一个时间段失效，这样在失效的时候，会给后端系统带来很大压力。导致系统崩溃。 如何避免？ 1：在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个key只允许一个线程查询数据和写缓存，其他线程等待。 2：做二级缓存，A1为原始缓存，A2为拷贝缓存，A1失效时，可以访问A2，A1缓存失效时间设置为短期，A2设置为长期 3：不同的key，设置不同的过期时间，让缓存失效的时间点尽量均匀。 http://jasontec.cn/articles/2019/12/20/1576826633007.html ","date":"2021-04-24","objectID":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/:10:0","tags":["Redis"],"title":"redis面试题","uri":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":["Redis"],"content":"Redis的用途是什么？ 计数器 可以对 String 进行自增自减运算，从而实现计数器功能。Redis 这种内存型数据库的读写性能非常高，很适合存储频繁读写的计数量。 缓存将热点数据放到内存中，设置内存的最大使用量以及淘汰策略来保证缓存的命中率。 会话缓存 可以使用 Redis 来统一存储多台应用服务器的会话信息。当应用服务器不再存储用户的会话信息，也就不再具有状态，一个用户可以请求任意一个应用服务器，从而更容易实现高可用性以及可伸缩性。 全页缓存（FPC） 除基本的会话 token 之外，Redis 还提供很简便的 FPC 平台。以 Magento 为例，Magento 提供一个插件来使用 Redis 作为全页缓存后端。此外，对 WordPress 的用户来说，Pantheon 有一个非常好的插件 wp-redis，这个插件能帮助你以最快速度加载你曾浏览过的页面。 查找表 例如 DNS 记录就很适合使用 Redis 进行存储。查找表和缓存类似，也是利用了Redis快速的查找特性。但是查找表的内容不能失效，而缓存的内容可以失效，因为缓存不作为可靠的数据来源。 消息队列(发布/订阅功能) List 是一个双向链表，可以通过 lpush 和 rpop 写入和读取消息。不过最好使用 Kafka、RabbitMQ 等消息中间件。 分布式锁实现 在分布式场景下，无法使用单机环境下的锁来对多个节点上的进程进行同步。可以使用 Redis 自带的 SETNX 命令实现分布式锁，除此之外，还可以使用官方提供的 RedLock 分布式锁实现。 其它 Set 可以实现交集、并集等操作，从而实现共同好友等功能。ZSet可以实现有序性操作，从而实现排行榜等功能。 ","date":"2021-04-24","objectID":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/:11:0","tags":["Redis"],"title":"redis面试题","uri":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":["Redis"],"content":"如何与Redis连接？ 安装服务器后，可以运行 redis 安装时提供的 Redis 客户端，也可以打开命令提示符并使用以下命令： redis-cli 通过使用其中任何一个，您可以与 Redis 交互。 ","date":"2021-04-24","objectID":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/:12:0","tags":["Redis"],"title":"redis面试题","uri":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":["Redis"],"content":"Redis的主要特点是什么？ 以下是 Redis 的主要功能： 读写性能优异， Redis 能读的速度是 110000 次/s，写的速度是 81000 次/s。 支持数据持久化，支持 AOF 和 RDB 两种持久化方式。 支持事务，Redis 的所有操作都是原子性的，同时 Redis 还支持对几个操作合并后的原子性执行。 数据结构丰富，除了支持 string 类型的 value 外还支持 hash、set、zset、list 等数据结构。 支持主从复制，主机会自动将数据同步到从机，可以进行读写分离。 ","date":"2021-04-24","objectID":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/:13:0","tags":["Redis"],"title":"redis面试题","uri":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":["Redis"],"content":"解释Redis的复制功能？ Redis 可以使用主从同步，从从同步。第一次同步时，主节点做一次 bgsave，并同时将后续修改操作记录到内存 buffer，待完成后将 rdb 文件全量同步到复制节点，复制节点接受完成后将 rdb 镜像加载到内存。加载完成后，再通知主节点将期间修改的操作记录同步到复制节点进行重放就完成了同步过程。 ","date":"2021-04-24","objectID":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/:14:0","tags":["Redis"],"title":"redis面试题","uri":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":["Redis"],"content":"Redis和RDBMS有什么区别？ Redis 和 RDBMS 之间存在很多差异： Redis 是 NoSQL 数据库，而 RDBMS 是 SQL 数据库。 Redis 遵循键值结构，而 RDBMS 遵循表结构。 Redis 非常快，而 RDBMS 相对较慢。 Redis 将所有数据集存储在主存储器中，而 RDBMS 将其数据集存储在辅助存储器中。 Redis 通常用于存储小型和常用文件，而 RDBMS 用于存储大文件。 Redis 仅为 Linux，BSD，Mac OS X，Solaris 提供官方支持。它目前没有为 Windows 提供官方支持，而 RDBMS 提供对两者的支持。 ","date":"2021-04-24","objectID":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/:15:0","tags":["Redis"],"title":"redis面试题","uri":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":["Redis"],"content":"为什么Redis不同于其他的键值存储数据库？ 有两个主要原因： Redis发展方向不同与其他键值数据库，它能包含很多复杂数据类型，对这些数据类型操作都是原子的。Redis数据类型与基本数据结构强相关，直接暴露给程序员，没有增加抽象层。 Redis是一个基于内存的，能够持久化到硬盘的数据库，因此为了实现高速读写，数据集大小不能超过内存。内存数据库另一个优点是，内存数据库相对于硬盘数据库非常容易操作复杂数据结构，因此Redis的可以做很多事情，内部复杂性低。与此同时两款磁盘存储格式（RDB和AOF）不需要支持随机访问，因此他们是紧凑的，而且总是以追加形式生成（甚至AOF日志轮换也是一个追加操作，因为新版本是由内存中的副本生成）。比起基于磁盘的数据存储， Redis 用来处理重要数据时需要确保数据集及时落盘刷新。 ","date":"2021-04-24","objectID":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/:16:0","tags":["Redis"],"title":"redis面试题","uri":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":["Redis"],"content":"Redis内存使用情况？ 举几个例子（所有数据基于64位实例） 一个空实例大约占用3M内存 1百万简单字符串键值对大约占用85M内存 1百万哈希表键值对，每个对象有5个属性，大约占用160M内存 为了测试你的用例，使用redis-benchmark工具生成随机数据集，使用INFO memory命令检查使用内存空间。 存储相同的键，64位系统比32位系统使用更多的内存，键值很小情况下更明显。这是因为64位系统指针占用8字节。但是64位系统优点是可以配置更多内存（校对注：32位操作系统支持的内存最多为2的32次方，就是4G），因此为了运行大型Redis服务器，64位系统尤佳。另一种方案是使用分片。 ","date":"2021-04-24","objectID":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/:17:0","tags":["Redis"],"title":"redis面试题","uri":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":["Redis"],"content":"我喜欢Redis的高性能操作和特性，但是不喜欢所有内容都在内存中，我不能创建一个比内存更大数据集。有计划改变吗？ 过去为了允许数据集超过RAM大小，Redis开发人员尝试使用虚拟内存和其他系统，但是我们非常高兴可以把一件事情做好：数据服务由内存提供，磁盘用于存储数据。所以现在没有计划为Redis创建磁盘后端，毕竟Redis大部分特性都是基于其当前架构设计的。 你的真正问题并不是所需的总内存，而是你需要划分你的数据集到多个Redis实例上，为了获取更多信息请阅读本文档中的分区页面。 ","date":"2021-04-24","objectID":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/:18:0","tags":["Redis"],"title":"redis面试题","uri":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":["Redis"],"content":"同时使用Redis和磁盘数据库，是不是一个好想法？ 是的，一个通用的设计方案是，在非常频繁的写小的数据时采用Redis（并且你需要使用Redis数据结构给你的问题建立高效模型），以及将大数据存储到SQL数据库或者最终一致性磁盘数据库中。 ","date":"2021-04-24","objectID":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/:19:0","tags":["Redis"],"title":"redis面试题","uri":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":["Redis"],"content":"有没有方法降低Redis内存使用率？ 如果可以的话使用Redis 32位实例。另外，还要善于使用哈希表，列表，有序集合和整数集，因为在特殊情况下Redis使用这些数据类型可以更紧凑存储一些元素。可以在内存优化页面获取更多信息。 ","date":"2021-04-24","objectID":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/:20:0","tags":["Redis"],"title":"redis面试题","uri":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":["Redis"],"content":"Redis内存不足时会发生什么？ Redis要么被Linux内核OOM杀掉，抛出错误崩溃，要么开始变得卡顿。随着现代操作系统malloc方法通常都不返回NULL，而是服务器开始交换，因此Redis性能降低，因此你可能会观察到一些错误现象。 INFO命令返回Redis使用内存总量，因此你可以编写脚本监控Redis服务器内存临界值。 Redis内置保护措施允许用户在配置文件中使用maxmemory选项，设置Redis最大占用内存。如果达到此限制，Redis将开始返回错误给写命令（但是将继续接受只读命令），或者当最大内存限制达到时也可以配置为键淘汰，在这种情况下Redis作为缓存使用。 我们有文档描述Redis作为LRU缓存使用。 ","date":"2021-04-24","objectID":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/:21:0","tags":["Redis"],"title":"redis面试题","uri":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":["Redis"],"content":"在Linux系统中，即使我有很多空闲内存，后台保存失败报fork()错误！ 精简回答：echo 1 \u003e /proc/sys/vm/overcommit_memory 详细回答： Redis后台保存模式依赖现代操作系统的写时拷贝技术。Redis fork（创建一个子进程）是父进程精确拷贝。子进程存储数据到磁盘并且最终退出。从理论上讲，子进程应该和父进程使用同样多内存，作为父进程副本，但是得益于多数现代操作系统实现的写时复制技术，父进程和子进程共享内存页。内存页在父进程或子进程改变时将被复制。当子进程保存时，理论上所有页面都可能改变，Linux无法提前告知子进程需要多少内存，因此如果overcommit_memory设置为0，fork将会失败除非有足够的空闲RAM真正复制父进程内存页.结果是，如果你有3G Redis数据集，只有2G可用内存将会失败。 overcommit_memory设置为1，意味着Linux 使用更乐观方式fork，这确实是你所期望的Redis。 “理解虚拟机内存 ”是红帽经典文章，可以了解Linux虚拟内存怎么工作，overcommitmemory和overcommitratio的替代品。这篇文章校正了proc(5)用户手册对overcommit_memory1和2配置正确含义。 ","date":"2021-04-24","objectID":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/:22:0","tags":["Redis"],"title":"redis面试题","uri":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":["Redis"],"content":"Redis磁盘快照是不是原子操作？ 是的，当服务器不在执行命令时，Redis后台保存进程总是被创建，因此每个命令在RAM中是原子的，并且在磁盘快照过程也是原子的。 ","date":"2021-04-24","objectID":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/:23:0","tags":["Redis"],"title":"redis面试题","uri":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":["Redis"],"content":"Redis是单线程的，我怎么利用多CPU/核? CPU基本不可能成为的Redis的瓶颈，因为通常Redis受限于内存或网络。例如使用Pipelining，Redis运行在普通的Linux系统上，每秒可以处理50万请求，所以如果你的应用程序主要使用O(N) 或者 O(log(N))命令，几乎不会使用太多的CPU。 然而为了最大限度利用CPU，你可以在一台机器上启动多个Redis实例，并把它们设置为不同服务器。某些时候单个机器是不够的，所以如果你想使用多个CPU，你可以提前考虑使用分片。 关于使用多Redis实例，你可以在Partitioning page找到更多的信息 ","date":"2021-04-24","objectID":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/:24:0","tags":["Redis"],"title":"redis面试题","uri":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":["Redis"],"content":"单个Redis实例最多可以存储多少键？哈希表、列表、集合和有序集合最大可以包含多少元素？ Redis最大可以处理232键，实践测试每个实例最少可以处理2.5亿键。 每个哈希表、列表、集合和有序集合可以容纳232元素。 换句话说，Redis极限容量就是系统可用内存。 ","date":"2021-04-24","objectID":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/:25:0","tags":["Redis"],"title":"redis面试题","uri":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":["Redis"],"content":"为什么从实例与主实例拥有不同数量键？ 如果你使用有生存周期的键，这就是正常现象。这就导致主从实例键的数量不一致原因。 主实例在第一次与从实例同步时生成RDB文件。 RDB文件不包含已经过期的键，但是已经过期的键仍然在内存中。 尽管这些键从逻辑上说已经过期失效，但是还在Redis主实例内存中，他们并不被识别为存在的，当增量或访问这些键时这些键会被回收。尽管从逻辑上说这些键不是数据集一部分，但是INFO和DBSIZE命令结果包含这些信息。 当从实例读取主实例生成的RDB文件时，过期键不会被载入。 为很多键设置过期属性，通常为用户提供了在从实例上存储更少键，但是实际上实例内容没有逻辑区别。 ","date":"2021-04-24","objectID":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/:26:0","tags":["Redis"],"title":"redis面试题","uri":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":["Redis"],"content":"Redis实际含义是什么？ Redis是远程数据字典服务器（REmote DIctionary Server）。 ","date":"2021-04-24","objectID":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/:27:0","tags":["Redis"],"title":"redis面试题","uri":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":["Redis"],"content":"为什么启动Redis项目？ 最初启动Redis，是为了扩大LLOOGG。但是当我完成了基本服务端工作后，我喜欢把这个想法分享给其他人，然后Redis转变成开源项目。 ","date":"2021-04-24","objectID":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/:28:0","tags":["Redis"],"title":"redis面试题","uri":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":["Redis"],"content":"Redis 如何发音？ Redis 读作颜色的\"red\"，然后是 “iss”。 ","date":"2021-04-24","objectID":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/:29:0","tags":["Redis"],"title":"redis面试题","uri":"/redis%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":["Redis"],"content":"Redis-Value-List类型","date":"2021-04-23","objectID":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-list%E7%B1%BB%E5%9E%8B/","tags":["Redis"],"title":"Redis-Value-List类型","uri":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-list%E7%B1%BB%E5%9E%8B/"},{"categories":["Redis"],"content":"Redis-value-List类型 ","date":"2021-04-23","objectID":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-list%E7%B1%BB%E5%9E%8B/:0:0","tags":["Redis"],"title":"Redis-Value-List类型","uri":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-list%E7%B1%BB%E5%9E%8B/"},{"categories":["Redis"],"content":"1. 框架图： ","date":"2021-04-23","objectID":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-list%E7%B1%BB%E5%9E%8B/:1:0","tags":["Redis"],"title":"Redis-Value-List类型","uri":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-list%E7%B1%BB%E5%9E%8B/"},{"categories":["Redis"],"content":"2. help @LIST 127.0.0.1:6379\u003e help @list BLPOP key [key ...] timeout summary: Remove and get the first element in a list, or block until one is available since: 2.0.0 BRPOP key [key ...] timeout summary: Remove and get the last element in a list, or block until one is available since: 2.0.0 BRPOPLPUSH source destination timeout summary: Pop an element from a list, push it to another list and return it; or block until one is available since: 2.2.0 LINDEX key index summary: Get an element from a list by its index since: 1.0.0 LINSERT key BEFORE|AFTER pivot element summary: Insert an element before or after another element in a list since: 2.2.0 LLEN key summary: Get the length of a list since: 1.0.0 LPOP key summary: Remove and get the first element in a list since: 1.0.0 LPOS key element [RANK rank] [COUNT num-matches] [MAXLEN len] summary: Return the index of matching elements on a list since: 6.0.6 LPUSH key element [element ...] summary: Prepend one or multiple elements to a list since: 1.0.0 LPUSHX key element [element ...] summary: Prepend an element to a list, only if the list exists since: 2.2.0 LRANGE key start stop summary: Get a range of elements from a list since: 1.0.0 LREM key count element summary: Remove elements from a list since: 1.0.0 LSET key index element summary: Set the value of an element in a list by its index since: 1.0.0 LTRIM key start stop summary: Trim a list to the specified range since: 1.0.0 RPOP key summary: Remove and get the last element in a list since: 1.0.0 RPOPLPUSH source destination summary: Remove the last element in a list, prepend it to another list and return it since: 1.2.0 RPUSH key element [element ...] summary: Append one or multiple elements to a list since: 1.0.0 RPUSHX key element [element ...] summary: Append an element to a list, only if the list exists since: 2.2.0 中文文档 ","date":"2021-04-23","objectID":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-list%E7%B1%BB%E5%9E%8B/:2:0","tags":["Redis"],"title":"Redis-Value-List类型","uri":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-list%E7%B1%BB%E5%9E%8B/"},{"categories":["Redis"],"content":"3. 命令列表： LPUSH 左入 RPUSH 右入 RPUSHX RPUSHX将值 value 插入到列表 key 的表尾, 当且仅当 key 存在并且是一个列表。 和 RPUSH命令相反, 当 key 不存在时，RPUSHX 命令什么也不做。 LPOP 左出 RPOP 右出 LSET LSET key index element 根据索引进行更新值 LRANGE 取出范围内的值 LREM LREM key count element summary: Remove elements from a list count为负数表示反方向 127.0.0.1:6379\u003e RPUSH mylist a b c d 1 2 3 4 3 3 3 (integer) 11 127.0.0.1:6379\u003e 127.0.0.1:6379\u003e LRANGE mylist 0 -1 1) \"a\" 2) \"b\" 3) \"c\" 4) \"d\" 5) \"1\" 6) \"2\" 7) \"3\" 8) \"4\" 9) \"3\" 10) \"3\" 11) \"3\" 127.0.0.1:6379\u003e LREM mylist 2 3 (integer) 2 127.0.0.1:6379\u003e LRANGE mylist 0 -1 1) \"a\" 2) \"b\" 3) \"c\" 4) \"d\" 5) \"1\" 6) \"2\" 7) \"4\" 8) \"3\" 9) \"3\" 127.0.0.1:6379\u003e LREM mylist -2 3 (integer) 2 127.0.0.1:6379\u003e LRANGE mylist 0 -1 1) \"a\" 2) \"b\" 3) \"c\" 4) \"d\" 5) \"1\" 6) \"2\" 7) \"4\" LTRIM LTRIM key start stop summary: Trim a list to the specified range Redis LTRIM 用于修剪(trim)一个已存在的 list，这样 list 就会只包含指定范围的指定元素。start 和 stop 都是由0开始计数的， 这里的 0 是列表里的第一个元素（表头），1 是第二个元素，以此类推。 例如： LTRIM foobar 0 2 将会对存储在 foobar 的列表进行修剪，只保留列表里的前3个元素。 start 和 end 也可以用负数来表示与表尾的偏移量，比如 -1 表示列表里的最后一个元素， -2 表示倒数第二个，等等。 超过范围的下标并不会产生错误：如果 start 超过列表尾部，或者 start \u003e end，结果会是列表变成空表（即该 key 会被移除）。 如果 end 超过列表尾部，Redis 会将其当作列表的最后一个元素。 LTRIM 的一个常见用法是和 LPUSH / RPUSH 一起使用。 例如： LPUSH mylist someelement LTRIM mylist 0 99 这对命令会将一个新的元素 push 进列表里，并保证该列表不会增长到超过100个元素。 这是很有用的，比如当用 Redis 来存储日志。 需要特别注意的是，当用这种方式来使用 LTRIM 的时候，操作的复杂度是 O(1) ， 因为平均情况下，每次只有一个元素会被移除。 LINSERT LINSERT key BEFORE|AFTER pivot element summary: Insert an element before or after another element in a list redis\u003e RPUSH mylist \"Hello\" (integer) 1 redis\u003e RPUSH mylist \"World\" (integer) 2 redis\u003e LINSERT mylist BEFORE \"World\" \"There\" (integer) 3 redis\u003e LRANGE mylist 0 -1 1) \"Hello\" 2) \"There\" 3) \"World\" LLEN 返回链表长度 LINDEX 取出指定index的值 LPOS LPOS key element [RANK rank] [COUNT num-matches] [MAXLEN len] summary: Return the index of matching elements on a list RANK 选项 表示返回第几个匹配的元素，即如果有列表中有多个元素匹配，那么 rank 为 1 时返回第一个匹配的元素， rank 为 2 时返回第二个匹配的元素，以此类推。 负值 RANK 参数表示换一个搜索方向，从列表尾部想列表头部搜索。 COUNT 选项 表示返回要匹配的总数， 我们可以组合使用 COUNT 和RANK，RANK 表示从第几个匹配开始计算 COUNT 为 0 时表示返回所有匹配成员的索引数组。 MAXLEN 选项 表示只查找最多 len 个成员。例如t MAXLEN 1000 表示之查找前 1000 个成员，这样可以提高查询效率，如果我们想在一个大的列表中，尽快找到匹配的元素，这样做效率最高。 eg： redis\u003e RPUSH mylist a b c d 1 2 3 4 3 3 3 (integer) 11 redis\u003e LPOS mylist 3 (integer) 6 redis\u003e LPOS mylist 3 COUNT 0 RANK 2 1) (integer) 8 2) (integer) 9 3) (integer) 10 ","date":"2021-04-23","objectID":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-list%E7%B1%BB%E5%9E%8B/:3:0","tags":["Redis"],"title":"Redis-Value-List类型","uri":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-list%E7%B1%BB%E5%9E%8B/"},{"categories":["Redis"],"content":"4. 应用场景： 栈 正向命令 队列 反向命令 数组 索引操作 阻塞，单播队列 RPOPLPUSH RPOPLPUSH source destination summary: Remove the last element in a list, prepend it to another list and return it since: 1.2.0 BRPOPLPUSH BLOCK 是 RPOPLPUSH的阻塞版本 BRPOPLPUSH LIST1 ANOTHER_LIST TIMEOUT summary: Pop an element from a list, push it to another list and return it; or block until one is available 超时参数设为 0 表示阻塞时间可以无限期延长(block indefinitely) 。 ","date":"2021-04-23","objectID":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-list%E7%B1%BB%E5%9E%8B/:4:0","tags":["Redis"],"title":"Redis-Value-List类型","uri":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue-list%E7%B1%BB%E5%9E%8B/"},{"categories":["Redis"],"content":"Redis的使用","date":"2021-04-23","objectID":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8/","tags":["Redis"],"title":"Redis的使用","uri":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["Redis"],"content":"Redis的使用 redis-cli 进入客户端 [root@localhost ~]# redis-cli --help \u0026 redis-cli -h redis-cli 6.0.6 Usage: redis-cli [OPTIONS] [cmd [arg [arg ...]]] -h \u003chostname\u003e Server hostname (default: 127.0.0.1). -p \u003cport\u003e Server port (default: 6379). -s \u003csocket\u003e Server socket (overrides hostname and port). -a \u003cpassword\u003e Password to use when connecting to the server. You can also use the REDISCLI_AUTH environment variable to pass this password more safely (if both are used, this argument takes predecence). --user \u003cusername\u003e Used to send ACL style 'AUTH username pass'. Needs -a. --pass \u003cpassword\u003e Alias of -a for consistency with the new --user option. --askpass Force user to input password with mask from STDIN. If this argument is used, '-a' and REDISCLI_AUTH environment variable will be ignored. -u \u003curi\u003e Server URI. -r \u003crepeat\u003e Execute specified command N times. -i \u003cinterval\u003e When -r is used, waits \u003cinterval\u003e seconds per command. It is possible to specify sub-second times like -i 0.1. -n \u003cdb\u003e Database number. -3 Start session in RESP3 protocol mode. -x Read last argument from STDIN. -d \u003cdelimiter\u003e Multi-bulk delimiter in for raw formatting (default: \\n). -c Enable cluster mode (follow -ASK and -MOVED redirections). --raw Use raw formatting for replies (default when STDOUT is not a tty). --no-raw Force formatted output even when STDOUT is not a tty. --csv Output in CSV format. --stat Print rolling stats about server: mem, clients, ... --latency Enter a special mode continuously sampling latency. If you use this mode in an interactive session it runs forever displaying real-time stats. Otherwise if --raw or --csv is specified, or if you redirect the output to a non TTY, it samples the latency for 1 second (you can use -i to change the interval), then produces a single output and exits. --latency-history Like --latency but tracking latency changes over time. Default time interval is 15 sec. Change it using -i. --latency-dist Shows latency as a spectrum, requires xterm 256 colors. Default time interval is 1 sec. Change it using -i. --lru-test \u003ckeys\u003e Simulate a cache workload with an 80-20 distribution. --replica Simulate a replica showing commands received from the master. --rdb \u003cfilename\u003e Transfer an RDB dump from remote server to local file. --pipe Transfer raw Redis protocol from stdin to server. --pipe-timeout \u003cn\u003e In --pipe mode, abort with error if after sending all data. no reply is received within \u003cn\u003e seconds. Default timeout: 30. Use 0 to wait forever. --bigkeys Sample Redis keys looking for keys with many elements (complexity). --memkeys Sample Redis keys looking for keys consuming a lot of memory. --memkeys-samples \u003cn\u003e Sample Redis keys looking for keys consuming a lot of memory. And define number of key elements to sample --hotkeys Sample Redis keys looking for hot keys. only works when maxmemory-policy is *lfu. --scan List all keys using the SCAN command. --pattern \u003cpat\u003e Useful with --scan to specify a SCAN pattern. --intrinsic-latency \u003csec\u003e Run a test to measure intrinsic system latency. The test will run for the specified amount of seconds. --eval \u003cfile\u003e Send an EVAL command using the Lua script at \u003cfile\u003e. --ldb Used with --eval enable the Redis Lua debugger. --ldb-sync-mode Like --ldb but uses the synchronous Lua debugger, in this mode the server is blocked and script changes are not rolled back from the server memory. --cluster \u003ccommand\u003e [args...] [opts...] Cluster Manager command and arguments (see below). --verbose Verbose mode. --no-auth-warning Don't show warning message when using password on command line interface. --help Output this help and exit. --version Output version and exit. Cluster Manager Commands: Use --cluster help to list all available cluster manager commands. Examples: cat /etc/passwd | redis-cli -x set mypasswd redis-cli get mypasswd redis-cli -r 100 lpush mylist x redis-cli -r 100 -i 1 info | grep used_memory_human: redis-cli --eval myscript.lua key1 key2 , arg1 arg2 arg3 redis-cli --scan --pattern '*:12345*' (","date":"2021-04-23","objectID":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8/:0:0","tags":["Redis"],"title":"Redis的使用","uri":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["Redis"],"content":"库表结构 库：Redis 默认16个库 -n指定连接的库 默认为0号库 select x 进行切换库 ","date":"2021-04-23","objectID":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8/:1:0","tags":["Redis"],"title":"Redis的使用","uri":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["Redis"],"content":"help使用 127.0.0.1:6379\u003e help redis-cli 6.0.6 To get help about Redis commands type: \"help @\u003cgroup\u003e\" to get a list of commands in \u003cgroup\u003e \"help \u003ccommand\u003e\" for help on \u003ccommand\u003e \"help \u003ctab\u003e\" to get a list of possible help topics \"quit\" to exit To set redis-cli preferences: \":set hints\" enable online hints \":set nohints\" disable online hints Set your preferences in ~/.redisclirc ","date":"2021-04-23","objectID":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8/:2:0","tags":["Redis"],"title":"Redis的使用","uri":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["Redis"],"content":"help @命令组 例如help @generic 127.0.0.1:6379\u003e help @generic DEL key [key ...] summary: Delete a key since: 1.0.0 DUMP key summary: Return a serialized version of the value stored at the specified key. since: 2.6.0 EXISTS key [key ...] summary: Determine if a key exists since: 1.0.0 EXPIRE key seconds summary: Set a key's time to live in seconds since: 1.0.0 EXPIREAT key timestamp summary: Set the expiration for a key as a UNIX timestamp since: 1.2.0 KEYS pattern summary: Find all keys matching the given pattern since: 1.0.0 MIGRATE host port key| destination-db timeout [COPY] [REPLACE] [AUTH password] [KEYS key] summary: Atomically transfer a key from a Redis instance to another one. since: 2.6.0 MOVE key db summary: Move a key to another database since: 1.0.0 OBJECT subcommand [arguments [arguments ...]] summary: Inspect the internals of Redis objects since: 2.2.3 help tab可以补全 keys * 显示所有key FLUSHDB 清库，测试环境下使用 127.0.0.1:6379\u003e keys * 1) \"k380\" 2) \"k380:1\" 127.0.0.1:6379\u003e FlushDB OK 127.0.0.1:6379\u003e keys * (empty array) 127.0.0.1:6379\u003e ","date":"2021-04-23","objectID":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8/:3:0","tags":["Redis"],"title":"Redis的使用","uri":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["Redis"],"content":"Value- 5种基本类型 ","date":"2021-04-23","objectID":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8/:4:0","tags":["Redis"],"title":"Redis的使用","uri":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["Redis"],"content":"1. 字符串 help @string命令组 Set 设置值 # 查看set帮助 127.0.0.1:6379\u003e help set SET key value [EX seconds|PX milliseconds] [NX|XX] [KEEPTTL] summary: Set the string value of a key since: 1.0.0 group: string NX -\u003e not x -\u003e not exist 不存在的时候才去设置 使用场景：分布式锁。谁先成功谁就拿到锁了 127.0.0.1:6379\u003e set k1 hello nx OK 127.0.0.1:6379\u003e set k1 world nx (nil) 127.0.0.1:6379\u003e get k1 \"hello\" 只有k1无值的时候才会生效 XX -\u003e exist 只能更新,无法赋值 127.0.0.1:6379\u003e set k2 redis xx (nil) 127.0.0.1:6379\u003e get k2 (nil) del 该命令用于在 key 存在是删除 key。 127.0.0.1:6379\u003e del k1 (integer) 1 127.0.0.1:6379\u003e get k1 (nil) 127.0.0.1:6379\u003e keys * 1) \"k2\" 2) \"orkey\" 3) \"andkey\" flushdb FLUSHDB [ASYNC] summary: Remove all keys from the current database since: 1.0.0 group: server flushall FLUSHALL [ASYNC] summary: Remove all keys from all databases since: 1.0.0 group: server mset/mget 批量设置，读取 127.0.0.1:6379\u003e mset k3 a k4 b OK 127.0.0.1:6379\u003e mget k3 k4 1) \"a\" 2) \"b\" 127.0.0.1:6379\u003e append 追加字符串的值 127.0.0.1:6379\u003e get k1 \"hello\" 127.0.0.1:6379\u003e append k1 \" world\" (integer) 11 127.0.0.1:6379\u003e get k1 \"hello world\" getrange 获取范围内的字符串 127.0.0.1:6379\u003e get k1 \"hello world\" 127.0.0.1:6379\u003e getrange k1 6 10 \"world\" 位置从0开始 反方向索引 127.0.0.1:6379\u003e getrange k1 -5 -1 \"world\" setrange 从指定位置开始set string值 127.0.0.1:6379\u003e setrange k1 6 SeaSoonKeun (integer) 17 127.0.0.1:6379\u003e get k1 \"hello SeaSoonKeun\" strlen 返回字符串长度 127.0.0.1:6379\u003e setrange k1 6 SeaSoonKeun (integer) 17 127.0.0.1:6379\u003e get k1 \"hello SeaSoonKeun\" 127.0.0.1:6379\u003e strlen k1 (integer) 17 type 查看key类型 127.0.0.1:6379\u003e type k1 string 127.0.0.1:6379\u003e get k1 \"hello SeaSoonKeun\" Key 中的 type 包含value 类型 Set 命令是 string 分组的，所以产生的数据都是 string类型的 127.0.0.1:6379\u003e set k4 999 OK 127.0.0.1:6379\u003e get k4 \"999\" 127.0.0.1:6379\u003e type k4 string 127.0.0.1:6379\u003e help set SET key value [EX seconds|PX milliseconds] [NX|XX] [KEEPTTL] summary: Set the string value of a key since: 1.0.0 group: string object 子命令列表 127.0.0.1:6379\u003e object help 1) OBJECT \u003csubcommand\u003e arg arg ... arg. Subcommands are: 2) ENCODING \u003ckey\u003e -- Return the kind of internal representation used in order to store the value associated with a key. 3) FREQ \u003ckey\u003e -- Return the access frequency index of the key. The returned integer is proportional to the logarithm of the recent access frequency of the key. 4) IDLETIME \u003ckey\u003e -- Return the idle time of the key, that is the approximated number of seconds elapsed since the last access to the key. 5) REFCOUNT \u003ckey\u003e -- Return the number of references of the value associated with the specified key. object encoding key 显示key编码 127.0.0.1:6379\u003e mget k1 k3 k4 1) \"hello SeaSoonKeun\" 2) \"a\" 3) \"999\" 127.0.0.1:6379\u003e type k1 string 127.0.0.1:6379\u003e type k3 string 127.0.0.1:6379\u003e type k4 string 127.0.0.1:6379\u003e object encoding k1 \"raw\" 127.0.0.1:6379\u003e object encoding k3 \"embstr\" 127.0.0.1:6379\u003e object encoding k4 \"int\" 虽然key的type都是string类型，但是有不同的编码。redis这种预埋设计，方便后面更加快速调用对应类型的方法进行计算，很大程度上提升了速度。 在此基础上，针对encoding是int类型的有下列方法： # 加一 INCR key summary: Increment the integer value of a key by one since: 1.0.0 INCRBY key increment summary: Increment the integer value of a key by the given amount since: 1.0.0 INCRBYFLOAT key increment summary: Increment the float value of a key by the given amount since: 2.6.0 DECR key summary: Decrement the integer value of a key by one since: 1.0.0 DECRBY key decrement summary: Decrement the integer value of a key by the given number since: 1.0.0 eg 127.0.0.1:6379\u003e get k4 \"999\" 127.0.0.1:6379\u003e 127.0.0.1:6379\u003e INCR k4 (integer) 1000 127.0.0.1:6379\u003e INCRBY k4 100 (integer) 1100 127.0.0.1:6379\u003e DECR k4 (integer) 1099 127.0.0.1:6379\u003e DECRBY k4 100 (integer) 999 一些方法会变掉key的类型，一些方法会提前固定编码 引申： 二进制安全 -\u003e 字节流 编码并不会影响数据存储，因为是首先是按字节流完成的数据存储，然后redis为了自身方法更快速的计算，在key上加了encoding类型数据，也会随着方法的调用发生encoding编码的改变。 eg macos默认使用utf-8 编码集 在此编码集下，添加一个key。 127.0.0.1:6379\u003e flushdb OK 127.0.0.1:6379\u003e 127.0.0.1:6379\u003e set k1 我 OK 127.0.0.1:6379\u003e STRLEN k1 (integer) 3 127.0.0.1:6379\u003e get k1 \"\\xe6\\x88\\x91\" 修改编码集为GBK 在此编码集下，添加一个相同的key。 [root@localhost ~]# redis-cli 127.0.0.1:6379\u003e flushdb OK 127.0.0.1:6379\u003e ","date":"2021-04-23","objectID":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8/:4:1","tags":["Redis"],"title":"Redis的使用","uri":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["Redis"],"content":"Redis的使用\u0026redis-Value-string类型","date":"2021-04-23","objectID":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B/","tags":["Redis"],"title":"Redis的使用\u0026redis-Value-string类型","uri":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B/"},{"categories":["Redis"],"content":"Redis的使用\u0026redis-Value-string类型 redis-cli 进入客户端 [root@localhost ~]# redis-cli --help \u0026 redis-cli -h redis-cli 6.0.6 Usage: redis-cli [OPTIONS] [cmd [arg [arg ...]]] -h \u003chostname\u003e Server hostname (default: 127.0.0.1). -p \u003cport\u003e Server port (default: 6379). -s \u003csocket\u003e Server socket (overrides hostname and port). -a \u003cpassword\u003e Password to use when connecting to the server. You can also use the REDISCLI_AUTH environment variable to pass this password more safely (if both are used, this argument takes predecence). --user \u003cusername\u003e Used to send ACL style 'AUTH username pass'. Needs -a. --pass \u003cpassword\u003e Alias of -a for consistency with the new --user option. --askpass Force user to input password with mask from STDIN. If this argument is used, '-a' and REDISCLI_AUTH environment variable will be ignored. -u \u003curi\u003e Server URI. -r \u003crepeat\u003e Execute specified command N times. -i \u003cinterval\u003e When -r is used, waits \u003cinterval\u003e seconds per command. It is possible to specify sub-second times like -i 0.1. -n \u003cdb\u003e Database number. -3 Start session in RESP3 protocol mode. -x Read last argument from STDIN. -d \u003cdelimiter\u003e Multi-bulk delimiter in for raw formatting (default: \\n). -c Enable cluster mode (follow -ASK and -MOVED redirections). --raw Use raw formatting for replies (default when STDOUT is not a tty). --no-raw Force formatted output even when STDOUT is not a tty. --csv Output in CSV format. --stat Print rolling stats about server: mem, clients, ... --latency Enter a special mode continuously sampling latency. If you use this mode in an interactive session it runs forever displaying real-time stats. Otherwise if --raw or --csv is specified, or if you redirect the output to a non TTY, it samples the latency for 1 second (you can use -i to change the interval), then produces a single output and exits. --latency-history Like --latency but tracking latency changes over time. Default time interval is 15 sec. Change it using -i. --latency-dist Shows latency as a spectrum, requires xterm 256 colors. Default time interval is 1 sec. Change it using -i. --lru-test \u003ckeys\u003e Simulate a cache workload with an 80-20 distribution. --replica Simulate a replica showing commands received from the master. --rdb \u003cfilename\u003e Transfer an RDB dump from remote server to local file. --pipe Transfer raw Redis protocol from stdin to server. --pipe-timeout \u003cn\u003e In --pipe mode, abort with error if after sending all data. no reply is received within \u003cn\u003e seconds. Default timeout: 30. Use 0 to wait forever. --bigkeys Sample Redis keys looking for keys with many elements (complexity). --memkeys Sample Redis keys looking for keys consuming a lot of memory. --memkeys-samples \u003cn\u003e Sample Redis keys looking for keys consuming a lot of memory. And define number of key elements to sample --hotkeys Sample Redis keys looking for hot keys. only works when maxmemory-policy is *lfu. --scan List all keys using the SCAN command. --pattern \u003cpat\u003e Useful with --scan to specify a SCAN pattern. --intrinsic-latency \u003csec\u003e Run a test to measure intrinsic system latency. The test will run for the specified amount of seconds. --eval \u003cfile\u003e Send an EVAL command using the Lua script at \u003cfile\u003e. --ldb Used with --eval enable the Redis Lua debugger. --ldb-sync-mode Like --ldb but uses the synchronous Lua debugger, in this mode the server is blocked and script changes are not rolled back from the server memory. --cluster \u003ccommand\u003e [args...] [opts...] Cluster Manager command and arguments (see below). --verbose Verbose mode. --no-auth-warning Don't show warning message when using password on command line interface. --help Output this help and exit. --version Output version and exit. Cluster Manager Commands: Use --cluster help to list all available cluster manager commands. Examples: cat /etc/passwd | redis-cli -x set mypasswd redis-cli get mypasswd redis-cli -r 100 lpush mylist x redis-cli -r 100 -i 1 info | grep used_memory_human: redis-cli --eval myscript.lua key1 key2 , arg1 arg2 arg3 redis-cli --scan -","date":"2021-04-23","objectID":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B/:0:0","tags":["Redis"],"title":"Redis的使用\u0026redis-Value-string类型","uri":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B/"},{"categories":["Redis"],"content":"库表结构 库：Redis 默认16个库 -n指定连接的库 默认为0号库 select x 进行切换库 ","date":"2021-04-23","objectID":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B/:1:0","tags":["Redis"],"title":"Redis的使用\u0026redis-Value-string类型","uri":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B/"},{"categories":["Redis"],"content":"help使用 127.0.0.1:6379\u003e help redis-cli 6.0.6 To get help about Redis commands type: \"help @\u003cgroup\u003e\" to get a list of commands in \u003cgroup\u003e \"help \u003ccommand\u003e\" for help on \u003ccommand\u003e \"help \u003ctab\u003e\" to get a list of possible help topics \"quit\" to exit To set redis-cli preferences: \":set hints\" enable online hints \":set nohints\" disable online hints Set your preferences in ~/.redisclirc ","date":"2021-04-23","objectID":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B/:2:0","tags":["Redis"],"title":"Redis的使用\u0026redis-Value-string类型","uri":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B/"},{"categories":["Redis"],"content":"help @命令组 例如help @generic 127.0.0.1:6379\u003e help @generic DEL key [key ...] summary: Delete a key since: 1.0.0 DUMP key summary: Return a serialized version of the value stored at the specified key. since: 2.6.0 EXISTS key [key ...] summary: Determine if a key exists since: 1.0.0 EXPIRE key seconds summary: Set a key's time to live in seconds since: 1.0.0 EXPIREAT key timestamp summary: Set the expiration for a key as a UNIX timestamp since: 1.2.0 KEYS pattern summary: Find all keys matching the given pattern since: 1.0.0 MIGRATE host port key| destination-db timeout [COPY] [REPLACE] [AUTH password] [KEYS key] summary: Atomically transfer a key from a Redis instance to another one. since: 2.6.0 MOVE key db summary: Move a key to another database since: 1.0.0 OBJECT subcommand [arguments [arguments ...]] summary: Inspect the internals of Redis objects since: 2.2.3 help tab可以补全 keys * 显示所有key FLUSHDB 清库，测试环境下使用 127.0.0.1:6379\u003e keys * 1) \"k380\" 2) \"k380:1\" 127.0.0.1:6379\u003e FlushDB OK 127.0.0.1:6379\u003e keys * (empty array) 127.0.0.1:6379\u003e ","date":"2021-04-23","objectID":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B/:3:0","tags":["Redis"],"title":"Redis的使用\u0026redis-Value-string类型","uri":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B/"},{"categories":["Redis"],"content":"Value- 5种基本类型之字符串 ","date":"2021-04-23","objectID":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B/:4:0","tags":["Redis"],"title":"Redis的使用\u0026redis-Value-string类型","uri":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B/"},{"categories":["Redis"],"content":"1. 字符串 help @string命令组 Set 设置值 # 查看set帮助 127.0.0.1:6379\u003e help set SET key value [EX seconds|PX milliseconds] [NX|XX] [KEEPTTL] summary: Set the string value of a key since: 1.0.0 group: string NX -\u003e not x -\u003e not exist 不存在的时候才去设置 使用场景：分布式锁。谁先成功谁就拿到锁了 127.0.0.1:6379\u003e set k1 hello nx OK 127.0.0.1:6379\u003e set k1 world nx (nil) 127.0.0.1:6379\u003e get k1 \"hello\" 只有k1无值的时候才会生效 XX -\u003e exist 只能更新,无法赋值 127.0.0.1:6379\u003e set k2 redis xx (nil) 127.0.0.1:6379\u003e get k2 (nil) del 该命令用于在 key 存在是删除 key。 127.0.0.1:6379\u003e del k1 (integer) 1 127.0.0.1:6379\u003e get k1 (nil) 127.0.0.1:6379\u003e keys * 1) \"k2\" 2) \"orkey\" 3) \"andkey\" flushdb FLUSHDB [ASYNC] summary: Remove all keys from the current database since: 1.0.0 group: server flushall FLUSHALL [ASYNC] summary: Remove all keys from all databases since: 1.0.0 group: server mset/mget 批量设置，读取 127.0.0.1:6379\u003e mset k3 a k4 b OK 127.0.0.1:6379\u003e mget k3 k4 1) \"a\" 2) \"b\" 127.0.0.1:6379\u003e append 追加字符串的值 127.0.0.1:6379\u003e get k1 \"hello\" 127.0.0.1:6379\u003e append k1 \" world\" (integer) 11 127.0.0.1:6379\u003e get k1 \"hello world\" getrange 获取范围内的字符串 127.0.0.1:6379\u003e get k1 \"hello world\" 127.0.0.1:6379\u003e getrange k1 6 10 \"world\" 位置从0开始 反方向索引 127.0.0.1:6379\u003e getrange k1 -5 -1 \"world\" setrange 从指定位置开始set string值 127.0.0.1:6379\u003e setrange k1 6 SeaSoonKeun (integer) 17 127.0.0.1:6379\u003e get k1 \"hello SeaSoonKeun\" strlen 返回字符串长度 127.0.0.1:6379\u003e setrange k1 6 SeaSoonKeun (integer) 17 127.0.0.1:6379\u003e get k1 \"hello SeaSoonKeun\" 127.0.0.1:6379\u003e strlen k1 (integer) 17 type 查看key类型 127.0.0.1:6379\u003e type k1 string 127.0.0.1:6379\u003e get k1 \"hello SeaSoonKeun\" Key 中的 type 包含value 类型 Set 命令是 string 分组的，所以产生的数据都是 string类型的 127.0.0.1:6379\u003e set k4 999 OK 127.0.0.1:6379\u003e get k4 \"999\" 127.0.0.1:6379\u003e type k4 string 127.0.0.1:6379\u003e help set SET key value [EX seconds|PX milliseconds] [NX|XX] [KEEPTTL] summary: Set the string value of a key since: 1.0.0 group: string object 子命令列表 127.0.0.1:6379\u003e object help 1) OBJECT \u003csubcommand\u003e arg arg ... arg. Subcommands are: 2) ENCODING \u003ckey\u003e -- Return the kind of internal representation used in order to store the value associated with a key. 3) FREQ \u003ckey\u003e -- Return the access frequency index of the key. The returned integer is proportional to the logarithm of the recent access frequency of the key. 4) IDLETIME \u003ckey\u003e -- Return the idle time of the key, that is the approximated number of seconds elapsed since the last access to the key. 5) REFCOUNT \u003ckey\u003e -- Return the number of references of the value associated with the specified key. object encoding key 显示key编码 127.0.0.1:6379\u003e mget k1 k3 k4 1) \"hello SeaSoonKeun\" 2) \"a\" 3) \"999\" 127.0.0.1:6379\u003e type k1 string 127.0.0.1:6379\u003e type k3 string 127.0.0.1:6379\u003e type k4 string 127.0.0.1:6379\u003e object encoding k1 \"raw\" 127.0.0.1:6379\u003e object encoding k3 \"embstr\" 127.0.0.1:6379\u003e object encoding k4 \"int\" 虽然key的type都是string类型，但是有不同的编码。redis这种预埋设计，方便后面更加快速调用对应类型的方法进行计算，很大程度上提升了速度。 在此基础上，针对encoding是int类型的有下列方法： # 加一 INCR key summary: Increment the integer value of a key by one since: 1.0.0 INCRBY key increment summary: Increment the integer value of a key by the given amount since: 1.0.0 INCRBYFLOAT key increment summary: Increment the float value of a key by the given amount since: 2.6.0 DECR key summary: Decrement the integer value of a key by one since: 1.0.0 DECRBY key decrement summary: Decrement the integer value of a key by the given number since: 1.0.0 eg 127.0.0.1:6379\u003e get k4 \"999\" 127.0.0.1:6379\u003e 127.0.0.1:6379\u003e INCR k4 (integer) 1000 127.0.0.1:6379\u003e INCRBY k4 100 (integer) 1100 127.0.0.1:6379\u003e DECR k4 (integer) 1099 127.0.0.1:6379\u003e DECRBY k4 100 (integer) 999 一些方法会变掉key的类型，一些方法会提前固定编码 引申： 二进制安全 -\u003e 字节流 编码并不会影响数据存储，因为是首先是按字节流完成的数据存储，然后redis为了自身方法更快速的计算，在key上加了encoding类型数据，也会随着方法的调用发生encoding编码的改变。 eg macos默认使用utf-8 编码集 在此编码集下，添加一个key。 127.0.0.1:6379\u003e flushdb OK 127.0.0.1:6379\u003e 127.0.0.1:6379\u003e set k1 我 OK 127.0.0.1:6379\u003e STRLEN k1 (integer) 3 127.0.0.1:6379\u003e get k1 \"\\xe6\\x88\\x91\" 修改编码集为GBK 在此编码集下，添加一个相同的key。 [root@localhost ~]# redis-cli 127.0.0.1:6379\u003e flushdb OK 127.0.0.1:6379\u003e ","date":"2021-04-23","objectID":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B/:4:1","tags":["Redis"],"title":"Redis的使用\u0026redis-Value-string类型","uri":"/redis%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8Bvalue%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B/"},{"categories":["Mysql"],"content":"修改macOS Mysql的 root用户密码","date":"2021-04-22","objectID":"/%E4%BF%AE%E6%94%B9macos-mysql%E7%9A%84-root%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81/","tags":["Mysql","MacOS"],"title":"修改macOS Mysql的 root用户密码","uri":"/%E4%BF%AE%E6%94%B9macos-mysql%E7%9A%84-root%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81/"},{"categories":["Mysql"],"content":"修改macOS Mysql的 root用户密码 ","date":"2021-04-22","objectID":"/%E4%BF%AE%E6%94%B9macos-mysql%E7%9A%84-root%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81/:0:0","tags":["Mysql","MacOS"],"title":"修改macOS Mysql的 root用户密码","uri":"/%E4%BF%AE%E6%94%B9macos-mysql%E7%9A%84-root%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81/"},{"categories":["Mysql"],"content":"1. 关闭mysql服务 ","date":"2021-04-22","objectID":"/%E4%BF%AE%E6%94%B9macos-mysql%E7%9A%84-root%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81/:1:0","tags":["Mysql","MacOS"],"title":"修改macOS Mysql的 root用户密码","uri":"/%E4%BF%AE%E6%94%B9macos-mysql%E7%9A%84-root%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81/"},{"categories":["Mysql"],"content":"2. 禁止mysql验证功能 mbp:~ mr.x$ cd /usr/local/mysql # 输入苹果密码进入root用户 mbp:mysql mr.x$ sudo su Password: sh-3.2# cd bin/ sh-3.2# ./mysqld_safe --skip-grant-tables \u0026 2021-04-22T14:09:36.6NZ mysqld_safe Logging to '/usr/local/mysql/data/mbp.lan.err'. 2021-04-22T14:09:36.6NZ mysqld_safe Starting mysqld daemon with databases from /usr/local/mysql/data …… 回车后mysql会自动重启（偏好设置中mysql的状态会变成running）（注意：设置完成以后就不能手动关闭了，除非开机重起） ","date":"2021-04-22","objectID":"/%E4%BF%AE%E6%94%B9macos-mysql%E7%9A%84-root%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81/:2:0","tags":["Mysql","MacOS"],"title":"修改macOS Mysql的 root用户密码","uri":"/%E4%BF%AE%E6%94%B9macos-mysql%E7%9A%84-root%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81/"},{"categories":["Mysql"],"content":"3.刷新权限列表,重置新密码 普通用户执行. /usr/local/bin/mysql命令 mbp:bin mr.x$ ./mysql Welcome to the MySQL monitor. Commands end with ; or \\g. Your MySQL connection id is 196 Server version: 5.7.28-log MySQL Community Server (GPL) Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. mysql\u003e flush PRIVILEGES; Query OK, 0 rows affected (0.01 sec) mysql\u003e SET PASSWORD FOR 'root'@'localhost'='12345678' -\u003e ; Query OK, 0 rows affected (0.01 sec) mysql\u003e mysql\u003e exit ","date":"2021-04-22","objectID":"/%E4%BF%AE%E6%94%B9macos-mysql%E7%9A%84-root%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81/:3:0","tags":["Mysql","MacOS"],"title":"修改macOS Mysql的 root用户密码","uri":"/%E4%BF%AE%E6%94%B9macos-mysql%E7%9A%84-root%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81/"},{"categories":["Mysql"],"content":"4. 验证 命令行工具 mbp:bin mr.x$ ./mysql -u root -p Enter password: Welcome to the MySQL monitor. Commands end with ; or \\g. Your MySQL connection id is 251 Server version: 5.7.28-log MySQL Community Server (GPL) Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Type 'help;' or '\\h' for help. mysql\u003e show databases; +--------------------+ | Database | +--------------------+ | information_schema | | 用户 | | mysql | | performance_schema | | sys | | test01 | +--------------------+ 6 rows in set (0.01 sec) navicat 连接 ","date":"2021-04-22","objectID":"/%E4%BF%AE%E6%94%B9macos-mysql%E7%9A%84-root%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81/:4:0","tags":["Mysql","MacOS"],"title":"修改macOS Mysql的 root用户密码","uri":"/%E4%BF%AE%E6%94%B9macos-mysql%E7%9A%84-root%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81/"},{"categories":["工具"],"content":"Algolia评论系统","date":"2021-04-21","objectID":"/algolia%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/","tags":["github","PicGo","图床"],"title":"Algolia评论系统","uri":"/algolia%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"},{"categories":["工具"],"content":"Algolia 端 ","date":"2021-04-21","objectID":"/algolia%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/:1:0","tags":["github","PicGo","图床"],"title":"Algolia评论系统","uri":"/algolia%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"},{"categories":["工具"],"content":"注册algolia免费账号 ","date":"2021-04-21","objectID":"/algolia%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/:1:1","tags":["github","PicGo","图床"],"title":"Algolia评论系统","uri":"/algolia%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"},{"categories":["工具"],"content":"创建索引 ","date":"2021-04-21","objectID":"/algolia%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/:1:2","tags":["github","PicGo","图床"],"title":"Algolia评论系统","uri":"/algolia%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"},{"categories":["工具"],"content":"记录API Keys ","date":"2021-04-21","objectID":"/algolia%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/:1:3","tags":["github","PicGo","图床"],"title":"Algolia评论系统","uri":"/algolia%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"},{"categories":["Redis"],"content":"Redis介绍和安装","date":"2021-04-21","objectID":"/redis_intro_install/","tags":["Redis"],"title":"Redis介绍和安装","uri":"/redis_intro_install/"},{"categories":["Redis"],"content":"1. 常识 磁盘： 寻址：ms 带宽：G/M 内存：ns 寻址：ns 10万倍 ms us ns 带宽：G/M IO buffer成本问题 磁盘 磁道 扇区512Bytes 造成索引量很大 操作系统默认以4K为最小单位进行读取 ","date":"2021-04-21","objectID":"/redis_intro_install/:1:0","tags":["Redis"],"title":"Redis介绍和安装","uri":"/redis_intro_install/"},{"categories":["Redis"],"content":"2. 数据存储发展进程 grep awk java读取文件里的数据时，会随着数据量的变大，速度变慢。因为硬盘IO成为瓶颈； ","date":"2021-04-21","objectID":"/redis_intro_install/:2:0","tags":["Redis"],"title":"Redis介绍和安装","uri":"/redis_intro_install/"},{"categories":["Redis"],"content":"数据库引擎 https://db-engines.com/en/ ","date":"2021-04-21","objectID":"/redis_intro_install/:2:1","tags":["Redis"],"title":"Redis介绍和安装","uri":"/redis_intro_install/"},{"categories":["Redis"],"content":"编译：源码变为可执行程序 ","date":"2021-04-21","objectID":"/redis_intro_install/:2:2","tags":["Redis"],"title":"Redis介绍和安装","uri":"/redis_intro_install/"},{"categories":["Redis"],"content":"3. 安装 1,yum install wget 2,cd ~ 3,mkdir soft 4,cd soft 5,wget http://download.redis.io/releases/redis-5.0.5.tar.gz 6,tar xf redis...tar.gz 7,cd redis-src 8,看README.md 9, make ....yum install gcc .... make distclean 10,make 11,cd src ....生成了可执行程序 12, cd .. 13,make install PREFIX=/opt/mashibing/redis5 14,vi /etc/profile ... export REDIS_HOME=/opt/mashibing/redis5 ... export PATH=$PATH:$REDIS_HOME/bin ..source /etc/profile 15,cd utils 16,./install_server.sh （可以执行一次或多次） a) 一个物理机中可以有多个redis实例（进程），通过port区分 b) 可执行程序就一份在目录，但是内存中未来的多个实例需要各自的配置文件，持久化目录等资源 c) service redis_6379 start/stop/stauts \u003e linux /etc/init.d/**** d)脚本还会帮你启动！ 17,ps -fe | grep redis ","date":"2021-04-21","objectID":"/redis_intro_install/:3:0","tags":["Redis"],"title":"Redis介绍和安装","uri":"/redis_intro_install/"},{"categories":["Redis"],"content":"centos7编译报错 server.c:5307:31: 错误:‘struct redisServer’没有名为‘server_xxx’的成员 redis编译报上面错误，一般是环境问题，执行下面操作可以解决 1、安装gcc套装： yum install cpp yum install binutils yum install glibc yum install glibc-kernheaders yum install glibc-common yum install glibc-devel yum install gcc yum install make 2、升级gcc yum -y install centos-release-scl yum -y install devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils scl enable devtoolset-9 bash 3、设置永久升级： echo \"source /opt/rh/devtoolset-9/enable\" \u003e\u003e/etc/profile 4、安装redis： ","date":"2021-04-21","objectID":"/redis_intro_install/:3:1","tags":["Redis"],"title":"Redis介绍和安装","uri":"/redis_intro_install/"},{"categories":["Redis"],"content":"centos7 执行utils/install_server.sh 因为systemctl命令报错，注释掉即可 ","date":"2021-04-21","objectID":"/redis_intro_install/:3:2","tags":["Redis"],"title":"Redis介绍和安装","uri":"/redis_intro_install/"},{"categories":["工具"],"content":"配置 GIhub + PicGo 图床步骤","date":"2021-04-21","objectID":"/github-picgo/","tags":["github","PicGo","图床"],"title":"配置 GIhub + PicGo 图床","uri":"/github-picgo/"},{"categories":["工具"],"content":" 配置 GIhub + PicGo 图床 ","date":"2021-04-21","objectID":"/github-picgo/:0:0","tags":["github","PicGo","图床"],"title":"配置 GIhub + PicGo 图床","uri":"/github-picgo/"},{"categories":["工具"],"content":"1. 新建 github repositry ，并生成账号令牌key ","date":"2021-04-21","objectID":"/github-picgo/:1:0","tags":["github","PicGo","图床"],"title":"配置 GIhub + PicGo 图床","uri":"/github-picgo/"},{"categories":["工具"],"content":"2. macos 安装picgo brew install picgo --cask ","date":"2021-04-21","objectID":"/github-picgo/:2:0","tags":["github","PicGo","图床"],"title":"配置 GIhub + PicGo 图床","uri":"/github-picgo/"},{"categories":["工具"],"content":"3. 配置 picGO与 GitHub 进行关联 ","date":"2021-04-21","objectID":"/github-picgo/:3:0","tags":["github","PicGo","图床"],"title":"配置 GIhub + PicGo 图床","uri":"/github-picgo/"},{"categories":["工具"],"content":"1. 配置github图床 ","date":"2021-04-21","objectID":"/github-picgo/:3:1","tags":["github","PicGo","图床"],"title":"配置 GIhub + PicGo 图床","uri":"/github-picgo/"},{"categories":["工具"],"content":"2. 添加插件，每次上传完图片的url默认复制到剪贴板 ","date":"2021-04-21","objectID":"/github-picgo/:3:2","tags":["github","PicGo","图床"],"title":"配置 GIhub + PicGo 图床","uri":"/github-picgo/"},{"categories":["工具"],"content":"3. 两种上传方式 ","date":"2021-04-21","objectID":"/github-picgo/:3:3","tags":["github","PicGo","图床"],"title":"配置 GIhub + PicGo 图床","uri":"/github-picgo/"},{"categories":["工具"],"content":"4. 可粘贴对应URL至 Typora 或者其他Markdown编辑器中进行使用，不用担心路径问题导致图片丢失。 ","date":"2021-04-21","objectID":"/github-picgo/:3:4","tags":["github","PicGo","图床"],"title":"配置 GIhub + PicGo 图床","uri":"/github-picgo/"},{"categories":["工具"],"content":"搭建hugo静态博客","date":"2021-03-01","objectID":"/hugo_blog/","tags":["hugo"],"title":"搭建hugo静态博客","uri":"/hugo_blog/"},{"categories":["工具"],"content":"To be continued ","date":"2021-03-01","objectID":"/hugo_blog/:0:0","tags":["hugo"],"title":"搭建hugo静态博客","uri":"/hugo_blog/"},{"categories":["网站使用"],"content":"  LoveIt 是一个由 Dillon 开发的简洁、优雅且高效的 Hugo 博客主题。 它的原型基于 LeaveIt 主题 和 KeepIt 主题。 Hugo 主题 LoveItHugo 主题 LoveIt \" Hugo 主题 LoveIt ","date":"2019-08-02","objectID":"/loveit/:0:0","tags":null,"title":"关于 LoveIt","uri":"/loveit/"},{"categories":["网站使用"],"content":"特性 性能和 SEO  性能优化：在 Google PageSpeed Insights 中， 99/100 的移动设备得分和 100/100 的桌面设备得分  使用基于 JSON-LD 格式 的 SEO SCHEMA 文件进行 SEO 优化  支持 Google Analytics  支持 Fathom Analytics  支持搜索引擎的网站验证 (Google, Bind, Yandex and Baidu)  支持所有第三方库的 CDN  基于 lazysizes 自动转换图片为懒加载 外观和布局 / 响应式布局 / 浅色/深色 主题模式  全局一致的设计语言  支持分页  易用和自动展开的文章目录  支持多语言和国际化  美观的 CSS 动画 社交和评论系统  支持 Gravatar 头像  支持本地头像  支持多达 64 种社交链接  支持多达 28 种网站分享  支持 Disqus 评论系统  支持 Gitalk 评论系统  支持 Valine 评论系统  支持 Facebook 评论系统  支持 Telegram comments 评论系统  支持 Commento 评论系统  支持 Utterances 评论系统 扩展功能  支持基于 Lunr.js 或 algolia 的搜索  支持 Twemoji  支持代码高亮  一键复制代码到剪贴板  支持基于 lightgallery.js 的图片画廊  支持 Font Awesome 图标的扩展 Markdown 语法  支持上标注释的扩展 Markdown 语法  支持分数的扩展 Markdown 语法  支持基于 $ \\KaTeX $ 的数学公式  支持基于 mermaid 的图表 shortcode  支持基于 ECharts 的交互式数据可视化 shortcode  支持基于 Mapbox GL JS 的 Mapbox shortcode  支持基于 APlayer 和 MetingJS 的音乐播放器 shortcode  支持 Bilibili 视频 shortcode  支持多种注释的 shortcode  支持自定义样式的 shortcode  支持自定义脚本的 shortcode  支持基于 TypeIt 的打字动画 shortcode  支持基于 Smooth Scroll 的滚动动画  支持基于 cookieconsent 的 Cookie 许可横幅 … ","date":"2019-08-02","objectID":"/loveit/:0:1","tags":null,"title":"关于 LoveIt","uri":"/loveit/"},{"categories":["网站使用"],"content":"许可协议 LoveIt 根据 MIT 许可协议授权。 更多信息请查看 LICENSE 文件。 LoveIt 主题中用到了以下项目，感谢它们的作者： normalize.css Font Awesome Simple Icons Animate.css Smooth Scroll autocomplete.js Lunr.js algoliasearch lazysizes object-fit-images Twemoji lightgallery.js clipboard.js Sharer.js TypeIt $ \\KaTeX $ mermaid ECharts Mapbox GL JS APlayer MetingJS Gitalk Valine cookieconsent ","date":"2019-08-02","objectID":"/loveit/:0:2","tags":null,"title":"关于 LoveIt","uri":"/loveit/"},{"categories":null,"content":"redis-pipe ","date":"0001-01-01","objectID":"/redis-pipe/:0:0","tags":null,"title":"","uri":"/redis-pipe/"},{"categories":null,"content":"1. Why Redis是一种基于客户端-服务端模型以及请求/响应协议的TCP服务。 这意味着通常情况下一个请求会遵循以下步骤： 客户端向服务端发送一个查询请求，并监听Socket返回，通常是以阻塞模式，等待服务端响应。 服务端处理命令，并将结果返回给客户端。 客户端和服务器通过网络进行连接。这个连接可以很快（loopback接口）或很慢（建立了一个多次跳转的网络连接） RTT (Round Trip Time - 往返时间). 当客户端需要在一个批处理中执行多次请求时很容易看到这是如何影响性能 ","date":"0001-01-01","objectID":"/redis-pipe/:1:0","tags":null,"title":"","uri":"/redis-pipe/"},{"categories":null,"content":"2. What 将多个命令发送到服务器，而不用等待回复，最后在一个步骤中读取该答复。 一种几十年来广泛使用的技术。 例如许多POP3协议已经实现支持这个功能，大大加快了从服务器下载新邮件的过程。 ","date":"0001-01-01","objectID":"/redis-pipe/:2:0","tags":null,"title":"","uri":"/redis-pipe/"},{"categories":null,"content":"3.How ","date":"0001-01-01","objectID":"/redis-pipe/:3:0","tags":null,"title":"","uri":"/redis-pipe/"},{"categories":null,"content":"管道（Pipelining） VS 脚本（Scripting） [root@localhost ~]# echo -e \"ping\\nping\\nping\" | nc 127.0.0.1 6379 +PONG +PONG +PONG ncat - Concatenate and redirect sockets 大量 pipeline 应用场景可通过 Redis 脚本（Redis 版本 \u003e= 2.6）得到更高效的处理，后者在服务器端执行大量工作。脚本的一大优势是可通过最小的延迟读写数据，让读、计算、写等操作变得非常快（pipeline 在这种情况下不能使用，因为客户端在写命令前需要读命令返回的结果）。 应用程序有时可能在 pipeline 中发送 EVAL 或 EVALSHA 命令。Redis 通过 SCRIPT LOAD 命令（保证 EVALSHA 成功被调用）明确支持这种情况。 ","date":"0001-01-01","objectID":"/redis-pipe/:3:1","tags":null,"title":"","uri":"/redis-pipe/"},{"categories":null,"content":"Redis-Pub/Sub ","date":"0001-01-01","objectID":"/redis-pubsub/:0:0","tags":null,"title":"","uri":"/redis-pubsub/"},{"categories":null,"content":"1. Why/What 订阅，取消订阅和发布实现了发布/订阅消息范式(引自wikipedia)，发送者（发布者）不是计划发送消息给特定的接收者（订阅者）。而是发布的消息分到不同的频道，不需要知道什么样的订阅者订阅。订阅者对一个或多个频道感兴趣，只需接收感兴趣的消息，不需要知道什么样的发布者发布的。这种发布者和订阅者的解耦合可以带来更大的扩展性和更加动态的网络拓扑。 为了订阅foo和bar，客户端发出一个订阅的频道名称: SUBSCRIBE foo bar 其他客户端发到这些频道的消息将会被推送到所有订阅的客户端。 客户端订阅到一个或多个频道不必发出命令，尽管他能订阅和取消订阅其他频道。订阅和取消订阅的响应被封装在发送的消息中，以便客户端只需要读一个连续的消息流，其中第一个元素表示消息类型。 ","date":"0001-01-01","objectID":"/redis-pubsub/:1:0","tags":null,"title":"","uri":"/redis-pubsub/"},{"categories":null,"content":"3. How 127.0.0.1:6379\u003e help @pubsub PSUBSCRIBE pattern [pattern ...] summary: Listen for messages published to channels matching the given patterns since: 2.0.0 PUBLISH channel message summary: Post a message to a channel since: 2.0.0 PUBSUB subcommand [argument [argument ...]] summary: Inspect the state of the Pub/Sub subsystem since: 2.8.0 PUNSUBSCRIBE [pattern [pattern ...]] summary: Stop listening for messages posted to channels matching the given patterns since: 2.0.0 SUBSCRIBE channel [channel ...] summary: Listen for messages published to the given channels since: 2.0.0 UNSUBSCRIBE [channel [channel ...]] summary: Stop listening for messages posted to the given channels since: 2.0.0 ","date":"0001-01-01","objectID":"/redis-pubsub/:2:0","tags":null,"title":"","uri":"/redis-pubsub/"},{"categories":null,"content":"Redis-transactions ","date":"0001-01-01","objectID":"/redis-transactions/:0:0","tags":null,"title":"","uri":"/redis-transactions/"},{"categories":null,"content":"1. why ","date":"0001-01-01","objectID":"/redis-transactions/:1:0","tags":null,"title":"","uri":"/redis-transactions/"},{"categories":null,"content":"2. What ","date":"0001-01-01","objectID":"/redis-transactions/:2:0","tags":null,"title":"","uri":"/redis-transactions/"},{"categories":null,"content":"3. How ","date":"0001-01-01","objectID":"/redis-transactions/:3:0","tags":null,"title":"","uri":"/redis-transactions/"},{"categories":null,"content":"1.Help @transactions 127.0.0.1:6379\u003e help @transactions DISCARD - summary: Discard all commands issued after MULTI since: 2.0.0 EXEC - summary: Execute all commands issued after MULTI since: 1.2.0 MULTI - summary: Mark the start of a transaction block since: 1.2.0 UNWATCH - summary: Forget about all watched keys since: 2.2.0 WATCH key [key ...] summary: Watch the given keys to determine execution of the MULTI/EXEC block since: 2.2.0 ","date":"0001-01-01","objectID":"/redis-transactions/:3:1","tags":null,"title":"","uri":"/redis-transactions/"},{"categories":null,"content":"eg: ","date":"0001-01-01","objectID":"/redis-transactions/:3:2","tags":null,"title":"","uri":"/redis-transactions/"},{"categories":null,"content":"4. Where ","date":"0001-01-01","objectID":"/redis-transactions/:4:0","tags":null,"title":"","uri":"/redis-transactions/"},{"categories":null,"content":"TO be continued ","date":"0001-01-01","objectID":"/about/:0:0","tags":null,"title":"关于我","uri":"/about/"}]